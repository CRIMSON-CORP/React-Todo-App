{"version":3,"sources":["Components/Inner Component/Input.js","Components/Inner Component/EachTodo.js","Components/Inner Component/List.js","Components/Inner Component/Control.js","Components/App.js","serviceWorker.js","index.js"],"names":["Input","props","sendProps","sendKeyProps","setInput","className","id","type","name","placeholder","onChange","onKeyUp","autoComplete","required","onClick","aria-label","role","EachTodo","completed","Todo","updateTodo","removeTodo","useState","Id","setId","useEffect","comp","data-id","checked","viewBox","d","points","style","opacity","textDecoration","display","fontWeight","List","TodoListArray","filtered","length","TodoBlocks","map","eachTodo","index","key","Control","progress","clearDone","done","statusHandler","x1","y1","x2","y2","offset","stopColor","cx","cy","r","strokeDashoffset","disabled","value","App","setTodo","setTodoListArray","setDone","setProgress","setFiltered","status","setStatus","setSend","document","getElementById","uuid","v4","prev","DoneTodos","filter","arr","Math","floor","isNaN","FilterLogic","target","undefined","alert","focus","keyCode","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e76defac.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Input({ props: { sendProps, sendKeyProps, setInput } }) {\r\n    return (\r\n        <div className=\"inputBlock\">\r\n            <div className=\"input-container\">\r\n                <input\r\n                    id=\"inputBox\"\r\n                    type=\"text\"\r\n                    name=\"inputBlock\"\r\n                    placeholder=\"What Do you want Todo?...\"\r\n                    onChange={setInput}\r\n                    onKeyUp={sendKeyProps}\r\n                    autoComplete=\"off\"\r\n                    required=\"required\"\r\n                />\r\n                <div className=\"input\"></div>\r\n            </div>\r\n            <div className=\"plus\" onClick={sendProps}>\r\n                <span aria-label=\"addTodo\" role=\"img\">\r\n                    &#10133;\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction EachTodo({\r\n    props: {\r\n        EachTodo: { id, completed, Todo },\r\n        updateTodo,\r\n        removeTodo,\r\n    },\r\n}) {\r\n    const [Id, setId] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        setId(id);\r\n    }, [Todo, id]);\r\n    var comp = completed;\r\n    var Done = {\r\n        opacity: 0.4,\r\n        textDecoration: \"line-through\",\r\n    };\r\n\r\n    return (\r\n        <div className=\"label\" data-id={`${Id}`}>\r\n            <label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    data-id={`${Id}`}\r\n                    checked={comp}\r\n                    onChange={() => {\r\n                        updateTodo(Id);\r\n                    }}\r\n                />\r\n                <div className=\"Todo\">\r\n                    <div className=\"checkbox-container\">\r\n                        <svg viewBox=\"0 0 100 100\" className=\"checkbox\">\r\n                            <path\r\n                                className=\"st0\"\r\n                                d=\"M85,92H15c-3.9,0-7-3.1-7-7V15c0-3.9,3.1-7,7-7h70c3.9,0,7,3.1,7,7v70C92,88.9,88.9,92,85,92z\"\r\n                            />\r\n                            <polyline className=\"check\" points=\"22.5,47.5 42.5,67.5 78.5,31.5 \" />\r\n                        </svg>\r\n                    </div>\r\n                    <span style={comp ? Done : null}>\r\n                        {Todo} <span className=\"cross\"></span>\r\n                    </span>\r\n                </div>\r\n            </label>\r\n            <div\r\n                className={\"close\"}\r\n                style={{ display: comp ? \"inline-grid\" : \"none\", fontWeight: \"bolder\" }}\r\n                onClick={() => {\r\n                    removeTodo(Id);\r\n                }}\r\n                data-id={Id}\r\n            >\r\n                &#10005;\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EachTodo;\r\n","import React from \"react\";\r\n// import uuid from \"uuid\";\r\nimport EachTodo from \"./EachTodo\";\r\n\r\nexport default function List({ props: { removeTodo, updateTodo, TodoListArray, filtered } }) {\r\n    if (TodoListArray.length === 0) return <div className=\"listContainer\"></div>;\r\n\r\n    var TodoBlocks = filtered.map((eachTodo, index) => {\r\n        return (\r\n            <EachTodo\r\n                key={index}\r\n                props={{\r\n                    EachTodo: eachTodo,\r\n                    updateTodo: updateTodo,\r\n                    removeTodo: removeTodo,\r\n                }}\r\n            />\r\n        );\r\n    });\r\n\r\n    return <div className=\"listContainer\">{TodoBlocks}</div>;\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Control({\r\n    props: { progress, TodoListArray, clearDone, done, statusHandler },\r\n}) {\r\n    return (\r\n        <div className=\"control\">\r\n            <div className=\"box\">\r\n                <div className=\"percent\">\r\n                    <svg>\r\n                        <linearGradient id=\"grad\" x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"100%\">\r\n                            <stop offset=\"0%\" stopColor=\"#ff0612\"></stop>\r\n                            <stop offset=\"100%\" stopColor=\"#6544ff\"></stop>\r\n                        </linearGradient>\r\n                        <circle cx=\"50%\" cy=\"50%\" r=\"40\" className=\"dark\"></circle>\r\n\r\n                        <circle\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            r=\"40\"\r\n                            style={{ strokeDashoffset: 251 - (251 * progress) / 100 }}\r\n                        ></circle>\r\n                    </svg>\r\n                    <div className=\"number\">\r\n                        {progress !== 0 || TodoListArray.length !== 0 ? (\r\n                            <>\r\n                                <h2>\r\n                                    {progress}\r\n                                    <span className=\"perc\">%</span>\r\n                                </h2>\r\n                                <span className=\"comp\">completed</span>\r\n                            </>\r\n                        ) : (\r\n                            <h2 className=\"empty\">No Task</h2>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <button\r\n                    onClick={clearDone}\r\n                    disabled={done === 0 ? true : false}\r\n                    className={done === 0 ? \"disable\" : \"clear\"}\r\n                >\r\n                    &#10005; Clear Done\r\n                </button>\r\n                <select name=\"filter\" id=\"filter\" onChange={statusHandler}>\r\n                    <option value=\"All\">All</option>\r\n                    <option value=\"Completed\">Completed</option>\r\n                    <option value=\"Uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport uuid from \"uuid\";\r\nimport Input from \"./Inner Component/Input\";\r\nimport List from \"./Inner Component/List\";\r\nimport Control from \"./Inner Component/Control\";\r\n\r\nexport default function App() {\r\n    const [Todo, setTodo] = useState({});\r\n    const [TodoListArray, setTodoListArray] = useState([]);\r\n    const [done, setDone] = useState(0);\r\n    const [progress, setProgress] = useState(\"\");\r\n    const [filtered, setFiltered] = useState([]);\r\n    const [status, setStatus] = useState(\"All\");\r\n\r\n    useEffect(() => {\r\n        const DoneTodos = TodoListArray.filter((arr) => {\r\n            return arr.completed === true;\r\n        });\r\n        var progress = Math.floor((DoneTodos.length / TodoListArray.length) * 100);\r\n        if (isNaN(progress)) progress = 0;\r\n        setProgress(progress);\r\n        setDone(DoneTodos.length);\r\n    }, [progress, TodoListArray]);\r\n\r\n    useEffect(() => {\r\n        FilterLogic();\r\n        // eslint-disable-next-line\r\n    }, [status, TodoListArray]);\r\n\r\n    function sendProps() {\r\n        Todo.Todo === undefined ? alert(\"Please write a Task\") : setSend();\r\n        document.getElementById(\"inputBox\").focus();\r\n    }\r\n    function sendKeyProps({ keyCode }) {\r\n        if (Todo.Todo !== undefined) {\r\n            if (keyCode === 13) setSend();\r\n        } else alert(\"Please write a Task\");\r\n    }\r\n\r\n    function setSend() {\r\n        setTodo({});\r\n        document.getElementById(\"inputBox\").value = null;\r\n        Todo.id = uuid.v4();\r\n        Todo.completed = false;\r\n        setTodoListArray((prev) => [...prev, Todo]);\r\n    }\r\n\r\n    function setInput({ target: { value } }) {\r\n        setTodo({ Todo: value });\r\n    }\r\n\r\n    function updateTodo(id) {\r\n        setTodoListArray(\r\n            TodoListArray.map((arr) => {\r\n                if (arr.id === id) {\r\n                    arr.completed = !arr.completed;\r\n                }\r\n                return arr;\r\n            })\r\n        );\r\n    }\r\n\r\n    function removeTodo(id) {\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.id !== id));\r\n    }\r\n\r\n    function clearDone() {\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.completed === false));\r\n    }\r\n\r\n    function FilterLogic() {\r\n        switch (status) {\r\n            case \"Completed\":\r\n                setFiltered(TodoListArray.filter((arr) => arr.completed === true));\r\n                break;\r\n            case \"Uncompleted\":\r\n                setFiltered(TodoListArray.filter((arr) => arr.completed === false));\r\n                break;\r\n            default:\r\n                setFiltered(TodoListArray);\r\n        }\r\n    }\r\n\r\n    function statusHandler({ target: { value } }) {\r\n        setStatus(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Control\r\n                props={{\r\n                    progress: progress,\r\n                    TodoListArray: TodoListArray,\r\n                    clearDone: clearDone,\r\n                    done: done,\r\n                    statusHandler: statusHandler,\r\n                }}\r\n            />\r\n            <Input\r\n                props={{\r\n                    sendProps: sendProps,\r\n                    sendKeyProps: sendKeyProps,\r\n                    setInput: setInput,\r\n                }}\r\n            />\r\n            <List\r\n                props={{\r\n                    removeTodo: removeTodo,\r\n                    updateTodo: updateTodo,\r\n                    TodoListArray: TodoListArray,\r\n                    filtered: filtered,\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.register();\n"],"sourceRoot":""}