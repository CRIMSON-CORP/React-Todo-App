{"version":3,"sources":["Components/Inner Component/Input.js","Components/Inner Component/EachTodo.js","Components/Inner Component/List.js","Components/Inner Component/Control.js","Components/App.js","Components/OuterControl.js","Components/Main.js","serviceWorker.js","index.js"],"names":["Input","props","sendProps","setInput","className","onSubmit","type","name","onChange","autoComplete","required","data-name","xmlns","viewBox","preserveAspectRatio","d","transform","fill","size","EachTodo","id","completed","Todo","updateTodo","removeTodo","comp","data-id","checked","points","style","opacity","textDecoration","fontWeight","onClick","List","TodoListArray","filtered","whichMode","mode","TodoBlocks","map","eachTodo","index","key","length","Control","progress","clearDone","done","statusHandler","status","x1","y1","x2","y2","offset","stopColor","cx","cy","r","strokeDashoffset","strokeWidth","disabled","value","App","app","useState","setTodo","TodoLocal","localStorage","getItem","undefined","JSON","parse","setTodoListArray","setDone","setProgress","setFiltered","setStatus","Trans","x","$","css","useEffect","DoneTodos","filter","arr","Math","floor","isNaN","FilterLogic","setItem","stringify","target","event","preventDefault","inputBox","todo","trim","val","focus","alert","uuid","v4","prev","OuterControl","setNewListName","addList","setCurrentList","setRename","updateList","deleteList","currentList","clearList","changeMode","sendForm","side","setSide","list","setList","currentListId","setCurrentListId","modes","setModes","contactForm","setcontactForm","check","input","next","Provider","persist","tagName","removeClass","addClass","fadeIn","select","click","blur","test","this","keyup","fadeOut","textAlign","fontSize","textShadow","display","userSelect","fullname","email","message","href","marginLeft","temp","append","text","document","execCommand","remove","dotenv","config","Main","content","ListLocal","setApp","Number","parseInt","newListName","reName","toLowerCase","setwhichMode","NewListProps","removeItem","filteredList","clear","form","a","details","transporter","nodemailer","createTransport","service","secure","auth","user","process","pass","password","tls","rejectUnauthorized","secureProtocol","maildata","from","to","subject","html","sendMail","err","info","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b7e7fe12.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MdAdd } from \"react-icons/md\";\r\n\r\nexport default function Input({ props: { sendProps, setInput } }) {\r\n    return (\r\n        <form className=\"inputBlock\" onSubmit={sendProps}>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"Input\"\r\n                    name=\"inputBlock\"\r\n                    onChange={setInput}\r\n                    autoComplete=\"off\"\r\n                    required=\"required\"\r\n                />\r\n                <svg\r\n                    className=\"border\"\r\n                    data-name=\"Layer 1\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    viewBox=\"0 0 275.05 40\"\r\n                    preserveAspectRatio=\"none\"\r\n                >\r\n                    <path\r\n                        className=\"cls-1 path\"\r\n                        d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                        transform=\"translate(-1.3 -0.77)\"\r\n                    />\r\n                    <path\r\n                        className=\"cls-2 path\"\r\n                        d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                        transform=\"translate(-1.3 -0.77)\"\r\n                    />\r\n                </svg>\r\n                <span>What Do you want Todo?...</span>\r\n            </div>\r\n            <button className=\"plus\" type=\"submit\">\r\n                <MdAdd fill=\"#222\" className=\"icon\" size=\"1.2rem\" />\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { MdClear } from \"react-icons/md\";\r\n\r\nfunction EachTodo({\r\n    props: {\r\n        EachTodo: { id, completed, Todo },\r\n        updateTodo,\r\n        removeTodo,\r\n    },\r\n}) {\r\n    var comp = completed;\r\n    var Done = {\r\n        opacity: 0.4,\r\n        textDecoration: \"line-through\",\r\n    };\r\n\r\n    return (\r\n        <div className=\"label\" data-id={`${id}`}>\r\n            <label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    data-id={`${id}`}\r\n                    checked={comp}\r\n                    onChange={() => {\r\n                        updateTodo(id);\r\n                    }}\r\n                />\r\n                <div className=\"Todo\">\r\n                    <div className=\"checkbox-container\">\r\n                        <svg viewBox=\"0 0 100 100\" className=\"checkbox\">\r\n                            <path\r\n                                className=\"st0\"\r\n                                d=\"M85,92H15c-3.9,0-7-3.1-7-7V15c0-3.9,3.1-7,7-7h70c3.9,0,7,3.1,7,7v70C92,88.9,88.9,92,85,92z\"\r\n                            />\r\n                            <polyline className=\"check\" points=\"22.5,47.5 42.5,67.5 78.5,31.5 \" />\r\n                        </svg>\r\n                    </div>\r\n                    <span style={comp ? Done : null}>\r\n                        {Todo} <span className=\"cross\"></span>\r\n                    </span>\r\n                </div>\r\n            </label>\r\n            <MdClear\r\n                className={\"close\"}\r\n                fill=\"red\"\r\n                style={{\r\n                    transform: comp ? \"scale(1)\" : \"scale(0)\",\r\n                    fontWeight: \"bolder\",\r\n                }}\r\n                onClick={() => {\r\n                    removeTodo(id);\r\n                }}\r\n                data-id={id}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EachTodo;\r\n","import React from \"react\";\r\nimport EachTodo from \"./EachTodo\";\r\n\r\nexport default function List({\r\n    props: { removeTodo, updateTodo, TodoListArray, filtered, mode, whichMode },\r\n}) {\r\n    var TodoBlocks = filtered.map((eachTodo, index) => {\r\n        return (\r\n            <EachTodo\r\n                key={index}\r\n                props={{\r\n                    EachTodo: eachTodo,\r\n                    updateTodo: updateTodo,\r\n                    removeTodo: removeTodo,\r\n                }}\r\n            />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className={`listContainer ${whichMode ? \"darkMode\" : \"LightMode\"}`}>\r\n            {TodoListArray.length === 0 ? \"\" : TodoBlocks}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Control({\r\n    props: { progress, TodoListArray, clearDone, done, statusHandler, status, mode, whichMode },\r\n}) {\r\n    return (\r\n        <div className=\"control\">\r\n            <div className=\"box\">\r\n                <div className=\"percent\">\r\n                    <svg>\r\n                        <linearGradient id=\"grad\" x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"100%\">\r\n                            <stop offset=\"0%\" stopColor=\"#ff0612\"></stop>\r\n                            <stop offset=\"100%\" stopColor=\"#6544ff\"></stop>\r\n                        </linearGradient>\r\n                        <circle cx=\"50%\" cy=\"50%\" r=\"40\" className=\"dark circle\"></circle>\r\n\r\n                        <circle\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            r=\"40\"\r\n                            className=\"grad circle\"\r\n                            style={{\r\n                                strokeDashoffset:\r\n                                    250.92137145996094 - (250.92137145996094 * progress) / 100,\r\n                                strokeWidth: progress === 0 ? \"0px\" : \"10px\",\r\n                            }}\r\n                        ></circle>\r\n                    </svg>\r\n                    <div className={`number ${whichMode ? \"darkMode\" : \"LightMode\"}`}>\r\n                        {progress !== 0 || TodoListArray.length !== 0 ? (\r\n                            <>\r\n                                <h2>\r\n                                    {progress}\r\n                                    <span className=\"perc\">%</span>\r\n                                </h2>\r\n                                <span className=\"comp\">completed</span>\r\n                            </>\r\n                        ) : (\r\n                            <h2 className=\"empty\">No Task</h2>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <button\r\n                    onClick={clearDone}\r\n                    disabled={done === 0 ? true : false}\r\n                    className={done === 0 ? \"disable\" : \"clear\"}\r\n                >\r\n                    &#10005; Clear Done\r\n                </button>\r\n                <select name=\"filter\" id=\"filter\" onChange={statusHandler} value={status}>\r\n                    <option value=\"All\">All</option>\r\n                    <option value=\"Completed\">Completed</option>\r\n                    <option value=\"Uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport uuid from \"uuid\";\r\nimport Input from \"./Inner Component/Input\";\r\nimport List from \"./Inner Component/List\";\r\nimport Control from \"./Inner Component/Control\";\r\nimport $ from \"jquery\";\r\n\r\nexport default function App({ props: { app, whichMode } }) {\r\n    const [id] = useState(app.id);\r\n    const [Todo, setTodo] = useState({});\r\n    const [TodoListArray, setTodoListArray] = useState(() => {\r\n        var TodoLocal = localStorage.getItem(id);\r\n        if (TodoLocal === null || TodoLocal === undefined) return [];\r\n        else return JSON.parse(TodoLocal);\r\n    });\r\n    const [done, setDone] = useState(0);\r\n    const [progress, setProgress] = useState(\"\");\r\n    const [filtered, setFiltered] = useState([]);\r\n    const [status, setStatus] = useState(\"All\");\r\n\r\n    useEffect(() => {\r\n        const DoneTodos = TodoListArray.filter((arr) => arr.completed === true);\r\n        var progress = Math.floor((DoneTodos.length / TodoListArray.length) * 100);\r\n        if (isNaN(progress)) progress = 0;\r\n        setProgress(progress);\r\n        setDone(DoneTodos.length);\r\n    }, [progress, TodoListArray]);\r\n\r\n    useEffect(() => {\r\n        function FilterLogic() {\r\n            switch (status) {\r\n                case \"Completed\":\r\n                    setFiltered(TodoListArray.filter((arr) => arr.completed === true));\r\n                    break;\r\n                case \"Uncompleted\":\r\n                    setFiltered(TodoListArray.filter((arr) => arr.completed === false));\r\n                    break;\r\n                default:\r\n                    setFiltered(TodoListArray);\r\n            }\r\n        }\r\n        FilterLogic();\r\n    }, [TodoListArray, status]);\r\n\r\n    useEffect(() => {\r\n        Trans(false);\r\n    }, [status]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(id, JSON.stringify(TodoListArray));\r\n    }, [TodoListArray, id]);\r\n\r\n    function Trans(x) {\r\n        if (x) {\r\n            $(\".checkbox path\").css(\"transition\", \".4s\");\r\n            $(\".check\").css(\"transition\", \".4s\");\r\n        } else {\r\n            $(\".checkbox path\").css(\"transition\", \"none\");\r\n            $(\".check\").css(\"transition\", \"none\");\r\n        }\r\n    }\r\n\r\n    function sendProps(event) {\r\n        event.preventDefault();\r\n        var inputBox = $(\".Input\");\r\n        let { Todo: todo } = Todo;\r\n        if (todo.trim() === \"\" || todo.trim() === undefined) {\r\n            inputBox.val(null).focus();\r\n            return alert(\"Please write a Task\");\r\n        }\r\n        Todo.id = uuid.v4();\r\n        Todo.completed = false;\r\n        setTodoListArray((prev) => [...prev, Todo]);\r\n        inputBox.val(null).focus();\r\n        setTodo({});\r\n        setStatus(\"All\");\r\n    }\r\n\r\n    function setInput({ target: { value } }) {\r\n        setTodo({ Todo: value });\r\n    }\r\n\r\n    function updateTodo(id) {\r\n        Trans(true);\r\n        setTodoListArray(\r\n            TodoListArray.map((arr) => {\r\n                if (arr.id === id) arr.completed = !arr.completed;\r\n                return arr;\r\n            })\r\n        );\r\n    }\r\n\r\n    function removeTodo(id) {\r\n        Trans(false);\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.id !== id));\r\n    }\r\n\r\n    function clearDone() {\r\n        Trans(false);\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.completed === false));\r\n    }\r\n\r\n    function statusHandler({ target: { value } }) {\r\n        setStatus(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"ListName\">{app.name}</h1>\r\n            <Control\r\n                props={{\r\n                    progress: progress,\r\n                    TodoListArray: TodoListArray,\r\n                    clearDone: clearDone,\r\n                    done: done,\r\n                    status: status,\r\n                    statusHandler: statusHandler,\r\n                    whichMode: whichMode,\r\n                }}\r\n            />\r\n            <Input\r\n                props={{\r\n                    sendProps: sendProps,\r\n                    setInput: setInput,\r\n                    whichMode: whichMode,\r\n                }}\r\n            />\r\n            <List\r\n                props={{\r\n                    removeTodo: removeTodo,\r\n                    updateTodo: updateTodo,\r\n                    TodoListArray: TodoListArray,\r\n                    filtered: filtered,\r\n                    whichMode: whichMode,\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    MdDehaze,\r\n    MdClear,\r\n    MdAdd,\r\n    MdEdit,\r\n    MdDelete,\r\n    MdList,\r\n    MdDeleteSweep,\r\n    MdCheck,\r\n    MdSend,\r\n} from \"react-icons/md\";\r\nimport { FiHeart, FiMoon, FiSun, FiPhone } from \"react-icons/fi\";\r\nimport { FaFacebookF, FaInstagram, FaWhatsapp, FaFacebookMessenger } from \"react-icons/fa\";\r\nimport { IconContext } from \"react-icons\";\r\nimport $ from \"jquery\";\r\n\r\nfunction OuterControl({\r\n    props: {\r\n        app,\r\n        setNewListName,\r\n        addList,\r\n        setCurrentList,\r\n        setRename,\r\n        updateList,\r\n        deleteList,\r\n        currentList,\r\n        clearList,\r\n        changeMode,\r\n        whichMode,\r\n        sendForm,\r\n    },\r\n}) {\r\n    const [side, setSide] = useState(false);\r\n    const [list, setList] = useState([]);\r\n    const [currentListId, setCurrentListId] = useState(\"\");\r\n    const [modes, setModes] = useState(true);\r\n    const [contactForm, setcontactForm] = useState({});\r\n    // creates Lists of TodoList Categories\r\n    useEffect(() => {\r\n        var list = app.map((app, index) => {\r\n            return (\r\n                <IconContext.Provider\r\n                    value={{\r\n                        size: \"1.5rem\",\r\n                        className: `ListSetIcon ${whichMode ? \"\" : \"light\"}`,\r\n                    }}\r\n                    key={index}\r\n                >\r\n                    <li\r\n                        className={`listSet ${whichMode ? \"dark\" : \"light\"}`}\r\n                        data-id={app.id}\r\n                        onClick={(event) => {\r\n                            event.persist();\r\n                            if (event.target.tagName === \"svg\" || event.target.tagName === \"path\") {\r\n                                return;\r\n                            }\r\n                            setCurrentList(index);\r\n                            setSide(false);\r\n                            $(\".listSet\").removeClass(\"active\");\r\n                            $(`.listSet[data-id=\"${app.id}\"]`).addClass(\"active\");\r\n                        }}\r\n                    >\r\n                        <MdList className=\"icon\" />\r\n                        <h3>{app.name}</h3>\r\n                        <MdEdit\r\n                            data-id={app.id}\r\n                            className=\"icon edit\"\r\n                            onClick={() => {\r\n                                $(\".rename\").fadeIn();\r\n                                $(\".renamebox\").val(app.name).select();\r\n                                setCurrentListId(app.id);\r\n                            }}\r\n                        />\r\n                        <MdDelete\r\n                            className=\"icon deleteIcon\"\r\n                            data-id={app.id}\r\n                            onClick={() => {\r\n                                $(\".delete\").fadeIn();\r\n                                setCurrentListId(app.id);\r\n                            }}\r\n                        />\r\n                    </li>\r\n                </IconContext.Provider>\r\n            );\r\n        });\r\n        setList(list);\r\n    }, [app, setCurrentList, whichMode]);\r\n\r\n    if (side) {\r\n        $(\".container\").click(() => {\r\n            setSide(false);\r\n        });\r\n    }\r\n\r\n    $(`.listSet`).removeClass(\"active\");\r\n    $(`.listSet:eq(${currentList})`).addClass(\"active\");\r\n\r\n    if (whichMode) $(\".modal\").removeClass(\"light\");\r\n    else $(\".modal\").addClass(\"light\");\r\n\r\n    $(\".contactModal .Input.email\").blur(function () {\r\n        if (!/@/.test($(this).val())) {\r\n            $(this).next().css(\"stroke\", \"red\");\r\n        } else {\r\n            $(this).next().css(\"stroke\", \"#9252ff\");\r\n        }\r\n    });\r\n    function check(input) {\r\n        if (input.val().trim() === \"\") {\r\n            input.next().css(\"stroke\", \"red\");\r\n        } else {\r\n            input.next().css(\"stroke\", \"#9252ff\");\r\n        }\r\n    }\r\n    $(\".contactModal .Input\").blur(function () {\r\n        check($(this));\r\n    });\r\n    $(\".contactModal .Input\").keyup(function () {\r\n        check($(this));\r\n    });\r\n    return (\r\n        <>\r\n            <div className={`ham ${whichMode ? \"dark\" : \"light\"}`}>\r\n                <MdDehaze\r\n                    size=\"1.5rem\"\r\n                    className=\"icon\"\r\n                    onClick={() => {\r\n                        setSide(true);\r\n                    }}\r\n                />\r\n            </div>\r\n            <div\r\n                className={`sideBar ${side ? \"openBar\" : \"closeBar\"} ${\r\n                    whichMode ? \"\" : \"lightMode\"\r\n                }`}\r\n            >\r\n                <h2>\r\n                    Your List Set\r\n                    <MdClear\r\n                        size=\"1.5rem\"\r\n                        className=\"icon\"\r\n                        onClick={() => {\r\n                            setSide(false);\r\n                        }}\r\n                    />\r\n                </h2>\r\n                <ul>\r\n                    {list}\r\n                    <hr />\r\n                    <IconContext.Provider value={{ size: \"1.5rem\" }}>\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".newModal\").fadeIn();\r\n                                $(\".new\");\r\n                            }}\r\n                        >\r\n                            <MdAdd />\r\n                            <h3>Add New List</h3>\r\n                        </li>\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".clearListModal\").fadeIn();\r\n                            }}\r\n                        >\r\n                            <MdDeleteSweep />\r\n                            <h3>Clear All Lists</h3>\r\n                        </li>\r\n\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                setSide(false);\r\n                                changeMode();\r\n                                setModes(!modes);\r\n                            }}\r\n                        >\r\n                            {whichMode ? <FiSun /> : <FiMoon />}\r\n                            <h3>Turn on {whichMode ? \"Light\" : \"Dark\"} Mode</h3>\r\n                        </li>\r\n                        <hr />\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".contactModal\").fadeIn();\r\n                            }}\r\n                        >\r\n                            <FiPhone style={{ strokeWidth: 1 }} />\r\n                            <h3>Contact Me</h3>\r\n                        </li>\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".donateModal\").fadeIn();\r\n                            }}\r\n                        >\r\n                            <FiHeart style={{ strokeWidth: 1 }} />\r\n                            <h3>Donate</h3>\r\n                        </li>\r\n                    </IconContext.Provider>\r\n                    <hr />\r\n                </ul>\r\n            </div>\r\n            {/* Sets name of New List */}\r\n            <div className=\"modalCont newModal\">\r\n                <form\r\n                    className=\"modal\"\r\n                    onSubmit={(event) => {\r\n                        event.preventDefault();\r\n                        $(\".newModal\").fadeOut();\r\n                        $(\".inputBox\").val(null);\r\n                        addList();\r\n                        setSide(false);\r\n                    }}\r\n                >\r\n                    <h3>list Name</h3>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"Input\"\r\n                            name=\"inputBlock\"\r\n                            onChange={({ target: { value } }) => {\r\n                                setNewListName(value);\r\n                            }}\r\n                            autoComplete=\"off\"\r\n                            required={true}\r\n                        />\r\n                        <svg className=\"border\" viewBox=\"0 0 275.05 40\" preserveAspectRatio=\"none\">\r\n                            <path\r\n                                className=\"cls-1 path\"\r\n                                d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                            <path\r\n                                className=\"cls-2 path\"\r\n                                d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                        </svg>\r\n                        <span>List Name...</span>\r\n                    </div>\r\n                    <button className=\"modalBtn save\" type=\"submit\">\r\n                        <MdCheck />\r\n                        <span>Save</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            $(\".newModal\").fadeOut();\r\n                            $(\".inputBox\").val(null);\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n            {/* Renames a list */}\r\n            <div className=\"modalCont rename\">\r\n                <form\r\n                    className=\"modal\"\r\n                    onSubmit={(event) => {\r\n                        event.preventDefault();\r\n                        $(\".rename\").fadeOut();\r\n                        $(\".inputBox\").val(null);\r\n                        updateList(currentListId);\r\n                        setCurrentListId(\"\");\r\n                    }}\r\n                >\r\n                    <h3>Rename Todo</h3>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"Input renamebox\"\r\n                            name=\"inputBlock\"\r\n                            onChange={({ target: { value } }) => {\r\n                                setRename(value);\r\n                            }}\r\n                            autoComplete=\"off\"\r\n                            required={true}\r\n                        />\r\n                        <svg className=\"border\" viewBox=\"0 0 275.05 40\" preserveAspectRatio=\"none\">\r\n                            <path\r\n                                className=\"cls-1 path\"\r\n                                d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                            <path\r\n                                className=\"cls-2 path\"\r\n                                d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <button className=\"modalBtn save\" type=\"submit\">\r\n                        <MdCheck />\r\n                        <span>Save</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            $(\".rename\").fadeOut();\r\n                            $(\".inputBox\").val(null);\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n            {/* delets a list */}\r\n            <div className=\"modalCont delete\">\r\n                <div className=\"modal\" style={{ textAlign: \"center\" }}>\r\n                    <MdDelete\r\n                        fontSize=\"3rem\"\r\n                        fill=\"red\"\r\n                        style={{ textShadow: \"0px 0px 5px red\" }}\r\n                    />\r\n                    <h3>Are you sure You want to Delete this List?</h3>\r\n                    <p>Entire List will be removed permanently</p>\r\n\r\n                    <button\r\n                        className=\"modalBtn\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            $(\".delete\").fadeOut();\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn del\"\r\n                        type=\"submit\"\r\n                        onClick={() => {\r\n                            $(\".delete\").fadeOut();\r\n                            deleteList(currentListId);\r\n                            setSide(false);\r\n                        }}\r\n                    >\r\n                        <MdCheck />\r\n                        <span>OK</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {/* Clears all Lists */}\r\n            <div className=\"modalCont clearListModal\">\r\n                <div className=\"modal\" style={{ textAlign: \"center\" }}>\r\n                    <MdDelete\r\n                        fontSize=\"3rem\"\r\n                        fill=\"red\"\r\n                        className=\"icon\"\r\n                        style={{ textShadow: \"0px 0px 5px red\" }}\r\n                    />\r\n                    <h3>Are you sure You want to Clear All Your Lists?</h3>\r\n                    <p>All Lists will be removed permanently and Cannot be recovered!</p>\r\n                    <button\r\n                        className=\"modalBtn\"\r\n                        onClick={() => {\r\n                            $(\".clearListModal\").fadeOut();\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn del\"\r\n                        onClick={() => {\r\n                            $(\".clearListModal\").fadeOut();\r\n                            clearList(currentListId);\r\n                        }}\r\n                    >\r\n                        <MdDeleteSweep />\r\n                        <span> Clear all Lists</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {/* Contact Me Section */}\r\n            <div className=\"modalCont contactModal\" style={{ display: \"none\", userSelect: \"text\" }}>\r\n                <div className=\"modal\">\r\n                    <MdClear\r\n                        className={\"icon closeModal\"}\r\n                        size=\"1.5rem\"\r\n                        onClick={() => {\r\n                            $(\".contactModal\").fadeOut();\r\n                        }}\r\n                    />\r\n\r\n                    <form\r\n                        className=\"contact\"\r\n                        onSubmit={(event) => {\r\n                            event.preventDefault();\r\n                            sendForm(contactForm);\r\n                            $(\".contactModal\").fadeOut();\r\n                            setSide(false);\r\n                        }}\r\n                    >\r\n                        <h3>Contact Me</h3>\r\n                        <div className=\"input-container\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"Input\"\r\n                                name=\"fullName\"\r\n                                onChange={({ target: { value } }) => {\r\n                                    setcontactForm((prev) => {\r\n                                        return { ...prev, fullname: value };\r\n                                    });\r\n                                }}\r\n                                autoComplete=\"off\"\r\n                                required={true}\r\n                            />\r\n                            <svg\r\n                                className=\"border\"\r\n                                viewBox=\"0 0 275.05 40\"\r\n                                preserveAspectRatio=\"none\"\r\n                            >\r\n                                <path\r\n                                    className=\"cls-1 path\"\r\n                                    d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                                <path\r\n                                    className=\"cls-2 path\"\r\n                                    d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                            </svg>\r\n                            <span>Full Name</span>\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"Input email\"\r\n                                name=\"email\"\r\n                                onChange={({ target: { value } }) => {\r\n                                    setcontactForm((prev) => {\r\n                                        return { ...prev, email: value };\r\n                                    });\r\n                                }}\r\n                                autoComplete=\"off\"\r\n                                required={true}\r\n                            />\r\n                            <svg\r\n                                className=\"border\"\r\n                                viewBox=\"0 0 275.05 40\"\r\n                                preserveAspectRatio=\"none\"\r\n                            >\r\n                                <path\r\n                                    className=\"cls-1 path\"\r\n                                    d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                                <path\r\n                                    className=\"cls-2 path\"\r\n                                    d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                            </svg>\r\n                            <span>email</span>\r\n                        </div>\r\n                        <div className=\"input-container message\">\r\n                            <textarea\r\n                                className=\"Input\"\r\n                                name=\"inputBlock\"\r\n                                onChange={({ target: { value } }) => {\r\n                                    setcontactForm((prev) => {\r\n                                        return { ...prev, message: value };\r\n                                    });\r\n                                }}\r\n                                required={true}\r\n                            ></textarea>\r\n                            <svg\r\n                                className=\"border textarea\"\r\n                                viewBox=\"0 0 309 277\"\r\n                                preserveAspectRatio=\"none\"\r\n                            >\r\n                                <path\r\n                                    className=\"cls-1 path\"\r\n                                    d=\"M154.5,1.5h138a15,15,0,0,1,15,15v244a15,15,0,0,1-15,15h-138\"\r\n                                />\r\n                                <path\r\n                                    className=\"cls-2 path\"\r\n                                    d=\"M154.5,275.5H16.5a15,15,0,0,1-15-15V16.5a15,15,0,0,1,15-15h138\"\r\n                                />\r\n                            </svg>\r\n                            <span>Message</span>\r\n                        </div>\r\n                        <button className=\"modalBtn send\" type=\"submit\">\r\n                            <MdSend />\r\n                            <span>Send</span>\r\n                        </button>\r\n                    </form>\r\n                    <div className=\"social\">\r\n                        <a href=\"https://www.facebook.com/crimson.oluwatowo/\" className=\"facebook\">\r\n                            <FaFacebookF />\r\n                        </a>\r\n                        <a href=\"https://www.instagram.com/crimson_corp/\" className=\"instagram\">\r\n                            <FaInstagram />\r\n                        </a>\r\n                        <a href=\"m.me/oluwatowo_rosanwo\" className=\"messenger\">\r\n                            <FaFacebookMessenger />\r\n                        </a>\r\n                        <a\r\n                            href=\"https://api.whatsapp.com/send?phone=+2348024537884&text=Hi20%Crimson%20%\"\r\n                            className=\"whatsapp\"\r\n                        >\r\n                            <FaWhatsapp />\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* Donate Section */}\r\n            <div className=\"modalCont donateModal\" style={{ display: \"none\", userSelect: \"text\" }}>\r\n                <div className=\"modal\">\r\n                    <MdClear\r\n                        className={\"icon\"}\r\n                        style={{\r\n                            display: \"block\",\r\n                            marginLeft: \"auto\",\r\n                        }}\r\n                        onClick={() => {\r\n                            $(\".donateModal\").fadeOut();\r\n                        }}\r\n                    />\r\n\r\n                    <h3>Donate</h3>\r\n                    <div className=\"info-block\">\r\n                        <h4>- About Me</h4>\r\n                        <p>\r\n                            My Name is Oluwatowo Rosanwo Mayowa, I'm a 200L Student of The\r\n                            University Of Ibadan studying Food Technology, I started Web Development\r\n                            in 2018 and Now I'm an Intermediate Web Developer and Aspiring UI/UX\r\n                            Deisgner, Im also a Logo/Video Editor.\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"info-block\">\r\n                        <h4>- Donate</h4>\r\n                        <p>\r\n                            Please if You really Like my Work and have a Dollar or two to spare,\r\n                            Kindly make a Donation To me as This will enhance my Progress and\r\n                            Productivity and also make me work harder and Develop more Apps that you\r\n                            will Definately find usefull\r\n                        </p>\r\n                    </div>\r\n\r\n                    <h4>Account Details:</h4>\r\n                    <pre>\r\n                        Bank: First Bank <br />\r\n                        Account Number: <span id=\"acc\">3123872415</span> <br />\r\n                        Account Name: Oluwatowo Rosanwo <br />\r\n                    </pre>\r\n                    <button\r\n                        className=\"copy\"\r\n                        onClick={() => {\r\n                            var temp = $(\"<input>\");\r\n                            $(\".donateModal .modal\").append(temp);\r\n                            temp.val($(\"#acc\").text()).select();\r\n                            document.execCommand(\"copy\");\r\n                            temp.remove();\r\n                            alert(\"Account Number Copied, Thank You So Much!\");\r\n                        }}\r\n                    >\r\n                        Copy Account Number\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default OuterControl;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport App from \"./App\";\r\nimport uuid from \"uuid\";\r\nimport OuterControl from \"./OuterControl\";\r\nimport { MdDehaze } from \"react-icons/md\";\r\nimport \"animate.css\";\r\nimport nodemailer from \"nodemailer\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\n// test\r\n// import Push from \"push.js\";\r\n\r\nfunction Main() {\r\n    const [app, setApp] = useState(() => {\r\n        var ListLocal = localStorage.getItem(\"AppLocal\");\r\n        if (ListLocal === null || ListLocal === undefined) return [];\r\n        else return JSON.parse(ListLocal);\r\n    });\r\n    const [currentList, setCurrentList] = useState(() => {\r\n        var index = localStorage.getItem(\"Index\");\r\n        if (index === null || index === undefined) return 0;\r\n        else return Number.parseInt(index);\r\n    });\r\n    const [newListName, setNewListName] = useState(\"\");\r\n    const [reName, setRename] = useState(\"\");\r\n    const [whichMode, setwhichMode] = useState(() => {\r\n        var mode = localStorage.getItem(\"mode\");\r\n        if (mode === undefined || mode === null) return true;\r\n        else return JSON.parse(mode.toLowerCase());\r\n    });\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"AppLocal\", JSON.stringify(app));\r\n    }, [app]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"Index\", JSON.stringify(currentList));\r\n    }, [currentList]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"mode\", whichMode);\r\n    }, [whichMode]);\r\n\r\n    function addList() {\r\n        let NewListProps = {\r\n            id: uuid.v4(),\r\n            name: newListName,\r\n        };\r\n        setCurrentList(app.length);\r\n        setApp((prev) => {\r\n            return [...prev, NewListProps];\r\n        });\r\n    }\r\n\r\n    function updateList(id) {\r\n        setApp(\r\n            app.map((app) => {\r\n                if (app.id === id) app.name = reName;\r\n                return app;\r\n            })\r\n        );\r\n    }\r\n\r\n    function deleteList(id) {\r\n        localStorage.removeItem(id);\r\n        var filteredList = app.filter((app) => app.id !== id);\r\n        setCurrentList(filteredList.length - 1);\r\n        setApp(filteredList);\r\n    }\r\n    function clearList() {\r\n        setApp([]);\r\n        localStorage.clear();\r\n    }\r\n\r\n    function changeMode() {\r\n        setwhichMode(!whichMode);\r\n    }\r\n\r\n    function sendForm(form) {\r\n        sendMail();\r\n\r\n        async function sendMail() {\r\n            let details = `\r\n            <h2>You recieved a message from ${form.fullname}</h2>\r\n            <h3>Message</h3>\r\n            <p>${form.message}</p>\r\n            <p>Sender's Email: <span>${form.email}</span></p>\r\n            `;\r\n            let transporter = nodemailer.createTransport({\r\n                service: \"gmail\",\r\n                secure: false,\r\n                auth: {\r\n                    user: process.env.email,\r\n                    pass: process.env.password,\r\n                },\r\n                tls: {\r\n                    rejectUnauthorized: false,\r\n                    secureProtocol: \"TLSv1_method\",\r\n                },\r\n            });\r\n\r\n            // send mail with defined transport object\r\n            let maildata = {\r\n                from: form.email,\r\n                to: process.env.password,\r\n                subject: \"You have Received a Message from Your Todo App\",\r\n                html: details,\r\n            };\r\n            transporter.sendMail(maildata, (err, info) => {\r\n                if (err) {\r\n                    alert(\"An Error Occured, Please Check your Internet Settings and try again...\");\r\n                    return;\r\n                } else {\r\n                    alert(\"Message Sent!\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    var content;\r\n    app.length <= 0\r\n        ? (content = (\r\n              <div className=\"noList\">\r\n                  <h1>No Lists</h1>\r\n                  <p>\r\n                      Click <MdDehaze className=\"dir\" /> to make a List\r\n                  </p>\r\n              </div>\r\n          ))\r\n        : (content = (\r\n              <App\r\n                  key={app[currentList].id}\r\n                  props={{ app: app[currentList], whichMode: whichMode }}\r\n              />\r\n          ));\r\n\r\n    return (\r\n        <div className={`main ${whichMode ? \"\" : \"light\"}`}>\r\n            <OuterControl\r\n                props={{\r\n                    app: app,\r\n                    setNewListName: setNewListName,\r\n                    addList: addList,\r\n                    setCurrentList: setCurrentList,\r\n                    setRename: setRename,\r\n                    updateList: updateList,\r\n                    deleteList: deleteList,\r\n                    currentList: currentList,\r\n                    clearList: clearList,\r\n                    changeMode: changeMode,\r\n                    whichMode: whichMode,\r\n                    sendForm: sendForm,\r\n                }}\r\n            />\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.css\";\r\nimport Main from \"./Components/Main\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nReactDOM.render(<Main />, document.getElementById(\"root\"));\r\nserviceWorker.register();\r\n"],"sourceRoot":""}