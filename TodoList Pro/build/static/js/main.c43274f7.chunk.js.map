{"version":3,"sources":["Components/Inner Component/Input.js","Components/Inner Component/EachTodo.js","Components/Inner Component/List.js","Components/Inner Component/Control.js","Components/App.js","Components/OuterControl.js","Components/Main.js","serviceWorker.js","index.js"],"names":["Input","props","sendProps","setInput","className","onSubmit","type","name","placeholder","onChange","autoComplete","required","aria-label","role","EachTodo","id","completed","Todo","updateTodo","removeTodo","comp","data-id","checked","viewBox","d","points","style","opacity","textDecoration","fill","transform","fontWeight","onClick","List","TodoListArray","TodoBlocks","filtered","map","eachTodo","index","key","length","Control","progress","clearDone","done","statusHandler","status","x1","y1","x2","y2","offset","stopColor","cx","cy","r","strokeDashoffset","strokeWidth","disabled","value","App","app","useState","setTodo","setTodoListArray","setDone","setProgress","setFiltered","setStatus","Trans","x","$","css","useEffect","DoneTodos","filter","arr","Math","floor","isNaN","FilterLogic","TodoLocal","localStorage","getItem","undefined","setItem","JSON","stringify","parse","target","event","preventDefault","inputBox","todo","trim","val","focus","alert","uuid","v4","prev","OuterControl","setNewListName","addList","setCurrentList","setRename","updateList","deleteList","side","setSide","list","setList","currentListId","setCurrentListId","persist","tagName","fadeIn","display","marginLeft","fadeOut","textAlign","fontSize","textShadow","Main","setApp","currentList","newListName","reName","ListLocal","NewListProps","removeItem","filteredList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c43274f7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Input({ props: { sendProps, setInput } }) {\r\n    return (\r\n        <form className=\"inputBlock\" onSubmit={sendProps}>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    className=\"inputBox\"\r\n                    type=\"text\"\r\n                    name=\"inputBlock\"\r\n                    placeholder=\"What Do you want Todo?...\"\r\n                    onChange={setInput}\r\n                    autoComplete=\"off\"\r\n                    required=\"required\"\r\n                />\r\n                <div className=\"input\"></div>\r\n            </div>\r\n            <button className=\"plus\" type=\"submit\">\r\n                <span aria-label=\"addTodo\" role=\"img\">\r\n                    &#10133;\r\n                </span>\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { MdClear } from \"react-icons/md\";\r\n\r\nfunction EachTodo({\r\n    props: {\r\n        EachTodo: { id, completed, Todo },\r\n        updateTodo,\r\n        removeTodo,\r\n    },\r\n}) {\r\n    var comp = completed;\r\n    var Done = {\r\n        opacity: 0.4,\r\n        textDecoration: \"line-through\",\r\n    };\r\n\r\n    return (\r\n        <div className=\"label\" data-id={`${id}`}>\r\n            <label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    data-id={`${id}`}\r\n                    checked={comp}\r\n                    onChange={() => {\r\n                        updateTodo(id);\r\n                    }}\r\n                />\r\n                <div className=\"Todo\">\r\n                    <div className=\"checkbox-container\">\r\n                        <svg viewBox=\"0 0 100 100\" className=\"checkbox\">\r\n                            <path\r\n                                className=\"st0\"\r\n                                d=\"M85,92H15c-3.9,0-7-3.1-7-7V15c0-3.9,3.1-7,7-7h70c3.9,0,7,3.1,7,7v70C92,88.9,88.9,92,85,92z\"\r\n                            />\r\n                            <polyline className=\"check\" points=\"22.5,47.5 42.5,67.5 78.5,31.5 \" />\r\n                        </svg>\r\n                    </div>\r\n                    <span style={comp ? Done : null}>\r\n                        {Todo} <span className=\"cross\"></span>\r\n                    </span>\r\n                </div>\r\n            </label>\r\n            <MdClear\r\n                className={\"close\"}\r\n                fill=\"red\"\r\n                style={{\r\n                    transform: comp ? \"scale(1)\" : \"scale(0)\",\r\n                    fontWeight: \"bolder\",\r\n                }}\r\n                onClick={() => {\r\n                    removeTodo(id);\r\n                }}\r\n                data-id={id}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EachTodo;\r\n","import React from \"react\";\r\nimport EachTodo from \"./EachTodo\";\r\n\r\nexport default function List({ props: { removeTodo, updateTodo, TodoListArray, filtered } }) {\r\n    var TodoBlocks = filtered.map((eachTodo, index) => {\r\n        return (\r\n            <EachTodo\r\n                key={index}\r\n                props={{\r\n                    EachTodo: eachTodo,\r\n                    updateTodo: updateTodo,\r\n                    removeTodo: removeTodo,\r\n                }}\r\n            />\r\n        );\r\n    });\r\n\r\n    return <div className=\"listContainer\">{TodoListArray.length === 0 ? \"\" : TodoBlocks}</div>;\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Control({\r\n    props: { progress, TodoListArray, clearDone, done, statusHandler, status },\r\n}) {\r\n    return (\r\n        <div className=\"control\">\r\n            <div className=\"box\">\r\n                <div className=\"percent\">\r\n                    <svg>\r\n                        <linearGradient id=\"grad\" x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"100%\">\r\n                            <stop offset=\"0%\" stopColor=\"#ff0612\"></stop>\r\n                            <stop offset=\"100%\" stopColor=\"#6544ff\"></stop>\r\n                        </linearGradient>\r\n                        <circle cx=\"50%\" cy=\"50%\" r=\"40\" className=\"dark circle\"></circle>\r\n\r\n                        <circle\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            r=\"40\"\r\n                            className=\"grad circle\"\r\n                            style={{\r\n                                strokeDashoffset:\r\n                                    250.92137145996094 - (250.92137145996094 * progress) / 100,\r\n                                strokeWidth: progress === 0 ? \"0px\" : \"10px\",\r\n                            }}\r\n                        ></circle>\r\n                    </svg>\r\n                    <div className=\"number\">\r\n                        {progress !== 0 || TodoListArray.length !== 0 ? (\r\n                            <>\r\n                                <h2>\r\n                                    {progress}\r\n                                    <span className=\"perc\">%</span>\r\n                                </h2>\r\n                                <span className=\"comp\">completed</span>\r\n                            </>\r\n                        ) : (\r\n                            <h2 className=\"empty\">No Task</h2>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <button\r\n                    onClick={clearDone}\r\n                    disabled={done === 0 ? true : false}\r\n                    className={done === 0 ? \"disable\" : \"clear\"}\r\n                >\r\n                    &#10005; Clear Done\r\n                </button>\r\n                <select name=\"filter\" id=\"filter\" onChange={statusHandler} value={status}>\r\n                    <option value=\"All\">All</option>\r\n                    <option value=\"Completed\">Completed</option>\r\n                    <option value=\"Uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport uuid from \"uuid\";\r\nimport Input from \"./Inner Component/Input\";\r\nimport List from \"./Inner Component/List\";\r\nimport Control from \"./Inner Component/Control\";\r\nimport $ from \"jquery\";\r\n\r\nexport default function App({ props: { app } }) {\r\n    const [Todo, setTodo] = useState({});\r\n    const [TodoListArray, setTodoListArray] = useState([]);\r\n    const [done, setDone] = useState(0);\r\n    const [progress, setProgress] = useState(\"\");\r\n    const [filtered, setFiltered] = useState([]);\r\n    const [status, setStatus] = useState(\"All\");\r\n    const [id] = useState(app.id);\r\n\r\n    useEffect(() => {\r\n        const DoneTodos = TodoListArray.filter((arr) => arr.completed === true);\r\n        var progress = Math.floor((DoneTodos.length / TodoListArray.length) * 100);\r\n        if (isNaN(progress)) progress = 0;\r\n        setProgress(progress);\r\n        setDone(DoneTodos.length);\r\n    }, [progress, TodoListArray]);\r\n\r\n    useEffect(() => {\r\n        function FilterLogic() {\r\n            switch (status) {\r\n                case \"Completed\":\r\n                    setFiltered(TodoListArray.filter((arr) => arr.completed === true));\r\n                    break;\r\n                case \"Uncompleted\":\r\n                    setFiltered(TodoListArray.filter((arr) => arr.completed === false));\r\n                    break;\r\n                default:\r\n                    setFiltered(TodoListArray);\r\n            }\r\n        }\r\n        FilterLogic();\r\n    }, [TodoListArray, status]);\r\n\r\n    useEffect(() => {\r\n        Trans(false);\r\n    }, [status]);\r\n\r\n    useEffect(() => {\r\n        var TodoLocal = localStorage.getItem(id);\r\n        if (TodoLocal === null || TodoLocal === undefined)\r\n            localStorage.setItem(id, JSON.stringify([]));\r\n        else setTodoListArray(JSON.parse(TodoLocal));\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(id, JSON.stringify(TodoListArray));\r\n    }, [TodoListArray, id]);\r\n\r\n    function Trans(x) {\r\n        if (x) {\r\n            $(\".checkbox path\").css(\"transition\", \".4s\");\r\n            $(\".check\").css(\"transition\", \".4s\");\r\n        } else {\r\n            $(\".checkbox path\").css(\"transition\", \"none\");\r\n            $(\".check\").css(\"transition\", \"none\");\r\n        }\r\n    }\r\n\r\n    function sendProps(event) {\r\n        event.preventDefault();\r\n        var inputBox = $(\".inputBox\");\r\n        let { Todo: todo } = Todo;\r\n        if (todo.trim() === \"\" || todo.trim() === undefined) {\r\n            inputBox.val(null).focus();\r\n            return alert(\"Please write a Task\");\r\n        }\r\n        Todo.id = uuid.v4();\r\n        Todo.completed = false;\r\n        setTodoListArray((prev) => [...prev, Todo]);\r\n        inputBox.val(null).focus();\r\n        setTodo({});\r\n        setStatus(\"All\");\r\n    }\r\n\r\n    function setInput({ target: { value } }) {\r\n        setTodo({ Todo: value });\r\n    }\r\n\r\n    function updateTodo(id) {\r\n        Trans(true);\r\n        setTodoListArray(\r\n            TodoListArray.map((arr) => {\r\n                if (arr.id === id) arr.completed = !arr.completed;\r\n                return arr;\r\n            })\r\n        );\r\n    }\r\n\r\n    function removeTodo(id) {\r\n        Trans(false);\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.id !== id));\r\n    }\r\n\r\n    function clearDone() {\r\n        Trans(false);\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.completed === false));\r\n    }\r\n\r\n    function statusHandler({ target: { value } }) {\r\n        setStatus(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"ListName\">{app.name}</h1>\r\n            <Control\r\n                props={{\r\n                    progress: progress,\r\n                    TodoListArray: TodoListArray,\r\n                    clearDone: clearDone,\r\n                    done: done,\r\n                    status: status,\r\n                    statusHandler: statusHandler,\r\n                }}\r\n            />\r\n            <Input\r\n                props={{\r\n                    sendProps: sendProps,\r\n                    setInput: setInput,\r\n                }}\r\n            />\r\n            <List\r\n                props={{\r\n                    removeTodo: removeTodo,\r\n                    updateTodo: updateTodo,\r\n                    TodoListArray: TodoListArray,\r\n                    filtered: filtered,\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { MdDehaze, MdClear, MdAdd, MdEdit, MdDelete } from \"react-icons/md\";\r\nimport $ from \"jquery\";\r\n\r\nfunction OuterControl({\r\n    props: { app, setNewListName, addList, setCurrentList, setRename, updateList, deleteList },\r\n}) {\r\n    const [side, setSide] = useState(false);\r\n    const [list, setList] = useState([]);\r\n    const [currentListId, setCurrentListId] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        var list = app.map((app, index) => {\r\n            return (\r\n                <li\r\n                    className=\"listSet\"\r\n                    key={index}\r\n                    data-id={app.id}\r\n                    onClick={(event) => {\r\n                        event.persist();\r\n                        if (event.target.tagName === \"svg\" || event.target.tagName === \"path\") {\r\n                            return;\r\n                        }\r\n                        setCurrentList(index);\r\n                        setSide(false);\r\n                    }}\r\n                >\r\n                    <h3>{app.name}</h3>\r\n                    <div className=\"icons\">\r\n                        <MdEdit\r\n                            data-id={app.id}\r\n                            className=\"icon edit\"\r\n                            onClick={() => {\r\n                                $(\".rename\").fadeIn();\r\n                                $(\".renamebox\").focus();\r\n                                setCurrentListId(app.id);\r\n                            }}\r\n                        />\r\n                        <MdDelete\r\n                            className=\"icon deleteIcon\"\r\n                            fill=\"red\"\r\n                            data-id={app.id}\r\n                            onClick={() => {\r\n                                $(\".delete\").fadeIn();\r\n                                setCurrentListId(app.id);\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </li>\r\n            );\r\n        });\r\n        setList(list);\r\n    }, [app, setCurrentList]);\r\n\r\n    if (side) $(\".container\").css(\"pointer-events\", \"none\");\r\n    else $(\".container\").css(\"pointer-events\", \"auto\");\r\n\r\n    return (\r\n        <>\r\n            <div className={\"ham\"}>\r\n                <MdDehaze\r\n                    role=\"img\"\r\n                    aria-label=\"plus\"\r\n                    onClick={() => {\r\n                        setSide(true);\r\n                    }}\r\n                    className=\"icon\"\r\n                />\r\n            </div>\r\n            <div className={`sideBar ${side ? \"openBar\" : \"closeBar\"}`}>\r\n                <h2>\r\n                    Your List Set\r\n                    <MdClear\r\n                        fill=\"red\"\r\n                        className={\"icon\"}\r\n                        onClick={() => {\r\n                            setSide(false);\r\n                        }}\r\n                    />\r\n                </h2>\r\n\r\n                <ul>\r\n                    {list}\r\n                    <li\r\n                        className=\"addNew listSet\"\r\n                        onClick={() => {\r\n                            $(\".newModal\").fadeIn();\r\n                            $(\".new\").focus();\r\n                        }}\r\n                    >\r\n                        Add New List <MdAdd className=\"addList\" />\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div className={`modalCont newModal`} style={{ display: \"none\" }}>\r\n                <div className=\"modal\">\r\n                    <MdClear\r\n                        className={\"icon\"}\r\n                        style={{\r\n                            display: \"block\",\r\n                            marginLeft: \"auto\",\r\n                            fill: \"red\",\r\n                        }}\r\n                        onClick={() => {\r\n                            $(\".newModal\").fadeOut();\r\n                            $(\".inputBox\").val(null);\r\n                        }}\r\n                    />\r\n\r\n                    <h3>Set New Todolist Name</h3>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            className=\"inputBox new\"\r\n                            type=\"text\"\r\n                            name=\"inputBlock\"\r\n                            placeholder=\"Name...\"\r\n                            autoComplete=\"off\"\r\n                            required={true}\r\n                            onChange={({ target: { value } }) => {\r\n                                setNewListName(value);\r\n                            }}\r\n                        />\r\n                        <div className=\"input\"></div>\r\n                    </div>\r\n                    <button\r\n                        className=\"setName\"\r\n                        onClick={() => {\r\n                            $(\".newModal\").fadeOut();\r\n                            $(\".inputBox\").val(null);\r\n                            addList();\r\n                            setSide(false);\r\n                        }}\r\n                    >\r\n                        Set Name\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"modalCont rename\" style={{ display: \"none\" }}>\r\n                <div className=\"modal\">\r\n                    <MdClear\r\n                        className={\"icon\"}\r\n                        style={{\r\n                            display: \"block\",\r\n                            marginLeft: \"auto\",\r\n                            fill: \"red\",\r\n                        }}\r\n                        onClick={() => {\r\n                            $(\".rename\").fadeOut();\r\n                            $(\".inputBox\").val(null);\r\n                        }}\r\n                    />\r\n\r\n                    <h3>Rename Todo</h3>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            className=\"inputBox renamebox\"\r\n                            type=\"text\"\r\n                            name=\"inputBlock\"\r\n                            placeholder=\"New Name...\"\r\n                            autoComplete=\"off\"\r\n                            required={true}\r\n                            onChange={({ target: { value } }) => {\r\n                                setRename(value);\r\n                            }}\r\n                        />\r\n                        <div className=\"input\"></div>\r\n                    </div>\r\n                    <button\r\n                        className=\"setName\"\r\n                        onClick={() => {\r\n                            $(\".rename\").fadeOut();\r\n                            $(\".inputBox\").val(null);\r\n                            updateList(currentListId);\r\n                            setCurrentListId(\"\");\r\n                        }}\r\n                    >\r\n                        Set Name\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"modalCont delete\" style={{ display: \"none\" }}>\r\n                <div className=\"modal\" style={{ textAlign: \"center\" }}>\r\n                    <MdDelete\r\n                        fontSize=\"3rem\"\r\n                        fill=\"red\"\r\n                        style={{ textShadow: \"0px 0px 5px red\" }}\r\n                    />\r\n                    <h3>Are you sure You want to Delete this List?</h3>\r\n                    <p>Entire List will be removed permanently</p>\r\n\r\n                    <button\r\n                        className=\"deleteListBtn clear\"\r\n                        onClick={() => {\r\n                            $(\".delete\").fadeOut();\r\n                            $(\".inputBox\").val(null);\r\n                            deleteList(currentListId);\r\n                            setSide(false);\r\n                            setCurrentListId(\"\");\r\n                        }}\r\n                    >\r\n                        OK\r\n                    </button>\r\n                    <button\r\n                        className=\"canceldelete\"\r\n                        onClick={() => {\r\n                            $(\".delete\").fadeOut();\r\n                            $(\".inputBox\").val(null);\r\n                            setCurrentListId(\"\");\r\n                        }}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default OuterControl;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport App from \"./App\";\r\nimport uuid from \"uuid\";\r\nimport OuterControl from \"./OuterControl\";\r\nimport { MdDehaze } from \"react-icons/md\";\r\n\r\nfunction Main() {\r\n    const [app, setApp] = useState([]);\r\n\r\n    const [currentList, setCurrentList] = useState(app.length - 1);\r\n    const [newListName, setNewListName] = useState(\"\");\r\n    const [reName, setRename] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        var ListLocal = localStorage.getItem(\"AppLocal\");\r\n        if (ListLocal === null || ListLocal === undefined)\r\n            localStorage.setItem(\"AppLocal\", JSON.stringify([]));\r\n        else setApp(JSON.parse(ListLocal));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"AppLocal\", JSON.stringify(app));\r\n    }, [app]);\r\n\r\n    useEffect(() => {\r\n        setCurrentList(app.length - 1);\r\n    }, [app.length]);\r\n\r\n    function addList() {\r\n        let NewListProps = {\r\n            id: uuid.v4(),\r\n            name: newListName,\r\n        };\r\n        setCurrentList(app.length);\r\n        setApp((prev) => {\r\n            return [...prev, NewListProps];\r\n        });\r\n    }\r\n\r\n    function updateList(id) {\r\n        setApp(\r\n            app.map((app) => {\r\n                if (app.id === id) app.name = reName;\r\n                return app;\r\n            })\r\n        );\r\n        setRename(\"\");\r\n    }\r\n\r\n    function deleteList(id) {\r\n        localStorage.removeItem(id);\r\n        var filteredList = app.filter((app) => app.id !== id);\r\n        setCurrentList(filteredList.length - 1);\r\n        setApp(filteredList);\r\n    }\r\n    return (\r\n        <div>\r\n            <OuterControl\r\n                props={{\r\n                    app: app,\r\n                    setNewListName: setNewListName,\r\n                    addList: addList,\r\n                    setCurrentList: setCurrentList,\r\n                    setRename: setRename,\r\n                    updateList: updateList,\r\n                    deleteList: deleteList,\r\n                }}\r\n            />\r\n            {app.length <= 0 || currentList < 0 ? (\r\n                <div className=\"noList\">\r\n                    <h1>No Lists</h1>\r\n                    <p>\r\n                        Click <MdDehaze className=\"dir\" /> to make a List\r\n                    </p>\r\n                </div>\r\n            ) : (\r\n                <App key={app[currentList].id} props={{ app: app[currentList] }} />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.css\";\r\nimport Main from \"./Components/Main\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nReactDOM.render(<Main />, document.getElementById(\"root\"));\r\nserviceWorker.register();\r\n"],"sourceRoot":""}