{"version":3,"sources":["Components/Inner Component/Input.js","Components/Inner Component/EachTodo.js","Components/Inner Component/List.js","Components/Inner Component/Control.js","Components/App.js","Components/OuterControl.js","Components/Main.js","serviceWorker.js","index.js"],"names":["Input","props","sendProps","setInput","className","onSubmit","type","name","onChange","autoComplete","required","data-name","xmlns","viewBox","preserveAspectRatio","d","transform","fill","size","EachTodo","id","completed","Todo","updateTodo","removeTodo","data-id","checked","points","style","opacity","textDecoration","onClick","List","TodoListArray","filtered","whichMode","mode","TodoBlocks","map","eachTodo","index","key","length","Control","progress","clearDone","done","statusHandler","status","x1","y1","x2","y2","offset","stopColor","cx","cy","r","strokeDashoffset","strokeWidth","disabled","value","App","app","useState","setTodo","TodoLocal","localStorage","getItem","undefined","JSON","parse","setTodoListArray","setDone","setProgress","setFiltered","setStatus","Trans","x","$","css","useEffect","setItem","stringify","DoneTodos","filter","arr","Math","floor","isNaN","FilterLogic","target","event","preventDefault","inputBox","todo","trim","val","focus","alert","uuid","v4","prev","OuterControl","sendBtn","setNewListName","addList","setCurrentList","setRename","updateList","deleteList","currentList","clearList","changeMode","sendForm","formStatus","setFormStatus","side","setSide","list","setList","currentListId","setCurrentListId","modes","setModes","setcontactForm","copy","setCopy","check","input","addClass","removeClass","Provider","persist","tagName","fadeIn","select","click","fadeOut","blur","test","this","keyup","stroke","textAlign","fontSize","textShadow","display","userSelect","fullname","email","message","href","temp","append","text","document","execCommand","remove","setTimeout","Main","content","ListLocal","setApp","Number","parseInt","newListName","reName","toLowerCase","setwhichMode","NewListProps","removeItem","filteredList","clear","form","emailjs","process","then","res","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.156483b8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MdAdd } from \"react-icons/md\";\r\n\r\nexport default function Input({ props: { sendProps, setInput } }) {\r\n    return (\r\n        <form className=\"inputBlock\" onSubmit={sendProps}>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"Input\"\r\n                    name=\"inputBlock\"\r\n                    onChange={setInput}\r\n                    autoComplete=\"off\"\r\n                    required=\"required\"\r\n                />\r\n                <svg\r\n                    className=\"border\"\r\n                    data-name=\"Layer 1\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    viewBox=\"0 0 275.05 40\"\r\n                    preserveAspectRatio=\"none\"\r\n                >\r\n                    <path\r\n                        className=\"cls-1 path\"\r\n                        d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                        transform=\"translate(-1.3 -0.77)\"\r\n                    />\r\n                    <path\r\n                        className=\"cls-2 path\"\r\n                        d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                        transform=\"translate(-1.3 -0.77)\"\r\n                    />\r\n                </svg>\r\n                <span>What Do you want Todo?...</span>\r\n            </div>\r\n            <button className=\"plus\" type=\"submit\">\r\n                <MdAdd fill=\"#222\" className=\"icon\" size=\"1.2rem\" />\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { MdDelete } from \"react-icons/md\";\r\n\r\nfunction EachTodo({\r\n    props: {\r\n        EachTodo: { id, completed, Todo },\r\n        updateTodo,\r\n        removeTodo,\r\n    },\r\n}) {\r\n    var Done = {\r\n        opacity: 0.4,\r\n        textDecoration: \"line-through\",\r\n    };\r\n\r\n    return (\r\n        <div className=\"label\" data-id={`${id}`}>\r\n            <label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    data-id={`${id}`}\r\n                    checked={completed}\r\n                    onChange={() => {\r\n                        updateTodo(id);\r\n                    }}\r\n                />\r\n                <div className=\"Todo\">\r\n                    <div className=\"checkbox-container\">\r\n                        <svg viewBox=\"0 0 100 100\" className=\"checkbox\">\r\n                            <path\r\n                                className=\"st0\"\r\n                                d=\"M85,92H15c-3.9,0-7-3.1-7-7V15c0-3.9,3.1-7,7-7h70c3.9,0,7,3.1,7,7v70C92,88.9,88.9,92,85,92z\"\r\n                            />\r\n                            <polyline className=\"check\" points=\"22.5,47.5 42.5,67.5 78.5,31.5 \" />\r\n                        </svg>\r\n                    </div>\r\n                    <span style={completed ? Done : null}>\r\n                        {Todo} <span className=\"cross\"></span>\r\n                    </span>\r\n                </div>\r\n            </label>\r\n            <MdDelete\r\n                className={\"deleteIcon icon\"}\r\n                size=\"1.5rem\"\r\n                style={{\r\n                    transform: completed ? \"scale(1)\" : \"scale(0)\",\r\n                }}\r\n                onClick={() => {\r\n                    removeTodo(id);\r\n                }}\r\n                data-id={id}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EachTodo;\r\n","import React from \"react\";\r\nimport EachTodo from \"./EachTodo\";\r\n\r\nexport default function List({\r\n    props: { removeTodo, updateTodo, TodoListArray, filtered, mode, whichMode },\r\n}) {\r\n    var TodoBlocks = filtered.map((eachTodo, index) => {\r\n        return (\r\n            <EachTodo\r\n                key={index}\r\n                props={{\r\n                    EachTodo: eachTodo,\r\n                    updateTodo: updateTodo,\r\n                    removeTodo: removeTodo,\r\n                }}\r\n            />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className={`listContainer ${whichMode ? \"darkMode\" : \"LightMode\"}`}>\r\n            {TodoListArray.length === 0 ? \"\" : TodoBlocks}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Control({\r\n    props: { progress, TodoListArray, clearDone, done, statusHandler, status, mode, whichMode },\r\n}) {\r\n    return (\r\n        <div className=\"control\">\r\n            <div className=\"box\">\r\n                <div className=\"percent\">\r\n                    <svg>\r\n                        <linearGradient id=\"grad\" x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"100%\">\r\n                            <stop offset=\"0%\" stopColor=\"#ff0612\"></stop>\r\n                            <stop offset=\"100%\" stopColor=\"#6544ff\"></stop>\r\n                        </linearGradient>\r\n                        <circle cx=\"50%\" cy=\"50%\" r=\"40\" className=\"dark circle\"></circle>\r\n\r\n                        <circle\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            r=\"40\"\r\n                            className=\"grad circle\"\r\n                            style={{\r\n                                strokeDashoffset:\r\n                                    250.92137145996094 - (250.92137145996094 * progress) / 100,\r\n                                strokeWidth: progress === 0 ? \"0px\" : \"10px\",\r\n                            }}\r\n                        ></circle>\r\n                    </svg>\r\n                    <div className={`number ${whichMode ? \"darkMode\" : \"LightMode\"}`}>\r\n                        {progress !== 0 || TodoListArray.length !== 0 ? (\r\n                            <>\r\n                                <h2>\r\n                                    {progress}\r\n                                    <span className=\"perc\">%</span>\r\n                                </h2>\r\n                                <span className=\"comp\">completed</span>\r\n                            </>\r\n                        ) : (\r\n                            <h2 className=\"empty\">No Task</h2>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <button\r\n                    onClick={clearDone}\r\n                    disabled={done === 0 ? true : false}\r\n                    className={done === 0 ? \"disable\" : \"clear\"}\r\n                >\r\n                    &#10005; Clear Done\r\n                </button>\r\n                <select name=\"filter\" id=\"filter\" onChange={statusHandler} value={status}>\r\n                    <option value=\"All\">All</option>\r\n                    <option value=\"Completed\">Completed</option>\r\n                    <option value=\"Uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport uuid from \"uuid\";\r\nimport Input from \"./Inner Component/Input\";\r\nimport List from \"./Inner Component/List\";\r\nimport Control from \"./Inner Component/Control\";\r\nimport $ from \"jquery\";\r\n\r\nexport default function App({ props: { app, whichMode } }) {\r\n    const [id] = useState(app.id);\r\n    const [Todo, setTodo] = useState({});\r\n    const [TodoListArray, setTodoListArray] = useState(() => {\r\n        var TodoLocal = localStorage.getItem(id);\r\n        if (TodoLocal === null || TodoLocal === undefined) return [];\r\n        else return JSON.parse(TodoLocal);\r\n    });\r\n    const [done, setDone] = useState(0);\r\n    const [progress, setProgress] = useState(\"\");\r\n    const [filtered, setFiltered] = useState([]);\r\n    const [status, setStatus] = useState(\"All\");\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(id, JSON.stringify(TodoListArray));\r\n    }, [TodoListArray, id]);\r\n\r\n    useEffect(() => {\r\n        const DoneTodos = TodoListArray.filter((arr) => arr.completed === true);\r\n        var progress = Math.floor((DoneTodos.length / TodoListArray.length) * 100);\r\n        if (isNaN(progress)) progress = 0;\r\n        setProgress(progress);\r\n        setDone(DoneTodos.length);\r\n    }, [progress, TodoListArray]);\r\n\r\n    useEffect(() => {\r\n        function FilterLogic() {\r\n            switch (status) {\r\n                case \"Completed\":\r\n                    setFiltered(TodoListArray.filter((arr) => arr.completed === true));\r\n                    break;\r\n                case \"Uncompleted\":\r\n                    setFiltered(TodoListArray.filter((arr) => arr.completed === false));\r\n                    break;\r\n                default:\r\n                    setFiltered(TodoListArray);\r\n            }\r\n        }\r\n        FilterLogic();\r\n    }, [TodoListArray, status]);\r\n\r\n    useEffect(() => {\r\n        Trans(false);\r\n    }, [status]);\r\n\r\n    function Trans(x) {\r\n        if (x) {\r\n            $(\".checkbox path\").css(\"transition\", \".4s\");\r\n            $(\".check\").css(\"transition\", \".4s\");\r\n        } else {\r\n            $(\".checkbox path\").css(\"transition\", \"none\");\r\n            $(\".check\").css(\"transition\", \"none\");\r\n        }\r\n    }\r\n\r\n    function sendProps(event) {\r\n        event.preventDefault();\r\n        var inputBox = $(\".Input\");\r\n        let { Todo: todo } = Todo;\r\n        if (todo.trim() === \"\" || todo.trim() === undefined) {\r\n            inputBox.val(null).focus();\r\n            return alert(\"Please write a Task\");\r\n        }\r\n        Todo.id = uuid.v4();\r\n        Todo.completed = false;\r\n        setTodoListArray((prev) => [...prev, Todo]);\r\n        inputBox.val(null).focus();\r\n        setTodo({});\r\n        setStatus(\"All\");\r\n    }\r\n\r\n    function setInput({ target: { value } }) {\r\n        setTodo({ Todo: value });\r\n    }\r\n\r\n    function updateTodo(id) {\r\n        Trans(true);\r\n        setTodoListArray(\r\n            TodoListArray.map((arr) => {\r\n                if (arr.id === id) arr.completed = !arr.completed;\r\n                return arr;\r\n            })\r\n        );\r\n    }\r\n\r\n    function removeTodo(id) {\r\n        Trans(false);\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.id !== id));\r\n    }\r\n\r\n    function clearDone() {\r\n        Trans(false);\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.completed === false));\r\n    }\r\n\r\n    function statusHandler({ target: { value } }) {\r\n        setStatus(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"ListName\">{app.name}</h1>\r\n            <Control\r\n                props={{\r\n                    progress,\r\n                    TodoListArray,\r\n                    clearDone,\r\n                    done,\r\n                    status,\r\n                    statusHandler,\r\n                    whichMode,\r\n                }}\r\n            />\r\n            <Input\r\n                props={{\r\n                    sendProps,\r\n                    setInput,\r\n                    whichMode,\r\n                }}\r\n            />\r\n            <List\r\n                props={{\r\n                    removeTodo,\r\n                    updateTodo,\r\n                    TodoListArray,\r\n                    filtered,\r\n                    whichMode,\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    MdDehaze,\r\n    MdClear,\r\n    MdAdd,\r\n    MdEdit,\r\n    MdDelete,\r\n    MdList,\r\n    MdDeleteSweep,\r\n    MdCheck,\r\n    MdError,\r\n    MdSend,\r\n} from \"react-icons/md\";\r\nimport { FiHeart, FiMoon, FiSun, FiPhone, FiLoader, FiCopy } from \"react-icons/fi\";\r\nimport { FaFacebookF, FaInstagram, FaWhatsapp, FaFacebookMessenger } from \"react-icons/fa\";\r\nimport { IconContext } from \"react-icons\";\r\nimport $ from \"jquery\";\r\n\r\nfunction OuterControl({\r\n    props: {\r\n        app,\r\n        setNewListName,\r\n        addList,\r\n        setCurrentList,\r\n        setRename,\r\n        updateList,\r\n        deleteList,\r\n        currentList,\r\n        clearList,\r\n        changeMode,\r\n        whichMode,\r\n        sendForm,\r\n        formStatus,\r\n        setFormStatus,\r\n    },\r\n}) {\r\n    const [side, setSide] = useState(false);\r\n    const [list, setList] = useState([]);\r\n    const [currentListId, setCurrentListId] = useState(\"\");\r\n    const [modes, setModes] = useState(true);\r\n    const [contactForm, setcontactForm] = useState({});\r\n    const [copy, setCopy] = useState(false);\r\n    // creates Lists of TodoList Categories\r\n    useEffect(() => {\r\n        var list = app.map((app, index) => {\r\n            return (\r\n                <IconContext.Provider\r\n                    value={{\r\n                        size: \"1.5rem\",\r\n                        className: `ListSetIcon ${whichMode ? \"\" : \"light\"}`,\r\n                    }}\r\n                    key={index}\r\n                >\r\n                    <li\r\n                        className={`listSet ${whichMode ? \"dark\" : \"light\"}`}\r\n                        data-id={app.id}\r\n                        onClick={(event) => {\r\n                            event.persist();\r\n                            if (event.target.tagName === \"svg\" || event.target.tagName === \"path\") {\r\n                                return;\r\n                            }\r\n                            setCurrentList(index);\r\n                            setSide(false);\r\n                            $(\".listSet\").removeClass(\"active\");\r\n                            $(`.listSet[data-id=\"${app.id}\"]`).addClass(\"active\");\r\n                        }}\r\n                    >\r\n                        <MdList className=\"icon\" />\r\n                        <h3>{app.name}</h3>\r\n                        <MdEdit\r\n                            data-id={app.id}\r\n                            className=\"icon edit\"\r\n                            onClick={() => {\r\n                                $(\".rename\").fadeIn();\r\n                                $(\".renamebox\").val(app.name).select();\r\n                                setCurrentListId(app.id);\r\n                            }}\r\n                        />\r\n                        <MdDelete\r\n                            className=\"icon deleteIcon\"\r\n                            data-id={app.id}\r\n                            onClick={() => {\r\n                                $(\".delete\").fadeIn();\r\n                                setCurrentListId(app.id);\r\n                            }}\r\n                        />\r\n                    </li>\r\n                </IconContext.Provider>\r\n            );\r\n        });\r\n        setList(list);\r\n    }, [app, setCurrentList, whichMode]);\r\n\r\n    $(`.listSet`).removeClass(\"active\");\r\n    $(`.listSet:eq(${currentList})`).addClass(\"active\");\r\n\r\n    if (whichMode) $(\".modal\").removeClass(\"light\");\r\n    else $(\".modal\").addClass(\"light\");\r\n\r\n    if (side) {\r\n        $(\".sideBarUnderLay\")\r\n            .fadeIn()\r\n            .click(() => {\r\n                setSide(false);\r\n            });\r\n    } else {\r\n        $(\".sideBarUnderLay\").fadeOut();\r\n    }\r\n\r\n    $(\".contactModal .Input.email\").blur(function (event) {\r\n        if (!/@/.test(event.target.value.trim())) {\r\n            $(this).addClass(\"err\");\r\n        } else {\r\n            $(this).removeClass(\"err\");\r\n        }\r\n    });\r\n    function check(input) {\r\n        if (input.val().trim() === \"\") {\r\n            input.addClass(\"err\");\r\n        } else {\r\n            input.removeClass(\"err\");\r\n        }\r\n    }\r\n    $(\".contactModal .Input:not('.email')\").blur(function () {\r\n        check($(this));\r\n    });\r\n    $(\".contactModal .Input.err\").keyup(function () {\r\n        check($(this));\r\n    });\r\n    var sendBtn;\r\n    switch (formStatus) {\r\n        case \"sending\":\r\n            sendBtn = (\r\n                <button className=\"modalBtn sendBtn sending\" type=\"submit\">\r\n                    <FiLoader className=\"loading\" />\r\n                    <span>Sending</span>\r\n                </button>\r\n            );\r\n            break;\r\n        case \"sent\":\r\n            sendBtn = (\r\n                <button className=\"modalBtn sendBtn sent\" type=\"submit\">\r\n                    <MdCheck />\r\n                    <span>Sent</span>\r\n                </button>\r\n            );\r\n            break;\r\n        case \"error\":\r\n            sendBtn = (\r\n                <button className=\"modalBtn sendBtn error\" type=\"submit\">\r\n                    <MdError />\r\n                    <span>Error Occured!</span>\r\n                </button>\r\n            );\r\n            break;\r\n        default:\r\n            sendBtn = (\r\n                <button className=\"modalBtn sendBtn send\" type=\"submit\">\r\n                    <MdSend />\r\n                    <span>Send</span>\r\n                </button>\r\n            );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"ham\">\r\n                <MdDehaze\r\n                    size=\"1.5rem\"\r\n                    className=\"icon\"\r\n                    onClick={() => {\r\n                        setSide(true);\r\n                    }}\r\n                />\r\n            </div>\r\n            <div className=\"sideBarUnderLay\"></div>\r\n            <div className={`sideBar ${side ? \"openBar\" : \"\"} ${whichMode ? \"\" : \"lightMode\"}`}>\r\n                <h2>\r\n                    Your List Set\r\n                    <MdClear\r\n                        size=\"1.5rem\"\r\n                        className=\"icon\"\r\n                        onClick={() => {\r\n                            setSide(false);\r\n                        }}\r\n                    />\r\n                </h2>\r\n                <ul>\r\n                    {list}\r\n                    <hr />\r\n                    <IconContext.Provider value={{ size: \"1.5rem\" }}>\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".newModal\").fadeIn();\r\n                                $(\".new\");\r\n                            }}\r\n                        >\r\n                            <MdAdd />\r\n                            <h3>Add New List</h3>\r\n                        </li>\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".clearListModal\").fadeIn();\r\n                            }}\r\n                        >\r\n                            <MdDeleteSweep />\r\n                            <h3>Clear All Lists</h3>\r\n                        </li>\r\n\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                setSide(false);\r\n                                changeMode();\r\n                                setModes(!modes);\r\n                            }}\r\n                        >\r\n                            {whichMode ? <FiSun fill=\"white\" /> : <FiMoon stroke=\"transparent\" />}\r\n                            <h3>Turn on {whichMode ? \"Light\" : \"Dark\"} Mode</h3>\r\n                        </li>\r\n                        <hr />\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".contactModal\").fadeIn();\r\n                            }}\r\n                        >\r\n                            <FiPhone\r\n                                style={{ strokeWidth: 1 }}\r\n                                fill={`${whichMode ? \"white\" : \"#333\"}`}\r\n                            />\r\n                            <h3>Contact Me</h3>\r\n                        </li>\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".donateModal\").fadeIn();\r\n                            }}\r\n                        >\r\n                            <FiHeart\r\n                                style={{ strokeWidth: 1 }}\r\n                                fill={`${whichMode ? \"white\" : \"#333\"}`}\r\n                            />\r\n                            <h3>Donate</h3>\r\n                        </li>\r\n                    </IconContext.Provider>\r\n                    <hr />\r\n                </ul>\r\n            </div>\r\n            {/* Sets name of New List */}\r\n            <div className=\"modalCont newModal\">\r\n                <form\r\n                    className=\"modal\"\r\n                    onSubmit={(event) => {\r\n                        event.preventDefault();\r\n                        $(\".newModal\").fadeOut();\r\n                        $(\".Input\").val(null);\r\n                        addList();\r\n                        setSide(false);\r\n                    }}\r\n                >\r\n                    <h3>list Name</h3>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"Input\"\r\n                            name=\"inputBlock\"\r\n                            onChange={({ target: { value } }) => {\r\n                                setNewListName(value);\r\n                            }}\r\n                            autoComplete=\"off\"\r\n                            required={true}\r\n                        />\r\n                        <svg className=\"border\" viewBox=\"0 0 275.05 40\" preserveAspectRatio=\"none\">\r\n                            <path\r\n                                className=\"cls-1 path\"\r\n                                d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                            <path\r\n                                className=\"cls-2 path\"\r\n                                d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                        </svg>\r\n                        <span>List Name...</span>\r\n                    </div>\r\n                    <button className=\"modalBtn save\" type=\"submit\">\r\n                        <MdCheck />\r\n                        <span>Save</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            $(\".newModal\").fadeOut();\r\n                            $(\".Input\").val(null);\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n            {/* Renames a list */}\r\n            <div className=\"modalCont rename\">\r\n                <form\r\n                    className=\"modal\"\r\n                    onSubmit={(event) => {\r\n                        event.preventDefault();\r\n                        $(\".rename\").fadeOut();\r\n                        $(\".Input\").val(null);\r\n                        updateList(currentListId);\r\n                        setCurrentListId(\"\");\r\n                    }}\r\n                >\r\n                    <h3>Rename Todo</h3>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"Input renamebox\"\r\n                            name=\"inputBlock\"\r\n                            onChange={({ target: { value } }) => {\r\n                                setRename(value);\r\n                            }}\r\n                            autoComplete=\"off\"\r\n                            required={true}\r\n                        />\r\n                        <svg className=\"border\" viewBox=\"0 0 275.05 40\" preserveAspectRatio=\"none\">\r\n                            <path\r\n                                className=\"cls-1 path\"\r\n                                d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                            <path\r\n                                className=\"cls-2 path\"\r\n                                d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <button className=\"modalBtn save\" type=\"submit\">\r\n                        <MdCheck />\r\n                        <span>Save</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            $(\".rename\").fadeOut();\r\n                            $(\".Input\").val(null);\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n            {/* delets a list */}\r\n            <div className=\"modalCont delete\">\r\n                <div className=\"modal\" style={{ textAlign: \"center\" }}>\r\n                    <MdDelete\r\n                        fontSize=\"3rem\"\r\n                        className=\"bin\"\r\n                        style={{ textShadow: \"0px 0px 5px red\" }}\r\n                    />\r\n                    <h3>Are you sure You want to Delete this List?</h3>\r\n                    <p>Entire List will be removed permanently</p>\r\n\r\n                    <button\r\n                        className=\"modalBtn\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            $(\".delete\").fadeOut();\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn del\"\r\n                        type=\"submit\"\r\n                        onClick={() => {\r\n                            $(\".delete\").fadeOut();\r\n                            deleteList(currentListId);\r\n                            setSide(false);\r\n                        }}\r\n                    >\r\n                        <MdCheck />\r\n                        <span>OK</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {/* Clears all Lists */}\r\n            <div className=\"modalCont clearListModal\">\r\n                <div className=\"modal\" style={{ textAlign: \"center\" }}>\r\n                    <MdDeleteSweep\r\n                        fontSize=\"3rem\"\r\n                        className=\"icon bin\"\r\n                        style={{ textShadow: \"0px 0px 5px red\" }}\r\n                    />\r\n                    <h3>Are you sure You want to Clear All Your Lists?</h3>\r\n                    <p>All Lists will be removed permanently and Cannot be recovered!</p>\r\n                    <button\r\n                        className=\"modalBtn\"\r\n                        onClick={() => {\r\n                            $(\".clearListModal\").fadeOut();\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn del\"\r\n                        onClick={() => {\r\n                            $(\".clearListModal\").fadeOut();\r\n                            clearList(currentListId);\r\n                        }}\r\n                    >\r\n                        <MdDeleteSweep />\r\n                        <span> Clear all Lists</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {/* Contact Me Section */}\r\n            <div className=\"modalCont contactModal\" style={{ display: \"none\", userSelect: \"text\" }}>\r\n                <div className=\"modal\">\r\n                    <MdClear\r\n                        className={\"icon closeModal\"}\r\n                        size=\"1.5rem\"\r\n                        onClick={() => {\r\n                            $(\".contactModal .Input\").val(null);\r\n                            $(\".contactModal\").fadeOut();\r\n                            $(\".contactModal .Input\").removeClass(\"err\");\r\n                            setFormStatus(\"send\");\r\n                        }}\r\n                    />\r\n\r\n                    <form\r\n                        className=\"contact\"\r\n                        onSubmit={(event) => {\r\n                            event.preventDefault();\r\n                            sendForm(event);\r\n                            setFormStatus(\"sending\");\r\n                        }}\r\n                    >\r\n                        <h3>Contact Me</h3>\r\n                        <div className=\"input-container\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"Input\"\r\n                                name=\"from_name\"\r\n                                onChange={({ target: { value } }) => {\r\n                                    setcontactForm((prev) => {\r\n                                        return { ...prev, fullname: value };\r\n                                    });\r\n                                }}\r\n                                autoComplete=\"off\"\r\n                                required={true}\r\n                            />\r\n                            <svg\r\n                                className=\"border\"\r\n                                viewBox=\"0 0 275.05 40\"\r\n                                preserveAspectRatio=\"none\"\r\n                            >\r\n                                <path\r\n                                    className=\"cls-1 path\"\r\n                                    d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                                <path\r\n                                    className=\"cls-2 path\"\r\n                                    d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                            </svg>\r\n                            <span>Full Name</span>\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <input\r\n                                type=\"email\"\r\n                                className=\"Input email\"\r\n                                name=\"from_email\"\r\n                                onChange={({ target: { value } }) => {\r\n                                    setcontactForm((prev) => {\r\n                                        return { ...prev, email: value };\r\n                                    });\r\n                                }}\r\n                                autoComplete=\"off\"\r\n                                required={true}\r\n                            />\r\n                            <svg\r\n                                className=\"border\"\r\n                                viewBox=\"0 0 275.05 40\"\r\n                                preserveAspectRatio=\"none\"\r\n                            >\r\n                                <path\r\n                                    className=\"cls-1 path\"\r\n                                    d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                                <path\r\n                                    className=\"cls-2 path\"\r\n                                    d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                            </svg>\r\n                            <span>email</span>\r\n                        </div>\r\n                        <div className=\"input-container message\">\r\n                            <textarea\r\n                                className=\"Input\"\r\n                                name=\"message\"\r\n                                onChange={({ target: { value } }) => {\r\n                                    setcontactForm((prev) => {\r\n                                        return { ...prev, message: value };\r\n                                    });\r\n                                }}\r\n                                required={true}\r\n                            ></textarea>\r\n                            <svg\r\n                                className=\"border textarea\"\r\n                                viewBox=\"0 0 309 277\"\r\n                                preserveAspectRatio=\"none\"\r\n                            >\r\n                                <path\r\n                                    className=\"cls-1 path\"\r\n                                    d=\"M154.5,1.5h138a15,15,0,0,1,15,15v244a15,15,0,0,1-15,15h-138\"\r\n                                />\r\n                                <path\r\n                                    className=\"cls-2 path\"\r\n                                    d=\"M154.5,275.5H16.5a15,15,0,0,1-15-15V16.5a15,15,0,0,1,15-15h138\"\r\n                                />\r\n                            </svg>\r\n                            <span>Message</span>\r\n                        </div>\r\n                        {sendBtn}\r\n                    </form>\r\n                    <div className=\"social\">\r\n                        <a href=\"https://www.facebook.com/crimson.oluwatowo/\" className=\"facebook\">\r\n                            <FaFacebookF />\r\n                        </a>\r\n                        <a href=\"https://www.instagram.com/crimson_corp/\" className=\"instagram\">\r\n                            <FaInstagram />\r\n                        </a>\r\n                        <a href=\"m.me/oluwatowo_rosanwo\" className=\"messenger\">\r\n                            <FaFacebookMessenger />\r\n                        </a>\r\n                        <a\r\n                            href=\"https://api.whatsapp.com/send?phone=+2348024537884&text=Hi20%Crimson%20%\"\r\n                            className=\"whatsapp\"\r\n                        >\r\n                            <FaWhatsapp />\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* Donate Section */}\r\n            <div className=\"modalCont donateModal\" style={{ display: \"none\", userSelect: \"text\" }}>\r\n                <div className=\"modal\">\r\n                    <MdClear\r\n                        className={\"icon closeModal\"}\r\n                        size=\"1.5rem\"\r\n                        onClick={() => {\r\n                            $(\".donateModal\").fadeOut();\r\n                            setCopy(false);\r\n                        }}\r\n                    />\r\n\r\n                    <h3>Donate</h3>\r\n                    <div className=\"info-block\">\r\n                        <h4>- About Me</h4>\r\n                        <p>\r\n                            My Name is Oluwatowo Rosanwo Mayowa, I'm a 200L Student of The\r\n                            University Of Ibadan studying Food Technology, I started Web Development\r\n                            in 2018 and Now I'm an Intermediate Web Developer and Aspiring UI/UX\r\n                            Deisgner, Im also a Logo/Video Editor.\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"info-block\">\r\n                        <h4>- Donate</h4>\r\n                        <p>\r\n                            Please if You really Like my Work and have a some money to spare, Kindly\r\n                            make a Donation To me as This will enhance my Progress and Productivity\r\n                            and also make me work harder and Develop more Apps that you will\r\n                            Definately find usefull\r\n                        </p>\r\n                    </div>\r\n\r\n                    <h4>Account Details:</h4>\r\n                    <pre>\r\n                        Bank: First Bank <br />\r\n                        Account Number: <span id=\"acc\">3123872415</span> <br />\r\n                        Account Name: Oluwatowo Rosanwo <br />\r\n                    </pre>\r\n                    <button\r\n                        className={`copy modalBtn sendBtn ${copy ? \"sent\" : \"send\"}`}\r\n                        onClick={() => {\r\n                            var temp = $(\"<input>\");\r\n                            $(\".donateModal .modal\").append(temp);\r\n                            temp.val($(\"#acc\").text()).select();\r\n                            document.execCommand(\"copy\");\r\n                            temp.remove();\r\n                            setCopy(true);\r\n                            setTimeout(() => {\r\n                                alert(\"Account Number Copied, Thank You So Much!\");\r\n                            }, 1000);\r\n                        }}\r\n                    >\r\n                        {copy ? (\r\n                            <>\r\n                                <MdCheck />\r\n                                <span>Copied</span>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <FiCopy />\r\n                                <span>Copy Account Number</span>\r\n                            </>\r\n                        )}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default OuterControl;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport App from \"./App\";\r\nimport uuid from \"uuid\";\r\nimport OuterControl from \"./OuterControl\";\r\nimport { MdDehaze } from \"react-icons/md\";\r\nimport \"animate.css\";\r\nimport emailjs from \"emailjs-com\";\r\n\r\nfunction Main() {\r\n    const [app, setApp] = useState(() => {\r\n        var ListLocal = localStorage.getItem(\"AppLocal\");\r\n        if (ListLocal === null || ListLocal === undefined) return [];\r\n        else return JSON.parse(ListLocal);\r\n    });\r\n    const [currentList, setCurrentList] = useState(() => {\r\n        var index = localStorage.getItem(\"Index\");\r\n        if (index === null || index === undefined) return 0;\r\n        else return Number.parseInt(index);\r\n    });\r\n    const [newListName, setNewListName] = useState(\"\");\r\n    const [reName, setRename] = useState(\"\");\r\n    const [whichMode, setwhichMode] = useState(() => {\r\n        var mode = localStorage.getItem(\"mode\");\r\n        if (mode === undefined || mode === null) return true;\r\n        else return JSON.parse(mode.toLowerCase());\r\n    });\r\n    const [formStatus, setFormStatus] = useState(\"send\");\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"AppLocal\", JSON.stringify(app));\r\n    }, [app]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"Index\", JSON.stringify(currentList));\r\n    }, [currentList]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"mode\", whichMode);\r\n    }, [whichMode]);\r\n\r\n    function addList() {\r\n        let NewListProps = {\r\n            id: uuid.v4(),\r\n            name: newListName,\r\n        };\r\n        setCurrentList(app.length);\r\n        setApp((prev) => {\r\n            return [...prev, NewListProps];\r\n        });\r\n    }\r\n\r\n    function updateList(id) {\r\n        setApp(\r\n            app.map((app) => {\r\n                if (app.id === id) app.name = reName;\r\n                return app;\r\n            })\r\n        );\r\n    }\r\n\r\n    function deleteList(id) {\r\n        localStorage.removeItem(id);\r\n        var filteredList = app.filter((app) => app.id !== id);\r\n        setCurrentList(filteredList.length - 1);\r\n        setApp(filteredList);\r\n    }\r\n    function clearList() {\r\n        setApp([]);\r\n        localStorage.clear();\r\n    }\r\n\r\n    function changeMode() {\r\n        setwhichMode(!whichMode);\r\n    }\r\n    function sendForm(form) {\r\n        emailjs\r\n            .sendForm(\r\n                process.env.REACT_APP_Service_id,\r\n                process.env.REACT_APP_template_id,\r\n                form.target,\r\n                process.env.REACT_APP_User_ID\r\n            )\r\n            .then((res) => {\r\n                if (res.status === 1 || res.text === \"OK\") setFormStatus(\"sent\");\r\n                else throw res;\r\n            })\r\n            .catch((err) => {\r\n                if (err) setFormStatus(\"error\");\r\n            });\r\n    }\r\n\r\n    var content;\r\n    app.length <= 0\r\n        ? (content = (\r\n              <div className=\"noList\">\r\n                  <div>\r\n                      <h1>No Lists</h1>\r\n                      <p>\r\n                          Click <MdDehaze className=\"dir\" /> to make a List\r\n                      </p>\r\n                  </div>\r\n              </div>\r\n          ))\r\n        : (content = (\r\n              <App\r\n                  key={app[currentList].id}\r\n                  props={{ app: app[currentList], whichMode: whichMode }}\r\n              />\r\n          ));\r\n\r\n    return (\r\n        <div className={`main ${whichMode ? \"\" : \"light\"}`}>\r\n            <OuterControl\r\n                props={{\r\n                    app,\r\n                    setNewListName,\r\n                    addList,\r\n                    setCurrentList,\r\n                    setRename,\r\n                    updateList,\r\n                    deleteList,\r\n                    currentList,\r\n                    clearList,\r\n                    changeMode,\r\n                    whichMode,\r\n                    sendForm,\r\n                    formStatus,\r\n                    setFormStatus,\r\n                }}\r\n            />\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\"No internet connection found. App is running in offline mode.\");\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.css\";\r\nimport Main from \"./Components/Main\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nReactDOM.render(<Main />, document.getElementById(\"root\"));\r\nserviceWorker.register();\r\n"],"sourceRoot":""}