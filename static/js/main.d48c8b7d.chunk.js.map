{"version":3,"sources":["Components/Inner Component/Input.js","Components/Inner Component/EachTodo.js","Components/Inner Component/List.js","Components/Inner Component/Control.js","Components/App.js","Components/OuterControl.js","Components/Main.js","serviceWorker.js","index.js"],"names":["Input","props","sendProps","setInput","className","onSubmit","type","name","onChange","autoComplete","required","data-name","xmlns","viewBox","preserveAspectRatio","d","transform","fill","size","EachTodo","eachTodo","id","completed","Todo","DateOptions","updateTodo","removeTodo","AddUpdate","removeReminder","useState","date","reminder","futureDate","TodoOp","setTodoOp","Date","now","parse","TodoStatus","setTodoStatus","useEffect","ft","passCheck","setInterval","Push","create","requireInteraction","vibrate","clearInterval","closeCheck","data-id","checked","points","style","opacity","textDecoration","onClick","$","fadeIn","val","select","value","target","prev","transdiv","defaultValue","float","margin","display","fadeOut","store","addNotification","message","container","insert","animationIn","animationOut","dismiss","duration","onScreen","showIcon","touch","click","List","TodoListArray","filtered","TodoBlocks","map","index","key","length","Control","progress","clearDone","done","statusHandler","status","whichMode","mode","x1","y1","x2","y2","offset","stopColor","cx","cy","r","strokeDashoffset","strokeWidth","disabled","App","app","setTodo","TodoLocal","localStorage","getItem","undefined","JSON","setTodoListArray","setDone","setProgress","setFiltered","setStatus","Trans","x","css","setItem","stringify","DoneTodos","filter","arr","Math","floor","isNaN","FilterLogic","event","preventDefault","inputBox","todo","trim","focus","alert","uuid","v4","setDate","OuterControl","sendBtn","setNewListName","addList","setCurrentList","setRename","updateList","deleteList","currentList","clearList","changeMode","sendForm","formStatus","setFormStatus","side","setSide","list","setList","currentListId","setCurrentListId","modes","setModes","copy","setCopy","checkEmail","test","removeClass","addClass","check","input","Provider","persist","tagName","stroke","on","keyup","this","blur","fontSize","textShadow","userSelect","href","temp","append","text","document","execCommand","remove","title","Main","content","ListLocal","setApp","Number","parseInt","newListName","reName","toLowerCase","setwhichMode","NewListProps","removeItem","filteredList","clear","form","emailjs","process","then","res","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d48c8b7d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MdAdd } from \"react-icons/md\";\r\n\r\nexport default function Input({ props: { sendProps, setInput } }) {\r\n    return (\r\n        <form className=\"inputBlock\" onSubmit={sendProps}>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"Input\"\r\n                    name=\"inputBlock\"\r\n                    onChange={setInput}\r\n                    autoComplete=\"off\"\r\n                    required=\"required\"\r\n                />\r\n                <svg\r\n                    className=\"border\"\r\n                    data-name=\"Layer 1\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    viewBox=\"0 0 275.05 40\"\r\n                    preserveAspectRatio=\"none\"\r\n                >\r\n                    <path\r\n                        className=\"cls-1 path\"\r\n                        d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                        transform=\"translate(-1.3 -0.77)\"\r\n                    />\r\n                    <path\r\n                        className=\"cls-2 path\"\r\n                        d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                        transform=\"translate(-1.3 -0.77)\"\r\n                    />\r\n                </svg>\r\n                <span>What Do you want Todo?...</span>\r\n            </div>\r\n            <button className=\"plus\" type=\"submit\">\r\n                <MdAdd fill=\"#222\" className=\"icon\" size=\"1.2rem\" />\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n// import useSound from \"use-sound\";\r\nimport { MdCheck, MdClear, MdDelete, MdSettings } from \"react-icons/md\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\nimport $ from \"jquery\";\r\nimport Push from \"push.js\";\r\nimport { store } from \"react-notifications-component\";\r\n\r\nfunction EachTodo({\r\n    props: {\r\n        eachTodo: { id, completed, Todo, DateOptions },\r\n        updateTodo,\r\n        removeTodo,\r\n        AddUpdate,\r\n        removeReminder,\r\n    },\r\n}) {\r\n    const [TodoOp, setTodoOp] = useState({\r\n        name: Todo,\r\n        date: DateOptions.reminder ? DateOptions.futureDate : null,\r\n    });\r\n    const [TodoStatus, setTodoStatus] = useState(() => {\r\n        if (Date.now() >= Date.parse(DateOptions.futureDate)) {\r\n            return \"passed\";\r\n        } else if (Date.now() >= Date.parse(DateOptions.futureDate) - 1800000) {\r\n            return \"close\";\r\n        } else if (DateOptions.reminder) return \"normal\";\r\n        else return \"\";\r\n    });\r\n    var Done = {\r\n        opacity: 0.4,\r\n        textDecoration: \"line-through\",\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (Date.now() >= Date.parse(DateOptions.futureDate)) {\r\n            setTodoStatus(\"passed\");\r\n        } else if (Date.now() >= Date.parse(DateOptions.futureDate) - 1800000) {\r\n            setTodoStatus(\"close\");\r\n        } else if (DateOptions.reminder) setTodoStatus(\"normal\");\r\n        else setTodoStatus(\"\");\r\n    }, [DateOptions]);\r\n\r\n    useEffect(() => {\r\n        if (DateOptions.reminder && completed === false) {\r\n            var ft = DateOptions.futureDate;\r\n            var passCheck = setInterval(() => {\r\n                if (Date.now() >= Date.parse(ft)) {\r\n                    Push.create(`Reminder: ${Todo}`, {\r\n                        requireInteraction: true,\r\n                        vibrate: [300, 100, 300],\r\n                    });\r\n                    setTodoStatus(\"passed\");\r\n                    clearInterval(passCheck);\r\n                }\r\n            }, 1000);\r\n\r\n            var closeCheck = setInterval(() => {\r\n                if (Date.now() >= Date.parse(ft)) return;\r\n                if (Date.now() >= Date.parse(ft) - 1800000) {\r\n                    setTodoStatus(\"close\");\r\n                    clearInterval(closeCheck);\r\n                }\r\n            }, 1000);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [DateOptions.reminder, Todo]);\r\n\r\n    return (\r\n        <div className=\"label\" data-id={`${id}`}>\r\n            <label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    data-id={`${id}`}\r\n                    checked={completed}\r\n                    onChange={() => {\r\n                        updateTodo(id);\r\n                    }}\r\n                />\r\n                <div className=\"Todo\">\r\n                    <div className=\"checkbox-container\">\r\n                        <svg viewBox=\"0 0 100 100\" className=\"checkbox\">\r\n                            <path\r\n                                className=\"st0\"\r\n                                d=\"M85,92H15c-3.9,0-7-3.1-7-7V15c0-3.9,3.1-7,7-7h70c3.9,0,7,3.1,7,7v70C92,88.9,88.9,92,85,92z\"\r\n                            />\r\n                            <polyline className=\"check\" points=\"22.5,47.5 42.5,67.5 78.5,31.5 \" />\r\n                        </svg>\r\n                    </div>\r\n                    <span style={completed ? Done : null}>{Todo}</span>\r\n                </div>\r\n            </label>\r\n            {completed ? (\r\n                <MdDelete\r\n                    className={\"deleteIcon icon\"}\r\n                    size=\"1.5rem\"\r\n                    onClick={() => {\r\n                        removeTodo(id);\r\n                    }}\r\n                    data-id={id}\r\n                />\r\n            ) : DateOptions.reminder ? (\r\n                <MdSettings\r\n                    className={`icon settings ${TodoStatus}`}\r\n                    size=\"1.5rem\"\r\n                    data-id={id}\r\n                    onClick={() => {\r\n                        $(`.TodoEdit[data-id=${id}]`).fadeIn();\r\n                        $(\".TodoEdit .Input[type='text']\").val(Todo).select();\r\n                    }}\r\n                />\r\n            ) : (\r\n                <FiEdit\r\n                    size=\"1.5rem\"\r\n                    data-id={id}\r\n                    onClick={() => {\r\n                        $(`.TodoEdit[data-id=${id}]`).fadeIn();\r\n                        $(\".TodoEdit .Input[type='text']\").val(Todo).select();\r\n                    }}\r\n                />\r\n            )}\r\n\r\n            <div className=\"modalCont TodoEdit right\" data-id={id}>\r\n                <div className=\"modal\">\r\n                    <h3>More Options</h3>\r\n                    <h4>Edit task</h4>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"Input\"\r\n                            autoComplete=\"off\"\r\n                            onChange={({ target: { value } }) => {\r\n                                setTodoOp((prev) => ({ ...prev, name: value }));\r\n                            }}\r\n                        />\r\n                        <svg className=\"border\" viewBox=\"0 0 275.05 40\" preserveAspectRatio=\"none\">\r\n                            <path\r\n                                className=\"cls-1 path\"\r\n                                d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                transdiv=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                            <path\r\n                                className=\"cls-2 path\"\r\n                                d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                        </svg>\r\n                        <span>Edit Task</span>\r\n                    </div>\r\n                    <h4>Set Reminder for</h4>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            className=\"Input\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue={TodoOp.date}\r\n                            onChange={({ target: { value } }) => {\r\n                                setTodoOp((prev) => ({ ...prev, date: value }));\r\n                            }}\r\n                        />\r\n                        <svg className=\"border\" viewBox=\"0 0 275.05 40\" preserveAspectRatio=\"none\">\r\n                            <path\r\n                                className=\"cls-1 path\"\r\n                                d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                transdiv=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                            <path\r\n                                className=\"cls-2 path\"\r\n                                d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    {DateOptions.reminder ? (\r\n                        <button\r\n                            className=\"modalBtn del\"\r\n                            style={{ float: \"none\", margin: \"0 0 20px 0\", display: \"grid\" }}\r\n                            onClick={() => {\r\n                                removeReminder(id);\r\n                                $(\".TodoEdit\").fadeOut();\r\n                            }}\r\n                        >\r\n                            <MdClear />\r\n                            <span> Remove Reminder ?</span>\r\n                        </button>\r\n                    ) : null}\r\n                    <button\r\n                        className=\"modalBtn save\"\r\n                        onClick={({ target: { value } }) => {\r\n                            if (Date.parse(TodoOp.date) <= Date.now()) {\r\n                                store.addNotification({\r\n                                    message: \"Setting Date in the Past will not trigger Reminder!\",\r\n                                    type: \"warning\",\r\n                                    container: \"top-center\",\r\n                                    insert: \"top\",\r\n                                    animationIn: [\"animated\", \"bounceIn\"],\r\n                                    animationOut: [\"animated\", \"fadeOut\"],\r\n                                    dismiss: {\r\n                                        duration: 3000,\r\n                                        onScreen: true,\r\n                                        showIcon: true,\r\n                                        touch: true,\r\n                                        click: true,\r\n                                    },\r\n                                });\r\n                                return;\r\n                            }\r\n                            AddUpdate(id, TodoOp);\r\n                            $(\".TodoEdit\").fadeOut();\r\n                        }}\r\n                    >\r\n                        <MdCheck />\r\n                        <span>Save</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn cancel\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            $(\".TodoEdit\").fadeOut();\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EachTodo;\r\n","import React from \"react\";\r\nimport EachTodo from \"./EachTodo\";\r\n\r\nexport default function List({\r\n    props: { removeTodo, updateTodo, TodoListArray, filtered, AddUpdate, removeReminder },\r\n}) {\r\n    var TodoBlocks = filtered.map((eachTodo, index) => {\r\n        return (\r\n            <EachTodo\r\n                key={index}\r\n                props={{\r\n                    eachTodo,\r\n                    updateTodo,\r\n                    removeTodo,\r\n                    AddUpdate,\r\n                    removeReminder,\r\n                }}\r\n            />\r\n        );\r\n    });\r\n\r\n    return <div className=\"listContainer\">{TodoListArray.length === 0 ? \"\" : TodoBlocks}</div>;\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Control({\r\n    props: { progress, TodoListArray, clearDone, done, statusHandler, status, mode, whichMode },\r\n}) {\r\n    return (\r\n        <div className=\"control\">\r\n            <div className=\"box\">\r\n                <div className=\"percent\">\r\n                    <svg>\r\n                        <linearGradient id=\"grad\" x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"100%\">\r\n                            <stop offset=\"0%\" stopColor=\"#ff0612\"></stop>\r\n                            <stop offset=\"100%\" stopColor=\"#6544ff\"></stop>\r\n                        </linearGradient>\r\n                        <circle cx=\"50%\" cy=\"50%\" r=\"40\" className=\"dark circle\"></circle>\r\n\r\n                        <circle\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            r=\"40\"\r\n                            className=\"grad circle\"\r\n                            style={{\r\n                                strokeDashoffset:\r\n                                    250.92137145996094 - (250.92137145996094 * progress) / 100,\r\n                                strokeWidth: progress === 0 ? \"0px\" : \"10px\",\r\n                            }}\r\n                        ></circle>\r\n                    </svg>\r\n                    <div className={`number ${whichMode ? \"darkMode\" : \"LightMode\"}`}>\r\n                        {progress !== 0 || TodoListArray.length !== 0 ? (\r\n                            <>\r\n                                <h2>\r\n                                    {progress}\r\n                                    <span className=\"perc\">%</span>\r\n                                </h2>\r\n                                <span className=\"comp\">completed</span>\r\n                            </>\r\n                        ) : (\r\n                            <h2 className=\"empty\">No Task</h2>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <button\r\n                    onClick={clearDone}\r\n                    disabled={done === 0 ? true : false}\r\n                    className={done === 0 ? \"disable\" : \"clear\"}\r\n                >\r\n                    &#10005; Clear Done\r\n                </button>\r\n                <select name=\"filter\" id=\"filter\" onChange={statusHandler} value={status}>\r\n                    <option value=\"All\">All</option>\r\n                    <option value=\"Completed\">Completed</option>\r\n                    <option value=\"Uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport uuid from \"uuid\";\r\nimport Input from \"./Inner Component/Input\";\r\nimport List from \"./Inner Component/List\";\r\nimport Control from \"./Inner Component/Control\";\r\nimport $ from \"jquery\";\r\n\r\nexport default function App({ props: { app } }) {\r\n    const [id] = useState(app.id);\r\n    const [Todo, setTodo] = useState({});\r\n    const [TodoListArray, setTodoListArray] = useState(() => {\r\n        var TodoLocal = localStorage.getItem(id);\r\n        if (TodoLocal === null || TodoLocal === undefined) return [];\r\n        else return JSON.parse(TodoLocal);\r\n    });\r\n    const [done, setDone] = useState(0);\r\n    const [progress, setProgress] = useState(\"\");\r\n    const [filtered, setFiltered] = useState([]);\r\n    const [status, setStatus] = useState(\"All\");\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(id, JSON.stringify(TodoListArray));\r\n    }, [TodoListArray, id]);\r\n\r\n    useEffect(() => {\r\n        const DoneTodos = TodoListArray.filter((arr) => arr.completed === true);\r\n        var progress = Math.floor((DoneTodos.length / TodoListArray.length) * 100);\r\n        if (isNaN(progress)) progress = 0;\r\n        setProgress(progress);\r\n        setDone(DoneTodos.length);\r\n    }, [progress, TodoListArray]);\r\n\r\n    useEffect(() => {\r\n        function FilterLogic() {\r\n            switch (status) {\r\n                case \"Completed\":\r\n                    setFiltered(TodoListArray.filter((arr) => arr.completed === true));\r\n                    break;\r\n                case \"Uncompleted\":\r\n                    setFiltered(TodoListArray.filter((arr) => arr.completed === false));\r\n                    break;\r\n                default:\r\n                    setFiltered(TodoListArray);\r\n            }\r\n        }\r\n        FilterLogic();\r\n    }, [TodoListArray, status]);\r\n\r\n    useEffect(() => {\r\n        Trans(false);\r\n    }, [status]);\r\n\r\n    function Trans(x) {\r\n        if (x) {\r\n            $(\".checkbox path\").css(\"transition\", \".4s\");\r\n            $(\".check\").css(\"transition\", \".4s\");\r\n        } else {\r\n            $(\".checkbox path\").css(\"transition\", \"none\");\r\n            $(\".check\").css(\"transition\", \"none\");\r\n        }\r\n    }\r\n\r\n    function sendProps(event) {\r\n        event.preventDefault();\r\n        var inputBox = $(\".Input\");\r\n        let { Todo: todo } = Todo;\r\n        if (todo.trim() === \"\" || todo.trim() === undefined) {\r\n            inputBox.val(null).focus();\r\n            return alert(\"Please write a Task\");\r\n        }\r\n        Todo.id = uuid.v4();\r\n        Todo.completed = false;\r\n        Todo.DateOptions = {\r\n            futureDate: null,\r\n            reminder: false,\r\n        };\r\n        setTodoListArray((prev) => [...prev, Todo]);\r\n        inputBox.val(null).focus();\r\n        setTodo({});\r\n        setStatus(\"All\");\r\n    }\r\n\r\n    function setInput({ target: { value } }) {\r\n        setTodo({ Todo: value });\r\n    }\r\n\r\n    function updateTodo(id) {\r\n        Trans(true);\r\n        setTodoListArray(\r\n            TodoListArray.map((arr) => {\r\n                if (arr.id === id) arr.completed = !arr.completed;\r\n                return arr;\r\n            })\r\n        );\r\n    }\r\n\r\n    function AddUpdate(id, { name, date }) {\r\n        if (name) {\r\n            setTodoListArray(\r\n                TodoListArray.map((arr) => {\r\n                    if (arr.id === id) arr.Todo = name;\r\n                    return arr;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (date) {\r\n            setDate(date);\r\n        }\r\n\r\n        function setDate(date) {\r\n            if (Date.parse(date) <= Date.now()) {\r\n                return;\r\n            }\r\n            setTodoListArray(\r\n                TodoListArray.map((arr) => {\r\n                    if (arr.id === id) {\r\n                        arr.DateOptions = {\r\n                            futureDate: date,\r\n                            reminder: true,\r\n                        };\r\n                    }\r\n                    return arr;\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    function removeReminder(id) {\r\n        setTodoListArray(\r\n            TodoListArray.map((arr) => {\r\n                if (arr.id === id) {\r\n                    arr.DateOptions.reminder = false;\r\n                    arr.DateOptions.date = null;\r\n                }\r\n                return arr;\r\n            })\r\n        );\r\n    }\r\n\r\n    function removeTodo(id) {\r\n        Trans(false);\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.id !== id));\r\n    }\r\n\r\n    function clearDone() {\r\n        Trans(false);\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.completed === false));\r\n    }\r\n\r\n    function statusHandler({ target: { value } }) {\r\n        setStatus(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"ListName\">{app.name}</h1>\r\n            <Control\r\n                props={{\r\n                    progress,\r\n                    TodoListArray,\r\n                    clearDone,\r\n                    done,\r\n                    status,\r\n                    statusHandler,\r\n                }}\r\n            />\r\n            <Input\r\n                props={{\r\n                    sendProps,\r\n                    setInput,\r\n                }}\r\n            />\r\n            <List\r\n                props={{\r\n                    removeTodo,\r\n                    updateTodo,\r\n                    TodoListArray,\r\n                    filtered,\r\n                    AddUpdate,\r\n                    removeReminder,\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    MdDehaze,\r\n    MdClear,\r\n    MdAdd,\r\n    MdDelete,\r\n    MdList,\r\n    MdDeleteSweep,\r\n    MdCheck,\r\n    MdError,\r\n    MdSend,\r\n} from \"react-icons/md\";\r\nimport { FiHeart, FiMoon, FiSun, FiPhone, FiLoader, FiCopy } from \"react-icons/fi\";\r\nimport { FaFacebookF, FaInstagram, FaWhatsapp, FaFacebookMessenger } from \"react-icons/fa\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\nimport $ from \"jquery\";\r\n\r\nimport { store } from \"react-notifications-component\";\r\nfunction OuterControl({\r\n    props: {\r\n        app,\r\n        setNewListName,\r\n        addList,\r\n        setCurrentList,\r\n        setRename,\r\n        updateList,\r\n        deleteList,\r\n        currentList,\r\n        clearList,\r\n        changeMode,\r\n        whichMode,\r\n        sendForm,\r\n        formStatus,\r\n        setFormStatus,\r\n    },\r\n}) {\r\n    const [side, setSide] = useState(false);\r\n    const [list, setList] = useState([]);\r\n    const [currentListId, setCurrentListId] = useState(\"\");\r\n    const [modes, setModes] = useState(true);\r\n    const [copy, setCopy] = useState(false);\r\n    // creates Lists of TodoList Categories\r\n    useEffect(() => {\r\n        var list = app.map((app, index) => {\r\n            return (\r\n                <IconContext.Provider\r\n                    value={{\r\n                        size: \"1.5rem\",\r\n                        className: `ListSetIcon ${whichMode ? \"\" : \"light\"}`,\r\n                        style: { fill: whichMode ? \"white\" : \"#333\" },\r\n                    }}\r\n                    key={index}\r\n                >\r\n                    <li\r\n                        className={`listSet ${whichMode ? \"dark\" : \"light\"}`}\r\n                        data-id={app.id}\r\n                        onClick={(event) => {\r\n                            event.persist();\r\n                            if (event.target.tagName === \"svg\" || event.target.tagName === \"path\") {\r\n                                return;\r\n                            }\r\n                            setCurrentList(index);\r\n                            setSide(false);\r\n                            $(\".listSet\").removeClass(\"active\");\r\n                            $(`.listSet[data-id=\"${app.id}\"]`).addClass(\"active\");\r\n                        }}\r\n                    >\r\n                        <MdList className=\"icon\" />\r\n                        <h3>{app.name}</h3>\r\n                        <FiEdit\r\n                            style={{ stroke: whichMode ? \"white\" : \"#333\", fill: \"none\" }}\r\n                            data-id={app.id}\r\n                            className=\"icon edit\"\r\n                            onClick={() => {\r\n                                $(\".rename\").fadeIn();\r\n                                $(\".renamebox\").val(app.name).select();\r\n                                setCurrentListId(app.id);\r\n                            }}\r\n                        />\r\n                        <MdDelete\r\n                            className=\"icon deleteIcon\"\r\n                            data-id={app.id}\r\n                            onClick={() => {\r\n                                $(\".delete\").fadeIn();\r\n                                setCurrentListId(app.id);\r\n                            }}\r\n                        />\r\n                    </li>\r\n                </IconContext.Provider>\r\n            );\r\n        });\r\n        setList(list);\r\n    }, [app, setCurrentList, whichMode]);\r\n\r\n    $(`.listSet`).removeClass(\"active\");\r\n    $(`.listSet:eq(${currentList})`).addClass(\"active\");\r\n\r\n    if (whichMode) $(\".modal\").removeClass(\"light\");\r\n    else $(\".modal\").addClass(\"light\");\r\n\r\n    if (side) {\r\n        $(\".sideBarUnderLay\")\r\n            .fadeIn()\r\n            .click(() => {\r\n                setSide(false);\r\n            });\r\n    } else {\r\n        $(\".sideBarUnderLay\").fadeOut();\r\n    }\r\n\r\n    function checkEmail(event, x) {\r\n        var val = event.target.value.trim();\r\n        if (!/@/.test(val) || val === \"\") {\r\n            x.addClass(\"err\");\r\n        } else {\r\n            x.removeClass(\"err\");\r\n        }\r\n    }\r\n\r\n    $(\".contactModal .Input.email\").on({\r\n        keyup: function (event) {\r\n            checkEmail(event, $(this));\r\n        },\r\n        blur: function (event) {\r\n            checkEmail(event, $(this));\r\n        },\r\n    });\r\n    function check(input) {\r\n        if (input.val().trim() === \"\") {\r\n            input.addClass(\"err\");\r\n        } else {\r\n            input.removeClass(\"err\");\r\n        }\r\n    }\r\n    $(\".contactModal .Input:not(.email)\").on({\r\n        blur: function () {\r\n            check($(this));\r\n        },\r\n\r\n        keyup: function () {\r\n            check($(this));\r\n        },\r\n    });\r\n    var sendBtn;\r\n    switch (formStatus) {\r\n        case \"sending\":\r\n            sendBtn = (\r\n                <button className=\"modalBtn sendBtn sending\" type=\"submit\">\r\n                    <FiLoader className=\"loading\" />\r\n                    <span>Sending</span>\r\n                </button>\r\n            );\r\n            break;\r\n        case \"sent\":\r\n            sendBtn = (\r\n                <button className=\"modalBtn sendBtn sent\" type=\"submit\">\r\n                    <MdCheck />\r\n                    <span>Sent</span>\r\n                </button>\r\n            );\r\n            break;\r\n        case \"error\":\r\n            sendBtn = (\r\n                <button className=\"modalBtn sendBtn error\" type=\"submit\">\r\n                    <MdError />\r\n                    <span>Error Occured!</span>\r\n                </button>\r\n            );\r\n            break;\r\n        default:\r\n            sendBtn = (\r\n                <button className=\"modalBtn sendBtn send\" type=\"submit\">\r\n                    <MdSend />\r\n                    <span>Send</span>\r\n                </button>\r\n            );\r\n    }\r\n\r\n    function copyComp() {\r\n        store.addNotification({\r\n            title: \"Copied!\",\r\n            message: \"Account Number Copied, Thank You so Much!\",\r\n            type: \"success\",\r\n            container: \"bottom-center\",\r\n            animationIn: [\"animated\", \"jackInTheBox\"],\r\n            animationOut: [\"animated\", \"bounceOut\"],\r\n            dismiss: {\r\n                duration: 3000,\r\n                onScreen: true,\r\n                showIcon: true,\r\n                touch: true,\r\n                click: true,\r\n            },\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"ham\">\r\n                <MdDehaze\r\n                    size=\"1.5rem\"\r\n                    className=\"icon\"\r\n                    onClick={() => {\r\n                        setSide(true);\r\n                    }}\r\n                />\r\n            </div>\r\n            <div className=\"sideBarUnderLay\"></div>\r\n            <div className={`sideBar ${side ? \"openBar\" : \"\"} ${whichMode ? \"\" : \"lightMode\"}`}>\r\n                <h2>\r\n                    Your List Set\r\n                    <MdClear\r\n                        size=\"1.5rem\"\r\n                        className=\"icon\"\r\n                        onClick={() => {\r\n                            setSide(false);\r\n                        }}\r\n                    />\r\n                </h2>\r\n                <ul>\r\n                    {list}\r\n                    <hr />\r\n                    <IconContext.Provider value={{ size: \"1.5rem\" }}>\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".newModal\").fadeIn();\r\n                                $(\".new\");\r\n                            }}\r\n                        >\r\n                            <MdAdd />\r\n                            <h3>Add New List</h3>\r\n                        </li>\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".clearListModal\").fadeIn();\r\n                            }}\r\n                        >\r\n                            <MdDeleteSweep />\r\n                            <h3>Clear All Lists</h3>\r\n                        </li>\r\n\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                setSide(false);\r\n                                changeMode();\r\n                                setModes(!modes);\r\n                            }}\r\n                        >\r\n                            {whichMode ? <FiSun fill=\"white\" /> : <FiMoon stroke=\"transparent\" />}\r\n                            <h3>Turn on {whichMode ? \"Light\" : \"Dark\"} Mode</h3>\r\n                        </li>\r\n                        <hr />\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".contactModal\").fadeIn();\r\n                            }}\r\n                        >\r\n                            <FiPhone\r\n                                fill={`${whichMode ? \"white\" : \"#333\"}`}\r\n                                style={{ strokeWidth: 0 }}\r\n                            />\r\n                            <h3>Contact Me</h3>\r\n                        </li>\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".donateModal\").fadeIn();\r\n                            }}\r\n                        >\r\n                            <FiHeart\r\n                                fill={`${whichMode ? \"white\" : \"#333\"}`}\r\n                                style={{ strokeWidth: 0 }}\r\n                            />\r\n                            <h3>Donate</h3>\r\n                        </li>\r\n                    </IconContext.Provider>\r\n                    <hr />\r\n                </ul>\r\n            </div>\r\n            {/* Sets name of New List */}\r\n            <div className=\"modalCont newModal right\">\r\n                <form\r\n                    className=\"modal\"\r\n                    onSubmit={(event) => {\r\n                        event.preventDefault();\r\n                        $(\".newModal\").fadeOut();\r\n                        $(\".Input\").val(null);\r\n                        addList();\r\n                        setSide(false);\r\n                    }}\r\n                >\r\n                    <h3>list Name</h3>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"Input\"\r\n                            name=\"inputBlock\"\r\n                            onChange={({ target: { value } }) => {\r\n                                setNewListName(value);\r\n                            }}\r\n                            autoComplete=\"off\"\r\n                            required={true}\r\n                        />\r\n                        <svg className=\"border\" viewBox=\"0 0 275.05 40\" preserveAspectRatio=\"none\">\r\n                            <path\r\n                                className=\"cls-1 path\"\r\n                                d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                            <path\r\n                                className=\"cls-2 path\"\r\n                                d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                        </svg>\r\n                        <span>List Name...</span>\r\n                    </div>\r\n                    <button className=\"modalBtn save\" type=\"submit\">\r\n                        <MdCheck />\r\n                        <span>Save</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn cancel\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            $(\".newModal\").fadeOut();\r\n                            $(\".Input\").val(null);\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n            {/* Renames a list */}\r\n            <div className=\"modalCont rename right\">\r\n                <form\r\n                    className=\"modal\"\r\n                    onSubmit={(event) => {\r\n                        event.preventDefault();\r\n                        $(\".rename\").fadeOut();\r\n                        $(\".Input\").val(null);\r\n                        updateList(currentListId);\r\n                        setCurrentListId(\"\");\r\n                    }}\r\n                >\r\n                    <h3>Rename Todo</h3>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"Input renamebox\"\r\n                            name=\"inputBlock\"\r\n                            onChange={({ target: { value } }) => {\r\n                                setRename(value);\r\n                            }}\r\n                            autoComplete=\"off\"\r\n                            required={true}\r\n                        />\r\n                        <svg className=\"border\" viewBox=\"0 0 275.05 40\" preserveAspectRatio=\"none\">\r\n                            <path\r\n                                className=\"cls-1 path\"\r\n                                d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                            <path\r\n                                className=\"cls-2 path\"\r\n                                d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <button className=\"modalBtn save\" type=\"submit\">\r\n                        <MdCheck />\r\n                        <span>Save</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn cancel\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            $(\".rename\").fadeOut();\r\n                            $(\".Input\").val(null);\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n            {/* delets a list */}\r\n            <div className=\"modalCont delete center\">\r\n                <div className=\"modal\">\r\n                    <MdDelete\r\n                        fontSize=\"3rem\"\r\n                        className=\"deleteIcon\"\r\n                        style={{ textShadow: \"0px 0px 5px red\" }}\r\n                    />\r\n                    <h3>Are you sure You want to Delete this List?</h3>\r\n                    <p>Entire List will be removed permanently</p>\r\n\r\n                    <button\r\n                        className=\"modalBtn cancel\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            $(\".delete\").fadeOut();\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn del\"\r\n                        type=\"submit\"\r\n                        onClick={() => {\r\n                            $(\".delete\").fadeOut();\r\n                            deleteList(currentListId);\r\n                            setSide(false);\r\n                        }}\r\n                    >\r\n                        <MdCheck />\r\n                        <span>OK</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {/* Clears all Lists */}\r\n            <div className=\"modalCont clearListModal center\">\r\n                <div className=\"modal\">\r\n                    <MdDeleteSweep fontSize=\"3rem\" className=\"deleteIcon\" />\r\n                    <h3>Are you sure You want to Clear All Your Lists?</h3>\r\n                    <p>All Lists will be removed permanently and Cannot be recovered!</p>\r\n                    <button\r\n                        className=\"modalBtn cancel\"\r\n                        onClick={() => {\r\n                            $(\".clearListModal\").fadeOut();\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn del\"\r\n                        onClick={() => {\r\n                            $(\".clearListModal\").fadeOut();\r\n                            clearList(currentListId);\r\n                            setSide(false);\r\n                        }}\r\n                    >\r\n                        <MdDeleteSweep />\r\n                        <span> Clear all Lists</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {/* Contact Me Section */}\r\n            <div className=\"modalCont contactModal\" style={{ display: \"none\", userSelect: \"text\" }}>\r\n                <div className=\"modal\">\r\n                    <MdClear\r\n                        className={\"icon closeModal\"}\r\n                        size=\"1.5rem\"\r\n                        onClick={() => {\r\n                            $(\".contactModal .Input\").val(null);\r\n                            $(\".contactModal\").fadeOut();\r\n                            $(\".contactModal .Input\").removeClass(\"err\");\r\n                            setFormStatus(\"send\");\r\n                        }}\r\n                    />\r\n\r\n                    <form\r\n                        className=\"contact\"\r\n                        onSubmit={(event) => {\r\n                            event.preventDefault();\r\n                            sendForm(event);\r\n                            setFormStatus(\"sending\");\r\n                        }}\r\n                    >\r\n                        <h3>Contact Me</h3>\r\n                        <div className=\"input-container\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"Input\"\r\n                                name=\"from_name\"\r\n                                autoComplete=\"off\"\r\n                                required={true}\r\n                            />\r\n                            <svg\r\n                                className=\"border\"\r\n                                viewBox=\"0 0 275.05 40\"\r\n                                preserveAspectRatio=\"none\"\r\n                            >\r\n                                <path\r\n                                    className=\"cls-1 path\"\r\n                                    d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                                <path\r\n                                    className=\"cls-2 path\"\r\n                                    d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                            </svg>\r\n                            <span>Full Name</span>\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <input\r\n                                type=\"email\"\r\n                                className=\"Input email\"\r\n                                name=\"from_email\"\r\n                                autoComplete=\"off\"\r\n                                required={true}\r\n                            />\r\n                            <svg\r\n                                className=\"border\"\r\n                                viewBox=\"0 0 275.05 40\"\r\n                                preserveAspectRatio=\"none\"\r\n                            >\r\n                                <path\r\n                                    className=\"cls-1 path\"\r\n                                    d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                                <path\r\n                                    className=\"cls-2 path\"\r\n                                    d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                            </svg>\r\n                            <span>email</span>\r\n                        </div>\r\n                        <div className=\"input-container message\">\r\n                            <textarea className=\"Input\" name=\"message\" required={true}></textarea>\r\n                            <svg\r\n                                className=\"border textarea\"\r\n                                viewBox=\"0 0 309 277\"\r\n                                preserveAspectRatio=\"none\"\r\n                            >\r\n                                <path\r\n                                    className=\"cls-1 path\"\r\n                                    d=\"M154.5,1.5h138a15,15,0,0,1,15,15v244a15,15,0,0,1-15,15h-138\"\r\n                                />\r\n                                <path\r\n                                    className=\"cls-2 path\"\r\n                                    d=\"M154.5,275.5H16.5a15,15,0,0,1-15-15V16.5a15,15,0,0,1,15-15h138\"\r\n                                />\r\n                            </svg>\r\n                            <span>Message</span>\r\n                        </div>\r\n                        {sendBtn}\r\n                    </form>\r\n                    <div className=\"social\">\r\n                        <a href=\"https://www.facebook.com/crimson.oluwatowo/\" className=\"facebook\">\r\n                            <FaFacebookF />\r\n                        </a>\r\n                        <a href=\"https://www.instagram.com/crimson_corp/\" className=\"instagram\">\r\n                            <FaInstagram />\r\n                        </a>\r\n                        <a href=\"m.me/oluwatowo_rosanwo\" className=\"messenger\">\r\n                            <FaFacebookMessenger />\r\n                        </a>\r\n                        <a\r\n                            href=\"https://api.whatsapp.com/send?phone=+2348024537884&text=Hi20%Crimson%20%\"\r\n                            className=\"whatsapp\"\r\n                        >\r\n                            <FaWhatsapp />\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* Donate Section */}\r\n            <div className=\"modalCont donateModal\" style={{ display: \"none\", userSelect: \"text\" }}>\r\n                <div className=\"modal\">\r\n                    <MdClear\r\n                        className={\"icon closeModal\"}\r\n                        size=\"1.5rem\"\r\n                        onClick={() => {\r\n                            $(\".donateModal\").fadeOut();\r\n                            setCopy(false);\r\n                        }}\r\n                    />\r\n\r\n                    <h3>Donate</h3>\r\n                    <div className=\"info-block\">\r\n                        <h4>- About Me</h4>\r\n                        <p>\r\n                            My Name is Oluwatowo Rosanwo Mayowa, I'm a 200L Student of The\r\n                            University Of Ibadan studying Food Technology, I started Web Development\r\n                            in 2018 and Now I'm a Self Taught Intermediate Full Stack Web Developer\r\n                            and Aspiring UI/UX Deisgner, Im also a Logo/Video Editor.\r\n                        </p>\r\n                        <p>\r\n                            I've had intense Self training on basics of Web Development which\r\n                            include HTML,CSS and Vanilla JAVASCRIPT, I Studied jQuery and React\r\n                            (This PWA was build With React), as well as back-end Frameworks Like\r\n                            NodeJS Express, and Database Query Language MySQL and Ive Built Projects\r\n                            With all These Technologies.\r\n                        </p>\r\n                        <p>\r\n                            I'm really good at solving problems and really bad at giving up on a\r\n                            project, I aspire to be hired as an Intern and Then gradute to Being a\r\n                            Frelance Developer.\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"info-block\">\r\n                        <h4>- Donate</h4>\r\n                        <p>\r\n                            Please if You really Like my Work and have a some money to spare, Kindly\r\n                            make a Donation To me as This will enhance my Progress and Productivity\r\n                            and also make me work harder and Develop more Apps that you will\r\n                            Definately find usefull\r\n                        </p>\r\n                    </div>\r\n\r\n                    <h4>Account Details:</h4>\r\n                    <pre>\r\n                        Bank: First Bank <br />\r\n                        Account Number: <span id=\"acc\">3123872415</span> <br />\r\n                        Account Name: Oluwatowo Rosanwo <br />\r\n                    </pre>\r\n                    <button\r\n                        className={`copy modalBtn sendBtn ${copy ? \"sent\" : \"send\"}`}\r\n                        onClick={() => {\r\n                            var temp = $(\"<input>\");\r\n                            $(\".donateModal .modal\").append(temp);\r\n                            temp.val($(\"#acc\").text()).select();\r\n                            document.execCommand(\"copy\");\r\n                            temp.remove();\r\n                            setCopy(true);\r\n                            copyComp();\r\n                        }}\r\n                    >\r\n                        {copy ? (\r\n                            <>\r\n                                <MdCheck />\r\n                                <span>Copied</span>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <FiCopy />\r\n                                <span>Copy Account Number</span>\r\n                            </>\r\n                        )}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default OuterControl;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport App from \"./App\";\r\nimport uuid from \"uuid\";\r\nimport OuterControl from \"./OuterControl\";\r\nimport { MdDehaze } from \"react-icons/md\";\r\nimport \"animate.css\";\r\nimport emailjs from \"emailjs-com\";\r\n\r\nfunction Main() {\r\n    const [app, setApp] = useState(() => {\r\n        var ListLocal = localStorage.getItem(\"AppLocal\");\r\n        if (ListLocal === null || ListLocal === undefined) return [];\r\n        else return JSON.parse(ListLocal);\r\n    });\r\n    const [currentList, setCurrentList] = useState(() => {\r\n        var index = localStorage.getItem(\"Index\");\r\n        if (index === null || index === undefined) return 0;\r\n        else return Number.parseInt(index);\r\n    });\r\n    const [newListName, setNewListName] = useState(\"\");\r\n    const [reName, setRename] = useState(\"\");\r\n    const [whichMode, setwhichMode] = useState(() => {\r\n        var mode = localStorage.getItem(\"mode\");\r\n        if (mode === undefined || mode === null) return true;\r\n        else return JSON.parse(mode.toLowerCase());\r\n    });\r\n    const [formStatus, setFormStatus] = useState(\"send\");\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"AppLocal\", JSON.stringify(app));\r\n    }, [app]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"Index\", JSON.stringify(currentList));\r\n    }, [currentList]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"mode\", whichMode);\r\n    }, [whichMode]);\r\n\r\n    function addList() {\r\n        let NewListProps = {\r\n            id: uuid.v4(),\r\n            name: newListName,\r\n        };\r\n        setCurrentList(app.length);\r\n        setApp((prev) => {\r\n            return [...prev, NewListProps];\r\n        });\r\n    }\r\n\r\n    function updateList(id) {\r\n        setApp(\r\n            app.map((app) => {\r\n                if (app.id === id) app.name = reName;\r\n                return app;\r\n            })\r\n        );\r\n    }\r\n\r\n    function deleteList(id) {\r\n        localStorage.removeItem(id);\r\n        var filteredList = app.filter((app) => app.id !== id);\r\n        setCurrentList(filteredList.length - 1);\r\n        setApp(filteredList);\r\n    }\r\n    function clearList() {\r\n        setApp([]);\r\n        localStorage.clear();\r\n    }\r\n\r\n    function changeMode() {\r\n        setwhichMode(!whichMode);\r\n    }\r\n    function sendForm(form) {\r\n        emailjs\r\n            .sendForm(\r\n                process.env.REACT_APP_Service_id,\r\n                process.env.REACT_APP_template_id,\r\n                form.target,\r\n                process.env.REACT_APP_User_ID\r\n            )\r\n            .then((res) => {\r\n                if (res.status === 1 || res.text === \"OK\") setFormStatus(\"sent\");\r\n                else throw res;\r\n            })\r\n            .catch((err) => {\r\n                if (err) setFormStatus(\"error\");\r\n            });\r\n    }\r\n\r\n    var content;\r\n    app.length <= 0\r\n        ? (content = (\r\n              <div className=\"noList\">\r\n                  <div>\r\n                      <h1>No Lists</h1>\r\n                      <p>\r\n                          Click <MdDehaze size=\"1.2rem\" style={{ margin: \"0 5px\" }} /> to make a\r\n                          List\r\n                      </p>\r\n                  </div>\r\n              </div>\r\n          ))\r\n        : (content = <App key={app[currentList].id} props={{ app: app[currentList] }} />);\r\n\r\n    return (\r\n        <div className={`main ${whichMode ? \"\" : \"light\"}`}>\r\n            <OuterControl\r\n                props={{\r\n                    app,\r\n                    setNewListName,\r\n                    addList,\r\n                    setCurrentList,\r\n                    setRename,\r\n                    updateList,\r\n                    deleteList,\r\n                    currentList,\r\n                    clearList,\r\n                    changeMode,\r\n                    whichMode,\r\n                    sendForm,\r\n                    formStatus,\r\n                    setFormStatus,\r\n                }}\r\n            />\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.css\";\r\nimport \"react-notifications-component/dist/theme.css\";\r\nimport \"animate.css/animate.compat.css\";\r\nimport Main from \"./Components/Main\";\r\nimport ReactNotification from \"react-notifications-component\";\r\nimport \"react-notifications-component/dist/theme.css\";\r\nimport \"animate.css/animate.compat.css\";\r\n\r\n// import Test from \"./Test\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nReactDOM.render(\r\n    <>\r\n        <ReactNotification className=\"notif\" />\r\n        <Main />\r\n    </>,\r\n    document.getElementById(\"root\")\r\n);\r\nserviceWorker.register();\r\n"],"sourceRoot":""}