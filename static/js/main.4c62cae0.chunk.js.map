{"version":3,"sources":["Components/Inner Component/Input.js","Components/Inner Component/EachTodo.js","Components/Inner Component/List.js","Components/Inner Component/Control.js","Components/App.js","Components/OuterControl.js","Components/Main.js","serviceWorker.js","index.js"],"names":["Input","props","sendProps","setInput","className","onSubmit","type","name","placeholder","onChange","autoComplete","required","fill","EachTodo","id","completed","Todo","updateTodo","removeTodo","comp","data-id","checked","viewBox","d","points","style","opacity","textDecoration","transform","fontWeight","onClick","List","TodoListArray","filtered","whichMode","mode","TodoBlocks","map","eachTodo","index","key","length","Control","progress","clearDone","done","statusHandler","status","x1","y1","x2","y2","offset","stopColor","cx","cy","r","strokeDashoffset","strokeWidth","disabled","value","App","app","useState","setTodo","TodoLocal","localStorage","getItem","undefined","JSON","parse","setTodoListArray","setDone","setProgress","setFiltered","setStatus","Trans","x","$","css","useEffect","DoneTodos","filter","arr","Math","floor","isNaN","FilterLogic","setItem","stringify","background","white","color","darktext","lighttext","target","event","preventDefault","inputBox","todo","trim","val","focus","alert","uuid","v4","prev","OuterControl","setNewListName","addList","setCurrentList","setRename","updateList","deleteList","currentList","clearList","changeMode","side","setSide","list","setList","currentListId","setCurrentListId","modes","setModes","Provider","size","persist","tagName","removeClass","addClass","fadeIn","click","dimbg","lightbg4","boxShadow","backgroundColor","display","fadeOut","marginLeft","textAlign","fontSize","textShadow","userSelect","temp","append","text","select","document","execCommand","remove","Main","content","ListLocal","setApp","Number","parseInt","newListName","reName","setwhichMode","lightbg","dimbg4","NewListProps","removeItem","filteredList","clear","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+QAGe,SAASA,EAAT,GAAoD,IAAD,IAAlCC,MAASC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,SAChD,OACI,0BAAMC,UAAU,aAAaC,SAAUH,GACnC,yBAAKE,UAAU,mBACX,2BACIA,UAAU,WACVE,KAAK,OACLC,KAAK,aACLC,YAAY,4BACZC,SAAUN,EACVO,aAAa,MACbC,SAAS,aAEb,yBAAKP,UAAU,WAEnB,4BAAQA,UAAU,OAAOE,KAAK,UAC1B,kBAAC,IAAD,CAAOM,KAAK,OAAOR,UAAU,WCuC9BS,MAvDf,YAMI,IAAD,IALCZ,MAKD,IAJKY,SAAYC,EAIjB,EAJiBA,GAAIC,EAIrB,EAJqBA,UAAWC,EAIhC,EAJgCA,KAC3BC,EAGL,EAHKA,WACAC,EAEL,EAFKA,WAGAC,EAAOJ,EAMX,OACI,yBAAKX,UAAU,QAAQgB,UAAA,UAAYN,IAC/B,+BACI,2BACIR,KAAK,WACLc,UAAA,UAAYN,GACZO,QAASF,EACTV,SAAU,WACNQ,EAAWH,MAGnB,yBAAKV,UAAU,QACX,yBAAKA,UAAU,sBACX,yBAAKkB,QAAQ,cAAclB,UAAU,YACjC,0BACIA,UAAU,MACVmB,EAAE,+FAEN,8BAAUnB,UAAU,QAAQoB,OAAO,qCAG3C,0BAAMC,MAAON,EA1BlB,CACPO,QAAS,GACTC,eAAgB,gBAwBuB,MACtBX,EADL,IACW,0BAAMZ,UAAU,aAInC,kBAAC,IAAD,CACIA,UAAW,QACXQ,KAAK,MACLa,MAAO,CACHG,UAAWT,EAAO,WAAa,WAC/BU,WAAY,UAEhBC,QAAS,WACLZ,EAAWJ,IAEfM,UAASN,MCjDV,SAASiB,EAAT,GAEX,IAAD,IADC9B,MAASiB,EACV,EADUA,WAAYD,EACtB,EADsBA,WAAYe,EAClC,EADkCA,cAAeC,EACjD,EADiDA,SAAgBC,GACjE,EAD2DC,KAC3D,EADiED,WAE5DE,EAAaH,EAASI,KAAI,SAACC,EAAUC,GACrC,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLtC,MAAO,CACHY,SAAUyB,EACVrB,WAAYA,EACZC,WAAYA,QAM5B,OACI,yBAAKd,UAAS,wBAAmB8B,EAAY,WAAa,cAC5B,IAAzBF,EAAcS,OAAe,GAAKL,GCnBhC,SAASM,EAAT,GAEX,IAAD,IADCzC,MAAS0C,EACV,EADUA,SAAUX,EACpB,EADoBA,cAAeY,EACnC,EADmCA,UAAWC,EAC9C,EAD8CA,KAAMC,EACpD,EADoDA,cAAeC,EACnE,EADmEA,OAAcb,GACjF,EAD2EC,KAC3E,EADiFD,WAEhF,OACI,yBAAK9B,UAAU,WACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,WACX,6BACI,oCAAgBU,GAAG,OAAOkC,GAAG,IAAIC,GAAG,IAAIC,GAAG,OAAOC,GAAG,QACjD,0BAAMC,OAAO,KAAKC,UAAU,YAC5B,0BAAMD,OAAO,OAAOC,UAAU,aAElC,4BAAQC,GAAG,MAAMC,GAAG,MAAMC,EAAE,KAAKpD,UAAU,gBAE3C,4BACIkD,GAAG,MACHC,GAAG,MACHC,EAAE,KACFpD,UAAU,cACVqB,MAAO,CACHgC,iBACI,mBAAsB,mBAAqBd,EAAY,IAC3De,YAA0B,IAAbf,EAAiB,MAAQ,WAIlD,yBAAKvC,UAAS,iBAAY8B,EAAY,WAAa,cACjC,IAAbS,GAA2C,IAAzBX,EAAcS,OAC7B,oCACI,4BACKE,EACD,0BAAMvC,UAAU,QAAhB,MAEJ,0BAAMA,UAAU,QAAhB,cAGJ,wBAAIA,UAAU,SAAd,cAKhB,yBAAKA,UAAU,WACX,4BACI0B,QAASc,EACTe,SAAmB,IAATd,EACVzC,UAAoB,IAATyC,EAAa,UAAY,SAHxC,qBAOA,4BAAQtC,KAAK,SAASO,GAAG,SAASL,SAAUqC,EAAec,MAAOb,GAC9D,4BAAQa,MAAM,OAAd,OACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,eAAd,kB,oBC/CL,SAASC,EAAT,GAAmD,IAAD,IAAnC5D,MAAS6D,EAA0B,EAA1BA,IAAK3B,EAAqB,EAArBA,KAAMD,EAAe,EAAfA,UAAe,EAChD6B,mBAASD,EAAIhD,IAAnBA,EADsD,sBAErCiD,mBAAS,IAF4B,mBAEtD/C,EAFsD,KAEhDgD,EAFgD,OAGnBD,oBAAS,WAC/C,IAAIE,EAAYC,aAAaC,QAAQrD,GACrC,OAAkB,OAAdmD,QAAoCG,IAAdH,EAAgC,GAC9CI,KAAKC,MAAML,MANkC,mBAGtDjC,EAHsD,KAGvCuC,EAHuC,OAQrCR,mBAAS,GAR4B,mBAQtDlB,EARsD,KAQhD2B,EARgD,OAS7BT,mBAAS,IAToB,mBAStDpB,EATsD,KAS5C8B,EAT4C,OAU7BV,mBAAS,IAVoB,mBAUtD9B,EAVsD,KAU5CyC,EAV4C,OAWjCX,mBAAS,OAXwB,mBAWtDhB,EAXsD,KAW9C4B,EAX8C,KA6C7D,SAASC,EAAMC,GACPA,GACAC,IAAE,kBAAkBC,IAAI,aAAc,OACtCD,IAAE,UAAUC,IAAI,aAAc,SAE9BD,IAAE,kBAAkBC,IAAI,aAAc,QACtCD,IAAE,UAAUC,IAAI,aAAc,SAgDtC,OAtFAC,qBAAU,WACN,IAAMC,EAAYjD,EAAckD,QAAO,SAACC,GAAD,OAA2B,IAAlBA,EAAIpE,aAChD4B,EAAWyC,KAAKC,MAAOJ,EAAUxC,OAAST,EAAcS,OAAU,KAClE6C,MAAM3C,KAAWA,EAAW,GAChC8B,EAAY9B,GACZ6B,EAAQS,EAAUxC,UACnB,CAACE,EAAUX,IAEdgD,qBAAU,YACN,WACI,OAAQjC,GACJ,IAAK,YACD2B,EAAY1C,EAAckD,QAAO,SAACC,GAAD,OAA2B,IAAlBA,EAAIpE,cAC9C,MACJ,IAAK,cACD2D,EAAY1C,EAAckD,QAAO,SAACC,GAAD,OAA2B,IAAlBA,EAAIpE,cAC9C,MACJ,QACI2D,EAAY1C,IAGxBuD,KACD,CAACvD,EAAee,IAEnBiC,qBAAU,WACNJ,GAAM,KACP,CAAC7B,IAEJiC,qBAAU,WACNd,aAAasB,QAAQ1E,EAAIuD,KAAKoB,UAAUzD,MACzC,CAACA,EAAelB,IAyDf,yBACIV,UAAU,YACVqB,MAAO,CAAEiE,WAAYxD,EAAY,qBAAuBC,EAAKwD,QAE7D,wBAAIvF,UAAU,WAAWqB,MAAO,CAAEmE,MAAO1D,EAAYC,EAAK0D,SAAW1D,EAAK2D,YACrEhC,EAAIvD,MAET,kBAACmC,EAAD,CACIzC,MAAO,CACH0C,SAAUA,EACVX,cAAeA,EACfY,UArBhB,WACIgC,GAAM,GACNL,EAAiBvC,EAAckD,QAAO,SAACC,GAAD,OAA2B,IAAlBA,EAAIpE,eAoBvC8B,KAAMA,EACNE,OAAQA,EACRD,cAnBhB,YAA+C,IAAZc,EAAW,EAArBmC,OAAUnC,MAC/Be,EAAUf,IAmBEzB,KAAMA,EACND,UAAWA,KAGnB,kBAAClC,EAAD,CACIC,MAAO,CACHC,UAlEhB,SAAmB8F,GACfA,EAAMC,iBACN,IAAIC,EAAWpB,IAAE,aACLqB,EAASnF,EAAfA,KACN,GAAoB,KAAhBmF,EAAKC,aAAiChC,IAAhB+B,EAAKC,OAE3B,OADAF,EAASG,IAAI,MAAMC,QACZC,MAAM,uBAEjBvF,EAAKF,GAAK0F,IAAKC,KACfzF,EAAKD,WAAY,EACjBwD,GAAiB,SAACmC,GAAD,4BAAcA,GAAd,CAAoB1F,OACrCkF,EAASG,IAAI,MAAMC,QACnBtC,EAAQ,IACRW,EAAU,QAsDExE,SAnDhB,YAA0C,IAAZyD,EAAW,EAArBmC,OAAUnC,MAC1BI,EAAQ,CAAEhD,KAAM4C,KAmDJ1B,UAAWA,EACXC,KAAMA,KAGd,kBAACJ,EAAD,CACI9B,MAAO,CACHiB,WA5ChB,SAAoBJ,GAChB8D,GAAM,GACNL,EAAiBvC,EAAckD,QAAO,SAACC,GAAD,OAASA,EAAIrE,KAAOA,OA2C9CG,WAvDhB,SAAoBH,GAChB8D,GAAM,GACNL,EACIvC,EAAcK,KAAI,SAAC8C,GAEf,OADIA,EAAIrE,KAAOA,IAAIqE,EAAIpE,WAAaoE,EAAIpE,WACjCoE,OAmDHnD,cAAeA,EACfC,SAAUA,EACVC,UAAWA,EACXC,KAAMA,M,kBCwQXwE,MA/Yf,YAeI,IAAD,IAdC1G,MACI6D,EAaL,EAbKA,IACA8C,EAYL,EAZKA,eACAC,EAWL,EAXKA,QACAC,EAUL,EAVKA,eACAC,EASL,EATKA,UACAC,EAQL,EARKA,WACAC,EAOL,EAPKA,WACAC,EAML,EANKA,YACAC,EAKL,EALKA,UACAC,EAIL,EAJKA,WACAjF,EAGL,EAHKA,KACAD,EAEL,EAFKA,UAEL,EACyB6B,oBAAS,GADlC,mBACQsD,EADR,KACcC,EADd,OAEyBvD,mBAAS,IAFlC,mBAEQwD,EAFR,KAEcC,EAFd,OAG2CzD,mBAAS,IAHpD,mBAGQ0D,EAHR,KAGuBC,EAHvB,OAI2B3D,oBAAS,GAJpC,mBAIQ4D,EAJR,KAIeC,EAJf,KA4DC,OAtDA5C,qBAAU,WACN,IAAIuC,EAAOzD,EAAIzB,KAAI,SAACyB,EAAKvB,GACrB,OACI,kBAAC,IAAYsF,SAAb,CAAsBjE,MAAO,CAAEkE,KAAM,UAAYtF,IAAKD,GAClD,wBACInC,UAAS,kBAAa8B,EAAY,OAAS,SAC3Cd,UAAS0C,EAAIhD,GACbgB,QAAS,SAACkE,GACNA,EAAM+B,UACuB,QAAzB/B,EAAMD,OAAOiC,SAA8C,SAAzBhC,EAAMD,OAAOiC,UAGnDlB,EAAevE,GACf+E,GAAQ,GACRxC,IAAE,YAAYmD,YAAY,UAC1BnD,IAAE,qBAAD,OAAsBhB,EAAIhD,GAA1B,OAAkCoH,SAAS,aAGhD,kBAAC,IAAD,CAAQ9H,UAAU,OAAOQ,KAAMsB,EAAY,QAAU,SACrD,4BAAK4B,EAAIvD,MACT,kBAAC,IAAD,CACIa,UAAS0C,EAAIhD,GACbV,UAAU,YACVQ,KAAMsB,EAAY,QAAU,OAC5BJ,QAAS,WACLgD,IAAE,WAAWqD,SACbrD,IAAE,cAAcwB,QAChBoB,EAAiB5D,EAAIhD,OAG7B,kBAAC,IAAD,CACIV,UAAU,kBACVQ,KAAK,MACLQ,UAAS0C,EAAIhD,GACbgB,QAAS,WACLgD,IAAE,WAAWqD,SACbT,EAAiB5D,EAAIhD,YAO7C0G,EAAQD,KACT,CAACzD,EAAKgD,EAAgB5E,IAErBmF,GACAvC,IAAE,cAAcsD,OAAM,WAClBd,GAAQ,MAIhBxC,IAAE,YAAYmD,YAAY,UAC1BnD,IAAE,eAAD,OAAgBoC,EAAhB,MAAgCgB,SAAS,UAEtC,oCACI,yBACI9H,UAAW,MACXqB,MAAO,CACHiE,WAAYxD,EAAYC,EAAKkG,MAAQlG,EAAKmG,SAC1CC,UAAWrG,EACL,kCACA,mCAGV,kBAAC,IAAD,CACI4F,KAAK,SACL1H,UAAU,OACVQ,KAAMsB,EAAY,QAAU,OAC5BJ,QAAS,WACLwF,GAAQ,OAIpB,yBACIlH,UAAS,kBAAaiH,EAAO,UAAY,WAAhC,YACLnF,EAAY,WAAa,cAG7B,wBACIT,MAAO,CACHmE,MAAO1D,EAAY,QAAUC,EAAKkG,MAClC3C,WAAYxD,EAAY,qBAAuBC,EAAKmG,WAH5D,gBAOI,kBAAC,IAAD,CACIR,KAAK,SACL1H,UAAU,OACVQ,KAAMsB,EAAY,QAAU,OAC5BJ,QAAS,WACLwF,GAAQ,OAIpB,4BACKC,EACD,wBACI9F,MAAO,CACH+G,gBAAiBtG,EACX,2BACA,wBAGd,kBAAC,IAAY2F,SAAb,CACIjE,MAAO,CAAEkE,KAAM,SAAUlC,MAAO1D,EAAY,QAAU,SAEtD,wBACI9B,UAAS,yBAAoB8B,EAAY,OAAS,QAAzC,KACTJ,QAAS,WACLgD,IAAE,aAAaqD,SACfrD,IAAE,QAAQwB,UAGd,kBAAC,IAAD,CAAO1F,KAAMsB,EAAY,QAAU,SACnC,6CAEJ,wBACI9B,UAAS,4BAAuB8B,EAAY,OAAS,SACrDJ,QAAS,WACLgD,IAAE,mBAAmBqD,WAGzB,kBAAC,IAAD,CAAevH,KAAMsB,EAAY,QAAU,SAC3C,gDAEJ,wBACIT,MAAO,CACH+G,gBAAiBtG,EACX,2BACA,wBAGd,wBACI9B,UAAS,0BAAqB8B,EAAY,OAAS,SACnDJ,QAAS,WACLwF,GAAQ,GACRF,IACAQ,GAAUD,KAGbzF,EAAY,kBAAC,IAAD,CAAOtB,KAAK,UAAa,kBAAC,IAAD,CAAQA,KAAK,SACnD,uCAAasB,EAAY,QAAU,OAAnC,UAEJ,wBACI9B,UAAS,yBAAoB8B,EAAY,OAAS,SAClDJ,QAAS,WACLgD,IAAE,gBAAgBqD,WAGtB,kBAAC,IAAD,CAASvH,KAAMsB,EAAY,QAAU,SACrC,wCAGR,wBACIT,MAAO,CACH+G,gBAAiBtG,EACX,2BACA,0BAOtB,yBAAK9B,UAAS,qBAAwBqB,MAAO,CAAEgH,QAAS,SACpD,0BACIrI,UAAU,QACVC,SAAU,SAAC2F,GACPA,EAAMC,iBACNnB,IAAE,aAAa4D,UACf5D,IAAE,aAAauB,IAAI,MACnBQ,IACAS,GAAQ,KAGZ,kBAAC,IAAD,CACIlH,UAAW,OACXqB,MAAO,CACHgH,QAAS,QACTE,WAAY,QAEhB7G,QAAS,WACLgD,IAAE,aAAa4D,UACf5D,IAAE,aAAauB,IAAI,SAI3B,qDACA,yBAAKjG,UAAU,mBACX,2BACIA,UAAU,eACVE,KAAK,OACLC,KAAK,aACLC,YAAY,UACZE,aAAa,MACbC,UAAU,EACVF,SAAU,YAA4B,IAAfmD,EAAc,EAAxBmC,OAAUnC,MACnBgD,EAAehD,MAGvB,yBAAKxD,UAAU,WAEnB,4BAAQA,UAAU,UAAUE,KAAK,UAAjC,cAMR,yBAAKF,UAAU,mBAAmBqB,MAAO,CAAEgH,QAAS,SAChD,0BACIrI,UAAU,QACVC,SAAU,SAAC2F,GACPA,EAAMC,iBAENnB,IAAE,WAAW4D,UACb5D,IAAE,aAAauB,IAAI,MACnBW,EAAWS,GACXC,EAAiB,MAGrB,kBAAC,IAAD,CACItH,UAAW,OACXqB,MAAO,CACHgH,QAAS,QACTE,WAAY,QAEhB7G,QAAS,WACLgD,IAAE,WAAW4D,UACb5D,IAAE,aAAauB,IAAI,SAI3B,2CACA,yBAAKjG,UAAU,mBACX,2BACIA,UAAU,qBACVE,KAAK,OACLC,KAAK,aACLC,YAAY,cACZE,aAAa,MACbC,UAAU,EACVF,SAAU,YAA4B,IAAfmD,EAAc,EAAxBmC,OAAUnC,MACnBmD,EAAUnD,MAGlB,yBAAKxD,UAAU,WAEnB,4BAAQA,UAAU,UAAUE,KAAK,UAAjC,cAMR,yBAAKF,UAAU,mBAAmBqB,MAAO,CAAEgH,QAAS,SAChD,yBAAKrI,UAAU,QAAQqB,MAAO,CAAEmH,UAAW,WACvC,kBAAC,IAAD,CACIC,SAAS,OACTjI,KAAK,MACLa,MAAO,CAAEqH,WAAY,qBAEzB,0EACA,sEAEA,4BACI1I,UAAU,kBACV0B,QAAS,WACLgD,IAAE,WAAW4D,UACb5D,IAAE,aAAauB,IAAI,MACnBY,EAAWQ,GACXH,GAAQ,GACRI,EAAiB,MAPzB,MAYA,4BACItH,UAAU,eACV0B,QAAS,WACLgD,IAAE,WAAW4D,UACb5D,IAAE,aAAauB,IAAI,MACnBqB,EAAiB,MALzB,YAaR,yBAAKtH,UAAU,2BAA2BqB,MAAO,CAAEgH,QAAS,SACxD,yBAAKrI,UAAU,QAAQqB,MAAO,CAAEmH,UAAW,WACvC,kBAAC,IAAD,CACIC,SAAS,OACTjI,KAAK,MACLR,UAAU,OACVqB,MAAO,CAAEqH,WAAY,qBAEzB,8EACA,6FAEA,4BACI1I,UAAU,kBACV0B,QAAS,WACLgD,IAAE,mBAAmB4D,UACrBvB,EAAUM,KAJlB,mBASA,4BACIrH,UAAU,eACV0B,QAAS,WACLgD,IAAE,mBAAmB4D,YAH7B,YAWR,yBAAKtI,UAAU,wBAAwBqB,MAAO,CAAEgH,QAAS,OAAQM,WAAY,SACzE,yBAAK3I,UAAU,SACX,kBAAC,IAAD,CACIA,UAAW,OACXqB,MAAO,CACHgH,QAAS,QACTE,WAAY,QAEhB7G,QAAS,WACLgD,IAAE,gBAAgB4D,aAI1B,sCACA,yBAAKtI,UAAU,cACX,0CACA,mRAOJ,yBAAKA,UAAU,cACX,wCACA,4QAQJ,gDACA,iDACqB,6BADrB,mBAEoB,0BAAMU,GAAG,OAAT,cAFpB,IAEqD,6BAFrD,mCAGoC,8BAEpC,4BACIV,UAAU,OACV0B,QAAS,WACL,IAAIkH,EAAOlE,IAAE,WACbA,IAAE,uBAAuBmE,OAAOD,GAChCA,EAAK3C,IAAIvB,IAAE,QAAQoE,QAAQC,SAC3BC,SAASC,YAAY,QACrBL,EAAKM,SACL/C,MAAM,+CARd,2B,MC9QLgD,MA1Gf,WAAiB,IAmETC,EAnEQ,EACUzF,oBAAS,WAC3B,IAAI0F,EAAYvF,aAAaC,QAAQ,YACrC,OAAkB,OAAdsF,QAAoCrF,IAAdqF,EAAgC,GAC9CpF,KAAKC,MAAMmF,MAJf,mBACL3F,EADK,KACA4F,EADA,OAM0B3F,oBAAS,WAC3C,IAAIxB,EAAQ2B,aAAaC,QAAQ,SACjC,OAAc,OAAV5B,QAA4B6B,IAAV7B,EAA4B,EACtCoH,OAAOC,SAASrH,MATpB,mBAML2E,EANK,KAMQJ,EANR,OAW0B/C,mBAAS,IAXnC,mBAWL8F,EAXK,KAWQjD,EAXR,OAYgB7C,mBAAS,IAZzB,mBAYL+F,EAZK,KAYG/C,EAZH,OAasBhD,oBAAS,GAb/B,mBAaL7B,EAbK,KAaM6H,EAbN,OAcGhG,mBAAS,CACpB+B,UAAW,OACXH,MAAO,UACPqE,QAAS,UACT1B,SAAU,UACVzC,SAAU,QACVwC,MAAO,OACP4B,OAAQ,SAPL9H,EAdK,oBAoFZ,OA5DA6C,qBAAU,WACNd,aAAasB,QAAQ,WAAYnB,KAAKoB,UAAU3B,MACjD,CAACA,IAEJkB,qBAAU,WACNd,aAAasB,QAAQ,QAASnB,KAAKoB,UAAUyB,MAC9C,CAACA,IAuCGsC,EADP1F,EAAIrB,QAAU,EAEJ,yBAAKrC,UAAU,UACX,wCACA,oCACU,kBAAC,IAAD,CAAUA,UAAU,QAD9B,oBAMJ,kBAACyD,EAAD,CACIrB,IAAKsB,EAAIoD,GAAapG,GACtBb,MAAO,CAAE6D,IAAKA,EAAIoD,GAAc/E,KAAMA,EAAMD,UAAWA,KAKjE,6BACI,kBAAC,EAAD,CACIjC,MAAO,CACH6D,IAAKA,EACL8C,eAAgBA,EAChBC,QA1DhB,WACI,IAAIqD,EAAe,CACfpJ,GAAI0F,IAAKC,KACTlG,KAAMsJ,GAEV/C,EAAehD,EAAIrB,QACnBiH,GAAO,SAAChD,GACJ,MAAM,GAAN,mBAAWA,GAAX,CAAiBwD,QAoDTpD,eAAgBA,EAChBC,UAAWA,EACXC,WAlDhB,SAAoBlG,GAChB4I,EACI5F,EAAIzB,KAAI,SAACyB,GAEL,OADIA,EAAIhD,KAAOA,IAAIgD,EAAIvD,KAAOuJ,GACvBhG,OA+CHmD,WA1ChB,SAAoBnG,GAChBoD,aAAaiG,WAAWrJ,GACxB,IAAIsJ,EAAetG,EAAIoB,QAAO,SAACpB,GAAD,OAASA,EAAIhD,KAAOA,KAClDgG,EAAesD,EAAa3H,OAAS,GACrCiH,EAAOU,IAuCKlD,YAAaA,EACbC,UAtChB,WACIuC,EAAO,IACPxF,aAAamG,SAqCDjD,WAlChB,WACI2C,GAAc7H,IAkCFC,KAAMA,EACND,UAAWA,KAGlBsH,ICpGPc,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC3FjEC,IAASC,OAAO,kBAAC,EAAD,MAAU7C,SAAS8C,eAAe,SDiB3C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,kBAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,kBAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAAS3J,QACO,MAAf4J,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7BV,OAAOC,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC5C/BE,K","file":"static/js/main.4c62cae0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MdAdd } from \"react-icons/md\";\r\n\r\nexport default function Input({ props: { sendProps, setInput } }) {\r\n    return (\r\n        <form className=\"inputBlock\" onSubmit={sendProps}>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    className=\"inputBox\"\r\n                    type=\"text\"\r\n                    name=\"inputBlock\"\r\n                    placeholder=\"What Do you want Todo?...\"\r\n                    onChange={setInput}\r\n                    autoComplete=\"off\"\r\n                    required=\"required\"\r\n                />\r\n                <div className=\"input\"></div>\r\n            </div>\r\n            <button className=\"plus\" type=\"submit\">\r\n                <MdAdd fill=\"#222\" className=\"icon\" />\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { MdClear } from \"react-icons/md\";\r\n\r\nfunction EachTodo({\r\n    props: {\r\n        EachTodo: { id, completed, Todo },\r\n        updateTodo,\r\n        removeTodo,\r\n    },\r\n}) {\r\n    var comp = completed;\r\n    var Done = {\r\n        opacity: 0.4,\r\n        textDecoration: \"line-through\",\r\n    };\r\n\r\n    return (\r\n        <div className=\"label\" data-id={`${id}`}>\r\n            <label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    data-id={`${id}`}\r\n                    checked={comp}\r\n                    onChange={() => {\r\n                        updateTodo(id);\r\n                    }}\r\n                />\r\n                <div className=\"Todo\">\r\n                    <div className=\"checkbox-container\">\r\n                        <svg viewBox=\"0 0 100 100\" className=\"checkbox\">\r\n                            <path\r\n                                className=\"st0\"\r\n                                d=\"M85,92H15c-3.9,0-7-3.1-7-7V15c0-3.9,3.1-7,7-7h70c3.9,0,7,3.1,7,7v70C92,88.9,88.9,92,85,92z\"\r\n                            />\r\n                            <polyline className=\"check\" points=\"22.5,47.5 42.5,67.5 78.5,31.5 \" />\r\n                        </svg>\r\n                    </div>\r\n                    <span style={comp ? Done : null}>\r\n                        {Todo} <span className=\"cross\"></span>\r\n                    </span>\r\n                </div>\r\n            </label>\r\n            <MdClear\r\n                className={\"close\"}\r\n                fill=\"red\"\r\n                style={{\r\n                    transform: comp ? \"scale(1)\" : \"scale(0)\",\r\n                    fontWeight: \"bolder\",\r\n                }}\r\n                onClick={() => {\r\n                    removeTodo(id);\r\n                }}\r\n                data-id={id}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EachTodo;\r\n","import React from \"react\";\r\nimport EachTodo from \"./EachTodo\";\r\n\r\nexport default function List({\r\n    props: { removeTodo, updateTodo, TodoListArray, filtered, mode, whichMode },\r\n}) {\r\n    var TodoBlocks = filtered.map((eachTodo, index) => {\r\n        return (\r\n            <EachTodo\r\n                key={index}\r\n                props={{\r\n                    EachTodo: eachTodo,\r\n                    updateTodo: updateTodo,\r\n                    removeTodo: removeTodo,\r\n                }}\r\n            />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className={`listContainer ${whichMode ? \"darkMode\" : \"LightMode\"}`}>\r\n            {TodoListArray.length === 0 ? \"\" : TodoBlocks}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Control({\r\n    props: { progress, TodoListArray, clearDone, done, statusHandler, status, mode, whichMode },\r\n}) {\r\n    return (\r\n        <div className=\"control\">\r\n            <div className=\"box\">\r\n                <div className=\"percent\">\r\n                    <svg>\r\n                        <linearGradient id=\"grad\" x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"100%\">\r\n                            <stop offset=\"0%\" stopColor=\"#ff0612\"></stop>\r\n                            <stop offset=\"100%\" stopColor=\"#6544ff\"></stop>\r\n                        </linearGradient>\r\n                        <circle cx=\"50%\" cy=\"50%\" r=\"40\" className=\"dark circle\"></circle>\r\n\r\n                        <circle\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            r=\"40\"\r\n                            className=\"grad circle\"\r\n                            style={{\r\n                                strokeDashoffset:\r\n                                    250.92137145996094 - (250.92137145996094 * progress) / 100,\r\n                                strokeWidth: progress === 0 ? \"0px\" : \"10px\",\r\n                            }}\r\n                        ></circle>\r\n                    </svg>\r\n                    <div className={`number ${whichMode ? \"darkMode\" : \"LightMode\"}`}>\r\n                        {progress !== 0 || TodoListArray.length !== 0 ? (\r\n                            <>\r\n                                <h2>\r\n                                    {progress}\r\n                                    <span className=\"perc\">%</span>\r\n                                </h2>\r\n                                <span className=\"comp\">completed</span>\r\n                            </>\r\n                        ) : (\r\n                            <h2 className=\"empty\">No Task</h2>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <button\r\n                    onClick={clearDone}\r\n                    disabled={done === 0 ? true : false}\r\n                    className={done === 0 ? \"disable\" : \"clear\"}\r\n                >\r\n                    &#10005; Clear Done\r\n                </button>\r\n                <select name=\"filter\" id=\"filter\" onChange={statusHandler} value={status}>\r\n                    <option value=\"All\">All</option>\r\n                    <option value=\"Completed\">Completed</option>\r\n                    <option value=\"Uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport uuid from \"uuid\";\r\nimport Input from \"./Inner Component/Input\";\r\nimport List from \"./Inner Component/List\";\r\nimport Control from \"./Inner Component/Control\";\r\nimport $ from \"jquery\";\r\n\r\nexport default function App({ props: { app, mode, whichMode } }) {\r\n    const [id] = useState(app.id);\r\n    const [Todo, setTodo] = useState({});\r\n    const [TodoListArray, setTodoListArray] = useState(() => {\r\n        var TodoLocal = localStorage.getItem(id);\r\n        if (TodoLocal === null || TodoLocal === undefined) return [];\r\n        else return JSON.parse(TodoLocal);\r\n    });\r\n    const [done, setDone] = useState(0);\r\n    const [progress, setProgress] = useState(\"\");\r\n    const [filtered, setFiltered] = useState([]);\r\n    const [status, setStatus] = useState(\"All\");\r\n\r\n    useEffect(() => {\r\n        const DoneTodos = TodoListArray.filter((arr) => arr.completed === true);\r\n        var progress = Math.floor((DoneTodos.length / TodoListArray.length) * 100);\r\n        if (isNaN(progress)) progress = 0;\r\n        setProgress(progress);\r\n        setDone(DoneTodos.length);\r\n    }, [progress, TodoListArray]);\r\n\r\n    useEffect(() => {\r\n        function FilterLogic() {\r\n            switch (status) {\r\n                case \"Completed\":\r\n                    setFiltered(TodoListArray.filter((arr) => arr.completed === true));\r\n                    break;\r\n                case \"Uncompleted\":\r\n                    setFiltered(TodoListArray.filter((arr) => arr.completed === false));\r\n                    break;\r\n                default:\r\n                    setFiltered(TodoListArray);\r\n            }\r\n        }\r\n        FilterLogic();\r\n    }, [TodoListArray, status]);\r\n\r\n    useEffect(() => {\r\n        Trans(false);\r\n    }, [status]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(id, JSON.stringify(TodoListArray));\r\n    }, [TodoListArray, id]);\r\n\r\n    function Trans(x) {\r\n        if (x) {\r\n            $(\".checkbox path\").css(\"transition\", \".4s\");\r\n            $(\".check\").css(\"transition\", \".4s\");\r\n        } else {\r\n            $(\".checkbox path\").css(\"transition\", \"none\");\r\n            $(\".check\").css(\"transition\", \"none\");\r\n        }\r\n    }\r\n\r\n    function sendProps(event) {\r\n        event.preventDefault();\r\n        var inputBox = $(\".inputBox\");\r\n        let { Todo: todo } = Todo;\r\n        if (todo.trim() === \"\" || todo.trim() === undefined) {\r\n            inputBox.val(null).focus();\r\n            return alert(\"Please write a Task\");\r\n        }\r\n        Todo.id = uuid.v4();\r\n        Todo.completed = false;\r\n        setTodoListArray((prev) => [...prev, Todo]);\r\n        inputBox.val(null).focus();\r\n        setTodo({});\r\n        setStatus(\"All\");\r\n    }\r\n\r\n    function setInput({ target: { value } }) {\r\n        setTodo({ Todo: value });\r\n    }\r\n\r\n    function updateTodo(id) {\r\n        Trans(true);\r\n        setTodoListArray(\r\n            TodoListArray.map((arr) => {\r\n                if (arr.id === id) arr.completed = !arr.completed;\r\n                return arr;\r\n            })\r\n        );\r\n    }\r\n\r\n    function removeTodo(id) {\r\n        Trans(false);\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.id !== id));\r\n    }\r\n\r\n    function clearDone() {\r\n        Trans(false);\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.completed === false));\r\n    }\r\n\r\n    function statusHandler({ target: { value } }) {\r\n        setStatus(value);\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"container\"\r\n            style={{ background: whichMode ? \"rgba(0, 0, 0, 0.5)\" : mode.white }}\r\n        >\r\n            <h1 className=\"ListName\" style={{ color: whichMode ? mode.darktext : mode.lighttext }}>\r\n                {app.name}\r\n            </h1>\r\n            <Control\r\n                props={{\r\n                    progress: progress,\r\n                    TodoListArray: TodoListArray,\r\n                    clearDone: clearDone,\r\n                    done: done,\r\n                    status: status,\r\n                    statusHandler: statusHandler,\r\n                    mode: mode,\r\n                    whichMode: whichMode,\r\n                }}\r\n            />\r\n            <Input\r\n                props={{\r\n                    sendProps: sendProps,\r\n                    setInput: setInput,\r\n                    whichMode: whichMode,\r\n                    mode: mode,\r\n                }}\r\n            />\r\n            <List\r\n                props={{\r\n                    removeTodo: removeTodo,\r\n                    updateTodo: updateTodo,\r\n                    TodoListArray: TodoListArray,\r\n                    filtered: filtered,\r\n                    whichMode: whichMode,\r\n                    mode: mode,\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { MdDehaze, MdClear, MdAdd, MdEdit, MdDelete, MdList, MdDeleteSweep } from \"react-icons/md\";\r\nimport { FiHeart, FiMoon, FiSun } from \"react-icons/fi\";\r\nimport { IconContext } from \"react-icons\";\r\nimport $ from \"jquery\";\r\n\r\nfunction OuterControl({\r\n    props: {\r\n        app,\r\n        setNewListName,\r\n        addList,\r\n        setCurrentList,\r\n        setRename,\r\n        updateList,\r\n        deleteList,\r\n        currentList,\r\n        clearList,\r\n        changeMode,\r\n        mode,\r\n        whichMode,\r\n    },\r\n}) {\r\n    const [side, setSide] = useState(false);\r\n    const [list, setList] = useState([]);\r\n    const [currentListId, setCurrentListId] = useState(\"\");\r\n    const [modes, setModes] = useState(true);\r\n    // creates Lists of TodoList Categories\r\n    useEffect(() => {\r\n        var list = app.map((app, index) => {\r\n            return (\r\n                <IconContext.Provider value={{ size: \"1.5rem\" }} key={index}>\r\n                    <li\r\n                        className={`listSet ${whichMode ? \"dark\" : \"light\"}`}\r\n                        data-id={app.id}\r\n                        onClick={(event) => {\r\n                            event.persist();\r\n                            if (event.target.tagName === \"svg\" || event.target.tagName === \"path\") {\r\n                                return;\r\n                            }\r\n                            setCurrentList(index);\r\n                            setSide(false);\r\n                            $(\".listSet\").removeClass(\"active\");\r\n                            $(`.listSet[data-id=\"${app.id}\"]`).addClass(\"active\");\r\n                        }}\r\n                    >\r\n                        <MdList className=\"icon\" fill={whichMode ? \"white\" : \"#333\"} />\r\n                        <h3>{app.name}</h3>\r\n                        <MdEdit\r\n                            data-id={app.id}\r\n                            className=\"icon edit\"\r\n                            fill={whichMode ? \"white\" : \"#333\"}\r\n                            onClick={() => {\r\n                                $(\".rename\").fadeIn();\r\n                                $(\".renamebox\").focus();\r\n                                setCurrentListId(app.id);\r\n                            }}\r\n                        />\r\n                        <MdDelete\r\n                            className=\"icon deleteIcon\"\r\n                            fill=\"red\"\r\n                            data-id={app.id}\r\n                            onClick={() => {\r\n                                $(\".delete\").fadeIn();\r\n                                setCurrentListId(app.id);\r\n                            }}\r\n                        />\r\n                    </li>\r\n                </IconContext.Provider>\r\n            );\r\n        });\r\n        setList(list);\r\n    }, [app, setCurrentList, whichMode]);\r\n\r\n    if (side) {\r\n        $(\".container\").click(() => {\r\n            setSide(false);\r\n        });\r\n    }\r\n\r\n    $(`.listSet`).removeClass(\"active\");\r\n    $(`.listSet:eq(${currentList})`).addClass(\"active\");\r\n    return (\r\n        <>\r\n            <div\r\n                className={\"ham\"}\r\n                style={{\r\n                    background: whichMode ? mode.dimbg : mode.lightbg4,\r\n                    boxShadow: whichMode\r\n                        ? \"0px 5px 10px rgba(0, 0, 0, 0.3)\"\r\n                        : \"0px 3px 5px rgba(0, 0, 0, 0.2)\",\r\n                }}\r\n            >\r\n                <MdDehaze\r\n                    size=\"1.5rem\"\r\n                    className=\"icon\"\r\n                    fill={whichMode ? \"white\" : \"#333\"}\r\n                    onClick={() => {\r\n                        setSide(true);\r\n                    }}\r\n                />\r\n            </div>\r\n            <div\r\n                className={`sideBar ${side ? \"openBar\" : \"closeBar\"} ${\r\n                    whichMode ? \"darkMode\" : \"lightMode\"\r\n                }`}\r\n            >\r\n                <h2\r\n                    style={{\r\n                        color: whichMode ? \"white\" : mode.dimbg,\r\n                        background: whichMode ? \"rgba(0, 0, 0, 0.5)\" : mode.lightbg4,\r\n                    }}\r\n                >\r\n                    Your List Set\r\n                    <MdClear\r\n                        size=\"1.5rem\"\r\n                        className=\"icon\"\r\n                        fill={whichMode ? \"white\" : \"#333\"}\r\n                        onClick={() => {\r\n                            setSide(false);\r\n                        }}\r\n                    />\r\n                </h2>\r\n                <ul>\r\n                    {list}\r\n                    <hr\r\n                        style={{\r\n                            backgroundColor: whichMode\r\n                                ? \"rgba(255, 255, 255, 0.5)\"\r\n                                : \"rgba(0, 0, 0, 0.5)\",\r\n                        }}\r\n                    />\r\n                    <IconContext.Provider\r\n                        value={{ size: \"1.5rem\", color: whichMode ? \"white\" : \"#333\" }}\r\n                    >\r\n                        <li\r\n                            className={`addNew subList ${whichMode ? \"dark\" : \"light\"} `}\r\n                            onClick={() => {\r\n                                $(\".newModal\").fadeIn();\r\n                                $(\".new\").focus();\r\n                            }}\r\n                        >\r\n                            <MdAdd fill={whichMode ? \"white\" : \"#333\"} />\r\n                            <h3>Add New List</h3>\r\n                        </li>\r\n                        <li\r\n                            className={`clearList subList ${whichMode ? \"dark\" : \"light\"}`}\r\n                            onClick={() => {\r\n                                $(\".clearListModal\").fadeIn();\r\n                            }}\r\n                        >\r\n                            <MdDeleteSweep fill={whichMode ? \"white\" : \"#333\"} />\r\n                            <h3>Clear All Lists</h3>\r\n                        </li>\r\n                        <hr\r\n                            style={{\r\n                                backgroundColor: whichMode\r\n                                    ? \"rgba(255, 255, 255, 0.5)\"\r\n                                    : \"rgba(0, 0, 0, 0.5)\",\r\n                            }}\r\n                        />\r\n                        <li\r\n                            className={`setting subList ${whichMode ? \"dark\" : \"light\"}`}\r\n                            onClick={() => {\r\n                                setSide(false);\r\n                                changeMode();\r\n                                setModes(!modes);\r\n                            }}\r\n                        >\r\n                            {whichMode ? <FiSun fill=\"white\" /> : <FiMoon fill=\"#333\" />}\r\n                            <h3>Turn on {whichMode ? \"Light\" : \"Dark\"} Mode</h3>\r\n                        </li>\r\n                        <li\r\n                            className={`donate subList ${whichMode ? \"dark\" : \"light\"}`}\r\n                            onClick={() => {\r\n                                $(\".donateModal\").fadeIn();\r\n                            }}\r\n                        >\r\n                            <FiHeart fill={whichMode ? \"white\" : \"#333\"} />\r\n                            <h3>Donate</h3>\r\n                        </li>\r\n                    </IconContext.Provider>\r\n                    <hr\r\n                        style={{\r\n                            backgroundColor: whichMode\r\n                                ? \"rgba(255, 255, 255, 0.5)\"\r\n                                : \"rgba(0, 0, 0, 0.5)\",\r\n                        }}\r\n                    />\r\n                </ul>\r\n            </div>\r\n\r\n            {/* Sets name of New List */}\r\n            <div className={`modalCont newModal`} style={{ display: \"none\" }}>\r\n                <form\r\n                    className=\"modal\"\r\n                    onSubmit={(event) => {\r\n                        event.preventDefault();\r\n                        $(\".newModal\").fadeOut();\r\n                        $(\".inputBox\").val(null);\r\n                        addList();\r\n                        setSide(false);\r\n                    }}\r\n                >\r\n                    <MdClear\r\n                        className={\"icon\"}\r\n                        style={{\r\n                            display: \"block\",\r\n                            marginLeft: \"auto\",\r\n                        }}\r\n                        onClick={() => {\r\n                            $(\".newModal\").fadeOut();\r\n                            $(\".inputBox\").val(null);\r\n                        }}\r\n                    />\r\n\r\n                    <h3>Set New Todolist Name</h3>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            className=\"inputBox new\"\r\n                            type=\"text\"\r\n                            name=\"inputBlock\"\r\n                            placeholder=\"Name...\"\r\n                            autoComplete=\"off\"\r\n                            required={true}\r\n                            onChange={({ target: { value } }) => {\r\n                                setNewListName(value);\r\n                            }}\r\n                        />\r\n                        <div className=\"input\"></div>\r\n                    </div>\r\n                    <button className=\"setName\" type=\"submit\">\r\n                        Set Name\r\n                    </button>\r\n                </form>\r\n            </div>\r\n\r\n            <div className=\"modalCont rename\" style={{ display: \"none\" }}>\r\n                <form\r\n                    className=\"modal\"\r\n                    onSubmit={(event) => {\r\n                        event.preventDefault();\r\n\r\n                        $(\".rename\").fadeOut();\r\n                        $(\".inputBox\").val(null);\r\n                        updateList(currentListId);\r\n                        setCurrentListId(\"\");\r\n                    }}\r\n                >\r\n                    <MdClear\r\n                        className={\"icon\"}\r\n                        style={{\r\n                            display: \"block\",\r\n                            marginLeft: \"auto\",\r\n                        }}\r\n                        onClick={() => {\r\n                            $(\".rename\").fadeOut();\r\n                            $(\".inputBox\").val(null);\r\n                        }}\r\n                    />\r\n\r\n                    <h3>Rename Todo</h3>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            className=\"inputBox renamebox\"\r\n                            type=\"text\"\r\n                            name=\"inputBlock\"\r\n                            placeholder=\"New Name...\"\r\n                            autoComplete=\"off\"\r\n                            required={true}\r\n                            onChange={({ target: { value } }) => {\r\n                                setRename(value);\r\n                            }}\r\n                        />\r\n                        <div className=\"input\"></div>\r\n                    </div>\r\n                    <button className=\"setName\" type=\"submit\">\r\n                        Set Name\r\n                    </button>\r\n                </form>\r\n            </div>\r\n\r\n            <div className=\"modalCont delete\" style={{ display: \"none\" }}>\r\n                <div className=\"modal\" style={{ textAlign: \"center\" }}>\r\n                    <MdDelete\r\n                        fontSize=\"3rem\"\r\n                        fill=\"red\"\r\n                        style={{ textShadow: \"0px 0px 5px red\" }}\r\n                    />\r\n                    <h3>Are you sure You want to Delete this List?</h3>\r\n                    <p>Entire List will be removed permanently</p>\r\n\r\n                    <button\r\n                        className=\"deleteBtn clear\"\r\n                        onClick={() => {\r\n                            $(\".delete\").fadeOut();\r\n                            $(\".inputBox\").val(null);\r\n                            deleteList(currentListId);\r\n                            setSide(false);\r\n                            setCurrentListId(\"\");\r\n                        }}\r\n                    >\r\n                        OK\r\n                    </button>\r\n                    <button\r\n                        className=\"canceldelete\"\r\n                        onClick={() => {\r\n                            $(\".delete\").fadeOut();\r\n                            $(\".inputBox\").val(null);\r\n                            setCurrentListId(\"\");\r\n                        }}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"modalCont clearListModal\" style={{ display: \"none\" }}>\r\n                <div className=\"modal\" style={{ textAlign: \"center\" }}>\r\n                    <MdDelete\r\n                        fontSize=\"3rem\"\r\n                        fill=\"red\"\r\n                        className=\"icon\"\r\n                        style={{ textShadow: \"0px 0px 5px red\" }}\r\n                    />\r\n                    <h3>Are you sure You want to Clear All Your Lists?</h3>\r\n                    <p>All Lists will be removed permanently and Cannot be recovered!</p>\r\n\r\n                    <button\r\n                        className=\"deleteBtn clear\"\r\n                        onClick={() => {\r\n                            $(\".clearListModal\").fadeOut();\r\n                            clearList(currentListId);\r\n                        }}\r\n                    >\r\n                        Clear all Lists\r\n                    </button>\r\n                    <button\r\n                        className=\"canceldelete\"\r\n                        onClick={() => {\r\n                            $(\".clearListModal\").fadeOut();\r\n                        }}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"modalCont donateModal\" style={{ display: \"none\", userSelect: \"text\" }}>\r\n                <div className=\"modal\">\r\n                    <MdClear\r\n                        className={\"icon\"}\r\n                        style={{\r\n                            display: \"block\",\r\n                            marginLeft: \"auto\",\r\n                        }}\r\n                        onClick={() => {\r\n                            $(\".donateModal\").fadeOut();\r\n                        }}\r\n                    />\r\n\r\n                    <h3>Donate</h3>\r\n                    <div className=\"info-block\">\r\n                        <h4>- About Me</h4>\r\n                        <p>\r\n                            My Name is Oluwatowo Rosanwo Mayowa, I'm a 200L Student of The\r\n                            University Of Ibadan studying Food Technology, I started Web Development\r\n                            in 2018 and Now I'm an Intermediate Web Developer and Aspiring UI/UX\r\n                            Deisgner, Im also a Logo/Video Editor.\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"info-block\">\r\n                        <h4>- Donate</h4>\r\n                        <p>\r\n                            Please if You really Like my Work and have a Dollar or two to spare,\r\n                            Kindly make a Donation To me as This will enhance my Progress and\r\n                            Productivity and also make me work harder and Develop more Apps that you\r\n                            will Definately find usefull\r\n                        </p>\r\n                    </div>\r\n\r\n                    <h4>Account Details:</h4>\r\n                    <pre>\r\n                        Bank: First Bank <br />\r\n                        Account Number: <span id=\"acc\">3123872415</span> <br />\r\n                        Account Name: Oluwatowo Rosanwo <br />\r\n                    </pre>\r\n                    <button\r\n                        className=\"copy\"\r\n                        onClick={() => {\r\n                            var temp = $(\"<input>\");\r\n                            $(\".donateModal .modal\").append(temp);\r\n                            temp.val($(\"#acc\").text()).select();\r\n                            document.execCommand(\"copy\");\r\n                            temp.remove();\r\n                            alert(\"Account Number Copied, Thank You So Much!\");\r\n                        }}\r\n                    >\r\n                        Copy Account Number\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default OuterControl;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport App from \"./App\";\r\nimport uuid from \"uuid\";\r\nimport OuterControl from \"./OuterControl\";\r\nimport { MdDehaze } from \"react-icons/md\";\r\nimport \"animate.css\";\r\n\r\n// test\r\n// import Push from \"push.js\";\r\n\r\nfunction Main() {\r\n    const [app, setApp] = useState(() => {\r\n        var ListLocal = localStorage.getItem(\"AppLocal\");\r\n        if (ListLocal === null || ListLocal === undefined) return [];\r\n        else return JSON.parse(ListLocal);\r\n    });\r\n    const [currentList, setCurrentList] = useState(() => {\r\n        var index = localStorage.getItem(\"Index\");\r\n        if (index === null || index === undefined) return 0;\r\n        else return Number.parseInt(index);\r\n    });\r\n    const [newListName, setNewListName] = useState(\"\");\r\n    const [reName, setRename] = useState(\"\");\r\n    const [whichMode, setwhichMode] = useState(true);\r\n    const [mode] = useState({\r\n        lighttext: \"#333\",\r\n        white: \"#f5f5f5\",\r\n        lightbg: \"#f2f2f2\",\r\n        lightbg4: \"#dfdfdf\",\r\n        darktext: \"white\",\r\n        dimbg: \"#333\",\r\n        dimbg4: \"#444\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"AppLocal\", JSON.stringify(app));\r\n    }, [app]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"Index\", JSON.stringify(currentList));\r\n    }, [currentList]);\r\n\r\n    function addList() {\r\n        let NewListProps = {\r\n            id: uuid.v4(),\r\n            name: newListName,\r\n        };\r\n        setCurrentList(app.length);\r\n        setApp((prev) => {\r\n            return [...prev, NewListProps];\r\n        });\r\n    }\r\n\r\n    function updateList(id) {\r\n        setApp(\r\n            app.map((app) => {\r\n                if (app.id === id) app.name = reName;\r\n                return app;\r\n            })\r\n        );\r\n    }\r\n\r\n    function deleteList(id) {\r\n        localStorage.removeItem(id);\r\n        var filteredList = app.filter((app) => app.id !== id);\r\n        setCurrentList(filteredList.length - 1);\r\n        setApp(filteredList);\r\n    }\r\n    function clearList() {\r\n        setApp([]);\r\n        localStorage.clear();\r\n    }\r\n\r\n    function changeMode() {\r\n        setwhichMode(!whichMode);\r\n    }\r\n\r\n    var content;\r\n    app.length <= 0\r\n        ? (content = (\r\n              <div className=\"noList\">\r\n                  <h1>No Lists</h1>\r\n                  <p>\r\n                      Click <MdDehaze className=\"dir\" /> to make a List\r\n                  </p>\r\n              </div>\r\n          ))\r\n        : (content = (\r\n              <App\r\n                  key={app[currentList].id}\r\n                  props={{ app: app[currentList], mode: mode, whichMode: whichMode }}\r\n              />\r\n          ));\r\n\r\n    return (\r\n        <div>\r\n            <OuterControl\r\n                props={{\r\n                    app: app,\r\n                    setNewListName: setNewListName,\r\n                    addList: addList,\r\n                    setCurrentList: setCurrentList,\r\n                    setRename: setRename,\r\n                    updateList: updateList,\r\n                    deleteList: deleteList,\r\n                    currentList: currentList,\r\n                    clearList: clearList,\r\n                    changeMode: changeMode,\r\n                    mode: mode,\r\n                    whichMode: whichMode,\r\n                }}\r\n            />\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.css\";\r\nimport Main from \"./Components/Main\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nReactDOM.render(<Main />, document.getElementById(\"root\"));\r\nserviceWorker.register();\r\n"],"sourceRoot":""}