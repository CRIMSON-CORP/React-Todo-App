{"version":3,"sources":["Components/Inner Component/Input.js","Components/Inner Component/EachTodo.js","Components/Inner Component/List.js","Components/Inner Component/Control.js","Components/App.js","Components/OuterControl.js","Components/Main.js","serviceWorker.js","index.js"],"names":["examples","Input","sendProps","props","useState","focus","setFocus","line","setLine","input","setInput","useEffect","Math","floor","random","className","onSubmit","event","preventDefault","type","name","onChange","value","target","onFocus","onBlur","autoComplete","required","viewBox","preserveAspectRatio","d","transform","fill","size","EachTodo","eachTodo","id","completed","Todo","DateOptions","futureDate","reminder","updateTodo","removeTodo","AddUpdate","removeReminder","date","TodoOp","setTodoOp","Date","now","parse","TodoStatus","setTodoStatus","toggle","setToggle","useInterval","rem","ls","get","undefined","JSON","Push","create","requireInteraction","vibrate","set","autoStart","selfCorrecting","transition","useTransition","from","enter","leave","data-id","checked","points","style","opacity","textDecoration","map","item","key","div","onClick","$","fadeIn","val","select","prev","transdiv","defaultValue","float","margin","display","fadeOut","store","addNotification","message","container","insert","animationIn","animationOut","dismiss","duration","onScreen","showIcon","touch","click","List","TodoListArray","filtered","TodoBlocks","index","length","Control","progress","clearDone","done","statusHandler","status","whichMode","x1","y1","x2","y2","offset","stopColor","cx","cy","r","strokeDashoffset","strokeWidth","stroke","disabled","App","app","setTodo","setTodoListArray","setDone","setProgress","setFiltered","setStatus","Trans","x","css","DoneTodos","filter","arr","isNaN","todo","inputBox","trim","alert","uuid","v4","remove","setDate","OuterControl","addList","setCurrentList","updateList","deleteList","currentList","clearList","setwhichMode","sendForm","formStatus","setFormStatus","side","setSide","list","setList","currentListId","setCurrentListId","copy","setCopy","ListName","setListName","checkEmail","test","removeClass","addClass","check","Provider","persist","tagName","on","keyup","this","blur","sendBtn","icon","text","fontSize","userSelect","href","temp","append","document","execCommand","title","Main","content","localStorage","getItem","setApp","Number","parseInt","toLowerCase","form","a","emailjs","process","res","setItem","stringify","Index","newListName","NewListProps","removeItem","filteredList","clear","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+SAGMA,EAAW,CACb,cACA,eACA,eACA,eACA,cACA,cACA,uBACA,yBAGW,SAASC,EAAT,GAA0C,IAAhBC,EAAe,EAAxBC,MAASD,UAAe,EAC1BE,oBAAS,GADiB,mBAC7CC,EAD6C,KACtCC,EADsC,OAE5BF,mBAAS,IAFmB,mBAE7CG,EAF6C,KAEvCC,EAFuC,OAG1BJ,mBAAS,IAHiB,mBAG7CK,EAH6C,KAGtCC,EAHsC,KASpD,OALAC,qBAAU,WAEAH,EADNH,EACc,4BACA,OAASL,EAASY,KAAKC,MAAsB,EAAhBD,KAAKE,cACjD,CAACT,IAEA,0BACIU,UAAU,aACVC,SAAU,SAACC,GACPA,EAAMC,iBACNhB,EAAUO,KAGd,yBAAKM,UAAU,mBACX,2BACII,KAAK,OACLJ,UAAU,QACVK,KAAK,aACLC,SAAU,YAA4B,IAAfC,EAAc,EAAxBC,OAAUD,MACnBZ,EAASY,IAEbE,QAAS,WACLlB,GAAS,IAEbmB,OAAQ,WACJnB,GAAS,IAEboB,aAAa,MACbC,SAAS,aAEb,yBAAKZ,UAAU,SAASa,QAAQ,gBAAgBC,oBAAoB,QAChE,0BACId,UAAU,aACVe,EAAE,0EACFC,UAAU,0BAEd,0BACIhB,UAAU,aACVe,EAAE,wFACFC,UAAU,2BAGjB,8BAAOxB,IAEZ,4BAAQQ,UAAU,OAAOI,KAAK,UAC1B,kBAAC,IAAD,CAAOa,KAAK,OAAOjB,UAAU,OAAOkB,KAAK,a,qGCsN1CC,MA5Qf,YAaI,IAAD,IAZC/B,MAYD,IAXKgC,SACIC,EAUT,EAVSA,GACAC,EAST,EATSA,UACAC,EAQT,EARSA,KAQT,IAPSC,YAOT,gBAPgE,GAOhE,GAPwBC,kBAOxB,MAPqC,KAOrC,MAP2CC,gBAO3C,SALKC,EAKL,EALKA,WACAC,EAIL,EAJKA,WACAC,EAGL,EAHKA,UACAC,EAEL,EAFKA,eAEL,EAC6BzC,mBAAS,CACjCgB,KAAM,GACN0B,KAAM,GACNL,UAAU,IAJf,mBACQM,EADR,KACgBC,EADhB,OAMqC5C,oBAAS,WACzC,OAAI6C,KAAKC,OAASD,KAAKE,MAAMX,GAAoB,SACxCS,KAAKC,OAASD,KAAKE,MAAMX,GAAc,KAAgB,QACvDC,EAAiB,SACd,MAVjB,mBAMQW,EANR,KAMoBC,EANpB,OAY6BjD,mBAAS,QAZtC,mBAYQkD,EAZR,KAYgBC,EAZhB,KAcCC,uBACI,WACI,IAAIC,EAAMC,IAAGC,IAAH,cAAcvB,KACaqB,OAA7BG,IAARH,GAA6B,OAARA,GAAsCI,KAAKV,MAAMM,MAElEhB,IAAaJ,GAAaY,KAAKC,OAASD,KAAKE,MAAMX,KAAgBiB,GACnEK,IAAKC,OAAL,oBAAyBzB,GAAQ,CAC7B0B,oBAAoB,EACpBC,QAAS,CAAC,IAAK,IAAK,OAExBZ,EAAc,UACdK,IAAGQ,IAAH,cAAc9B,IAAM,IAEpBK,IACc,IAAdJ,GACAY,KAAKC,OAASD,KAAKE,MAAMX,GAAc,OACtCiB,EAEDJ,EAAc,SACPZ,IAA0B,IAAdJ,GACnBgB,EAAc,aAGtB,IACA,CACIc,WAAW,EACXC,gBAAgB,IAIxBzD,qBAAU,WAEF4C,EADAd,IAAaJ,EACH,WACHA,EACG,YACG,UAClB,CAACI,EAAUJ,IAEd,IAKMgC,EAAaC,YAAchB,EAAQ,KAAM,CAC3CiB,KAAM,CAAExC,UAAW,YACnByC,MAAO,CAAEzC,UAAW,YACpB0C,MAAO,CAAE1C,UAAW,cAGxB,OACI,oCACI,yBAAKhB,UAAU,QAAQ2D,UAAA,UAAYtC,IAC/B,+BACI,2BACIjB,KAAK,WACLuD,UAAA,UAAYtC,GACZuC,QAAStC,EACThB,SAAU,WACNqB,EAAWN,GACNC,GACDQ,EAAeT,MAI3B,yBAAKrB,UAAU,QACX,yBAAKA,UAAU,sBACX,yBAAKa,QAAQ,cAAcb,UAAU,YACjC,0BACIA,UAAU,MACVe,EAAE,+FAEN,8BACIf,UAAU,QACV6D,OAAO,qCAInB,0BAAMC,MAAOxC,EAvCtB,CACPyC,QAAS,GACTC,eAAgB,gBAqCgC,MAAOzC,KAG/C,yBAAKvB,UAAU,WACVsD,EAAWW,KAAI,YAA2B,IAAxBC,EAAuB,EAAvBA,KAAM9E,EAAiB,EAAjBA,MAAO+E,EAAU,EAAVA,IAC5B,OAAQD,GACJ,IAAK,YACD,OACI,kBAAC,IAASE,IAAV,CAAcN,MAAO1E,EAAO+E,IAAKA,EAAKnE,UAAU,MAC5C,kBAAC,IAAD,CACIA,UAAW,WACXkB,KAAK,SACLmD,QAAS,WACLzC,EAAWP,IAEfsC,UAAStC,KAIzB,IAAK,WACD,OACI,kBAAC,IAAS+C,IAAV,CAAcN,MAAO1E,EAAO+E,IAAKA,EAAKnE,UAAU,MAC5C,kBAAC,IAAD,CACIA,UAAU,gBACVqB,GAAIgB,EACJnB,KAAK,SACLyC,UAAStC,EACTgD,QAAS,WACLC,IAAE,qBAAD,OAAsBjD,EAAtB,MAA6BkD,SAC9BD,IAAE,iCACGE,IAAIjD,GACJkD,aAKzB,QACI,OACI,kBAAC,IAASL,IAAV,CAAcN,MAAO1E,EAAO+E,IAAKA,EAAKnE,UAAU,MAC5C,kBAAC,IAAD,CACIkB,KAAK,SACLyC,UAAStC,EACTgD,QAAS,WACLC,IAAE,qBAAD,OAAsBjD,EAAtB,MAA6BkD,SAC9BD,IAAE,iCACGE,IAAIjD,GACJkD,mBASzC,yBAAKzE,UAAU,2BAA2B2D,UAAStC,GAC/C,yBAAKrB,UAAU,SACX,4CACA,yCACA,yBAAKA,UAAU,mBACX,2BACII,KAAK,OACLJ,UAAU,QACVW,aAAa,MACbL,SAAU,YAA4B,IAAfC,EAAc,EAAxBC,OAAUD,MACnB0B,GAAU,SAACyC,GAAD,mBAAC,eAAeA,GAAhB,IAAsBrE,KAAME,UAG9C,yBAAKP,UAAU,SAASa,QAAQ,gBAAgBC,oBAAoB,QAChE,0BACId,UAAU,aACVe,EAAE,0EACF4D,SAAS,0BAEb,0BACI3E,UAAU,aACVe,EAAE,wFACFC,UAAU,2BAGlB,4CAEJ,gDACA,yBAAKhB,UAAU,mBACX,2BACIA,UAAU,QACVI,KAAK,iBACLwE,aAAc5C,EAAOD,KACrBzB,SAAU,YAA4B,IAAfC,EAAc,EAAxBC,OAAUD,MACnB0B,GAAU,SAACyC,GAAD,mBAAC,eAAeA,GAAhB,IAAsB3C,KAAMxB,UAG9C,yBAAKP,UAAU,SAASa,QAAQ,gBAAgBC,oBAAoB,QAChE,0BACId,UAAU,aACVe,EAAE,0EACF4D,SAAS,0BAEb,0BACI3E,UAAU,aACVe,EAAE,wFACFC,UAAU,4BAKrBU,EACG,4BACI1B,UAAU,eACV8D,MAAO,CAAEe,MAAO,OAAQC,OAAQ,aAAcC,QAAS,QACvDV,QAAS,WACLvC,EAAeT,GACfiD,IAAE,aAAaU,YAGnB,kBAAC,IAAD,MACA,4DAEJ,KACJ,4BACIhF,UAAU,gBACVqE,QAAS,WACDnC,KAAKE,MAAMJ,EAAOD,OAASG,KAAKC,MAChC8C,QAAMC,gBAAgB,CAClBC,QAAS,sDACT/E,KAAM,UACNgF,UAAW,aACXC,OAAQ,MACRC,YAAa,CAAC,WAAY,YAC1BC,aAAc,CAAC,WAAY,WAC3BC,QAAS,CACLC,SAAU,IACVC,UAAU,EACVC,UAAU,EACVC,OAAO,EACPC,OAAO,MAKnBhE,EAAUR,EAAIW,GACdW,IAAGQ,IAAH,cAAc9B,IAAM,GACpBiD,IAAE,aAAaU,aAGnB,kBAAC,IAAD,MACA,uCAEJ,4BACIhF,UAAU,kBACVI,KAAK,SACLiE,QAAS,WACLC,IAAE,aAAaU,YAGnB,kBAAC,IAAD,MACA,6CC1QT,SAASc,EAAT,GAEX,IAAD,IADC1G,MAASwC,EACV,EADUA,WAAYD,EACtB,EADsBA,WAAYoE,EAClC,EADkCA,cAAeC,EACjD,EADiDA,SAAUnE,EAC3D,EAD2DA,UAAWC,EACtE,EADsEA,eAEjEmE,EAAaD,EAAS/B,KAAI,SAAC7C,EAAU8E,GACrC,OACI,kBAAC,EAAD,CACI/B,IAAK+B,EACL9G,MAAO,CACHgC,WACAO,aACAC,aACAC,YACAC,uBAMhB,OAAO,yBAAK9B,UAAU,iBAA0C,IAAzB+F,EAAcI,OAAe,GAAKF,GCpB9D,SAASG,EAAT,GAEX,IAAD,IADChH,MAASiC,EACV,EADUA,GAAIgF,EACd,EADcA,SAAUN,EACxB,EADwBA,cAAeO,EACvC,EADuCA,UAAWC,EAClD,EADkDA,KAAMC,EACxD,EADwDA,cAAeC,EACvE,EADuEA,OAAQC,EAC/E,EAD+EA,UAE9E,OACI,yBAAK1G,UAAU,WACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,WACX,6BACI,oCAAgBqB,GAAE,eAAUA,GAAMsF,GAAG,IAAIC,GAAG,IAAIC,GAAG,OAAOC,GAAG,QACzD,0BAAMC,OAAO,KAAKC,UAAU,YAC5B,0BAAMD,OAAO,OAAOC,UAAU,aAElC,4BAAQC,GAAG,MAAMC,GAAG,MAAMC,EAAE,KAAKnH,UAAU,gBAE3C,4BACIiH,GAAG,MACHC,GAAG,MACHC,EAAE,KACFnH,UAAU,cACV8D,MAAO,CACHsD,iBACI,mBAAsB,mBAAqBf,EAAY,IAC3DgB,YAA0B,IAAbhB,EAAiB,MAAQ,OACtCiB,OAAO,cAAD,OAAgBjG,EAAhB,UAIlB,yBAAKrB,UAAS,iBAAY0G,EAAY,WAAa,cACjC,IAAbL,GAA2C,IAAzBN,EAAcI,OAC7B,oCACI,4BACKE,EACD,0BAAMrG,UAAU,QAAhB,MAEJ,0BAAMA,UAAU,QAAhB,cAGJ,wBAAIA,UAAU,SAAd,cAKhB,yBAAKA,UAAU,WACX,4BACIqE,QAASiC,EACTiB,SAAmB,IAAThB,EACVvG,UAAoB,IAATuG,EAAa,UAAY,SAHxC,qBAOA,4BAAQlG,KAAK,SAASgB,GAAG,SAASf,SAAUkG,EAAejG,MAAOkG,GAC9D,4BAAQlG,MAAM,OAAd,OACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,eAAd,kBC9CL,SAASiH,EAAT,GAAkC,IAAVC,EAAS,EAAlBrI,MAASqI,IAAS,EAC/BpI,mBAASoI,EAAIpG,IAAnBA,EADqC,sBAEpBhC,mBAAS,IAFW,mBAErCkC,EAFqC,KAE/BmG,EAF+B,OAGFrI,oBAAS,WAC/C,OAAsB,OAAfsD,IAAGC,IAAIvB,GAAe,GAAKsB,IAAGC,IAAIvB,MAJD,mBAGrC0E,EAHqC,KAGtB4B,EAHsB,OAMpBtI,mBAAS,GANW,mBAMrCkH,EANqC,KAM/BqB,EAN+B,OAOZvI,mBAAS,IAPG,mBAOrCgH,EAPqC,KAO3BwB,EAP2B,OAQZxI,mBAAS,IARG,mBAQrC2G,EARqC,KAQ3B8B,EAR2B,OAShBzI,mBAAS,OATO,mBASrCoH,EATqC,KAS7BsB,EAT6B,KAwC5C,SAASC,EAAMC,GACPA,GACA3D,IAAE,kBAAkB4D,IAAI,aAAc,OACtC5D,IAAE,UAAU4D,IAAI,aAAc,SAE9B5D,IAAE,kBAAkB4D,IAAI,aAAc,QACtC5D,IAAE,UAAU4D,IAAI,aAAc,SAyFtC,OA5HAtI,qBAAU,WACN+C,IAAGQ,IAAI9B,EAAI0E,KACZ,CAACA,EAAe1E,IAEnBzB,qBAAU,WACN,IAAMuI,EAAYpC,EAAcqC,QAAO,SAACC,GAAD,OAA2B,IAAlBA,EAAI/G,aAChD+E,EAAWxG,KAAKC,MAAOqI,EAAUhC,OAASJ,EAAcI,OAAU,KAClEmC,MAAMjC,KAAWA,EAAW,GAChCwB,EAAYxB,GACZuB,EAAQO,EAAUhC,UACnB,CAACJ,IAEJnG,qBAAU,WACN,OAAQ6G,GACJ,IAAK,YACDqB,EAAY/B,EAAcqC,QAAO,SAACC,GAAD,OAA2B,IAAlBA,EAAI/G,cAC9C,MACJ,IAAK,cACDwG,EAAY/B,EAAcqC,QAAO,SAACC,GAAD,OAA2B,IAAlBA,EAAI/G,cAC9C,MACJ,QACIwG,EAAY/B,MAErB,CAACA,EAAeU,IAEnB7G,qBAAU,WACNoI,GAAM,KACP,CAACvB,IAkGA,yBAAKzG,UAAU,YAAY2D,UAAStC,GAChC,wBAAIrB,UAAU,YAAYyH,EAAIpH,MAC9B,kBAAC+F,EAAD,CACIhH,MAAO,CACHiC,KACAgF,WACAN,gBACAO,UAjBhB,WACI0B,GAAM,GACNL,EAAiB5B,EAAcqC,QAAO,SAACC,GAAD,OAA2B,IAAlBA,EAAI/G,eAgBvCiF,OACAE,SACAD,cAfhB,YAA+C,IAAZjG,EAAW,EAArBC,OAAUD,MAC/BwH,EAAUxH,OAiBN,kBAACrB,EAAD,CACIE,MAAO,CACHD,UArGhB,SAAmBoJ,GACf,IAAIC,EAAWlE,IAAE,UACjB,GAAoB,KAAhBiE,EAAKE,aAAiC5F,IAAhB0F,EAAKE,OAE3B,OADAD,EAAShE,IAAI,MAAMlF,QACZoJ,MAAM,uBAEjBnH,EAAKA,KAAOgH,EACZhH,EAAKF,GAAKsH,IAAKC,KACfrH,EAAKD,WAAY,EACjBC,EAAKC,YAAc,CACfC,WAAY,KACZC,UAAU,GAEdiG,GAAiB,SAACjD,GAAD,4BAAcA,GAAd,CAAoBnD,OACrCiH,EAAShE,IAAI,MAAMlF,QACnBoI,EAAQ,IACRK,EAAU,WAwFN,kBAACjC,EAAD,CACI1G,MAAO,CACHwC,WApChB,SAAoBP,GAChB2G,GAAM,GACNL,EAAiB5B,EAAcqC,QAAO,SAACC,GAAD,OAASA,EAAIhH,KAAOA,MAC1DsB,IAAGkG,OAAH,cAAiBxH,KAkCLM,WAxFhB,SAAoBN,GAChB2G,GAAM,GACNL,EACI5B,EAAc9B,KAAI,SAACoE,GAEf,OADIA,EAAIhH,KAAOA,IAAIgH,EAAI/G,WAAa+G,EAAI/G,WACjC+G,OAoFHtC,gBACAC,WACAnE,UAjFhB,SAAmBR,EAAnB,GAAwC,IAAfhB,EAAc,EAAdA,KAAM0B,EAAQ,EAARA,KACvB1B,GACAsH,EACI5B,EAAc9B,KAAI,SAACoE,GAEf,OADIA,EAAIhH,KAAOA,IAAIgH,EAAI9G,KAAOlB,GACvBgI,MAIftG,GAIJ,SAAiBV,EAAIU,GACjB4F,EACI5B,EAAc9B,KAAI,SAACoE,GAOf,OANIA,EAAIhH,KAAOA,IACXgH,EAAI7G,YAAc,CACdC,WAAYM,EACZL,UAAU,IAGX2G,MAZfS,CAAQzH,EAAIU,IAwEJD,eAtDhB,SAAwBT,GACpBsG,EACI5B,EAAc9B,KAAI,SAACoE,GAKf,OAJIA,EAAIhH,KAAOA,IACXgH,EAAI7G,YAAYE,UAAW,EAC3B2G,EAAI7G,YAAYC,WAAa,MAE1B4G,MAGf1F,IAAGkG,OAAH,cAAiBxH,S,mBCigBV0H,MArmBf,YAeI,IAAD,IAdC3J,MACIqI,EAaL,EAbKA,IACAuB,EAYL,EAZKA,QACAC,EAWL,EAXKA,eACAC,EAUL,EAVKA,WACAC,EASL,EATKA,WACAC,EAQL,EARKA,YACAC,EAOL,EAPKA,UACA3C,EAML,EANKA,UACA4C,EAKL,EALKA,aACAC,EAIL,EAJKA,SACAC,EAGL,EAHKA,WACAC,EAEL,EAFKA,cAEL,EACyBpK,oBAAS,GADlC,mBACQqK,EADR,KACcC,EADd,OAEyBtK,mBAAS,IAFlC,mBAEQuK,EAFR,KAEcC,EAFd,OAG2CxK,mBAAS,IAHpD,mBAGQyK,EAHR,KAGuBC,EAHvB,OAIyB1K,oBAAS,GAJlC,mBAIQ2K,EAJR,KAIcC,EAJd,OAKiC5K,mBAAS,IAL1C,mBAKQ6K,EALR,KAKkBC,EALlB,KAqEC,SAASC,EAAWlK,EAAO+H,GACvB,IAAIzD,EAAMtE,EAAMM,OAAOD,MAAMkI,OACxB,IAAI4B,KAAK7F,IAAgB,KAARA,EAGlByD,EAAEqC,YAAY,OAFdrC,EAAEsC,SAAS,OAcnB,SAASC,EAAM9K,GACgB,KAAvBA,EAAM8E,MAAMiE,OACZ/I,EAAM6K,SAAS,OAEf7K,EAAM4K,YAAY,OAnF1B1K,qBAAU,WACN,IAAIgK,EAAOnC,EAAIxD,KAAI,SAACwD,EAAKvB,GACrB,OACI,kBAAC,IAAYuE,SAAb,CACIlK,MAAO,CACHW,KAAM,SACNlB,UAAU,eAAD,OAAiB0G,EAAY,GAAK,SAC3C5C,MAAO,CAAE7C,KAAMyF,EAAY,QAAU,SAEzCvC,IAAK+B,GAEL,wBACIlG,UAAS,kBAAa0G,EAAY,OAAS,SAC3CrC,QAAS,SAACnE,GACNA,EAAMwK,UACuB,QAAzBxK,EAAMM,OAAOmK,SAA8C,SAAzBzK,EAAMM,OAAOmK,UAGnD1B,EAAe/C,GACfyD,GAAQ,GACRrF,IAAE,YAAYgG,YAAY,UAC1BhG,IAAE,qBAAD,OAAsBmD,EAAIpG,GAA1B,OAAkCkJ,SAAS,aAGhD,kBAAC,IAAD,CAAQvK,UAAU,SAClB,4BAAKyH,EAAIpH,MACT,kBAAC,IAAD,CACIyD,MAAO,CAAEwD,OAAQZ,EAAY,QAAU,OAAQzF,KAAM,QACrDjB,UAAU,YACVqE,QAAS,WACLC,IAAE,WAAWC,SACbD,IAAE,cAAcE,IAAIiD,EAAIpH,MAAMoE,SAC9BsF,EAAiBtC,EAAIpG,OAG7B,kBAAC,IAAD,CACIrB,UAAU,WACVqE,QAAS,WACLC,IAAE,WAAWC,SACbwF,EAAiBtC,EAAIpG,YAO7CwI,EAAQD,KACT,CAACnC,EAAKwB,EAAgBvC,IAEzBpC,IAAE,YAAYgG,YAAY,UAC1BhG,IAAE,eAAD,OAAgB8E,EAAhB,MAAgCmB,SAAS,UAEtCb,EACApF,IAAE,oBACGC,SACAsB,OAAM,WACH8D,GAAQ,MAGhBrF,IAAE,oBAAoBU,UAY1BV,IAAE,8BAA8BsG,GAAG,CAC/BC,MAAO,SAAU3K,GACbkK,EAAWlK,EAAOoE,IAAEwG,QAExBC,KAAM,SAAU7K,GACZkK,EAAWlK,EAAOoE,IAAEwG,UAU5BxG,IAAE,oCAAoCsG,GAAG,CACrCG,KAAM,WACFP,EAAMlG,IAAEwG,QAGZD,MAAO,WACHL,EAAMlG,IAAEwG,UAIhB,IAAIE,EAAU,CACVhL,UAAW,GACXiL,KAAM,GACNC,KAAM,IAEV,OAAQ1B,GACJ,IAAK,UACDwB,EAAQhL,UAAYgL,EAAQE,KAAO,UACnCF,EAAQC,KAAO,kBAAC,IAAD,CAAUjL,UAAU,YACnC,MACJ,IAAK,OACDgL,EAAQhL,UAAYgL,EAAQE,KAAO,OACnCF,EAAQC,KAAO,kBAAC,IAAD,MACf,MACJ,IAAK,QACDD,EAAQhL,UAAY,QACpBgL,EAAQE,KAAO,oBACfF,EAAQC,KAAO,kBAAC,IAAD,MACf,MACJ,QACID,EAAQhL,UAAYgL,EAAQE,KAAO,OACnCF,EAAQC,KAAO,kBAAC,IAAD,MAqBvB,OACI,oCACI,yBAAKjL,UAAU,OACX,kBAAC,IAAD,CACIkB,KAAK,SACLlB,UAAU,OACVqE,QAAS,WACLsF,GAAQ,OAIpB,yBAAK3J,UAAU,oBACf,yBAAKA,UAAS,kBAAa0J,EAAO,UAAY,GAAhC,YAAsChD,EAAY,GAAK,cACjE,4CAEI,kBAAC,IAAD,CACIxF,KAAK,SACLlB,UAAU,OACVqE,QAAS,WACLsF,GAAQ,OAIpB,4BACKC,EACD,6BACA,kBAAC,IAAYa,SAAb,CACIlK,MAAO,CAAEW,KAAM,SAAU4C,MAAO,CAAE7C,KAAMyF,EAAY,QAAU,UAE9D,wBACI1G,UAAU,UACVqE,QAAS,WACLC,IAAE,aAAaC,WAGnB,kBAAC,IAAD,MACA,6CAEJ,wBACIvE,UAAU,UACVqE,QAAS,WACLC,IAAE,mBAAmBC,WAGzB,kBAAC,IAAD,MACA,gDAGJ,wBACIvE,UAAU,UACVqE,QAAS,WACLsF,GAAQ,GACRL,GAAc5C,KAGjBA,EAAY,kBAAC,IAAD,CAAOzF,KAAK,UAAa,kBAAC,IAAD,CAAQqG,OAAO,gBACrD,uCAAaZ,EAAY,QAAU,OAAnC,UAEJ,6BACA,wBACI1G,UAAU,UACVqE,QAAS,WACLC,IAAE,iBAAiBC,WAGvB,kBAAC,IAAD,CAAST,MAAO,CAAEuD,YAAa,KAC/B,2CAEJ,wBACIrH,UAAU,UACVqE,QAAS,WACLC,IAAE,gBAAgBC,WAGtB,kBAAC,IAAD,CAAST,MAAO,CAAEuD,YAAa,KAC/B,wCAGR,+BAIR,yBAAKrH,UAAU,4BACX,0BACIA,UAAU,QACVC,SAAU,SAACC,GACPA,EAAMC,iBACNmE,IAAE,aAAaU,UACfV,IAAE,UAAUE,IAAI,MAChBwE,EAAQkB,GACRP,GAAQ,KAGZ,yCACA,yBAAK3J,UAAU,mBACX,2BACII,KAAK,OACLJ,UAAU,QACVK,KAAK,aACLC,SAAU,YAA4B,IAAfC,EAAc,EAAxBC,OAAUD,MACnB4J,EAAY5J,IAEhBI,aAAa,MACbC,UAAU,IAEd,yBAAKZ,UAAU,SAASa,QAAQ,gBAAgBC,oBAAoB,QAChE,0BACId,UAAU,aACVe,EAAE,0EACFC,UAAU,0BAEd,0BACIhB,UAAU,aACVe,EAAE,wFACFC,UAAU,2BAGlB,+CAEJ,4BAAQhB,UAAU,gBAAgBI,KAAK,UACnC,kBAAC,IAAD,MACA,uCAEJ,4BACIJ,UAAU,kBACVI,KAAK,SACLiE,QAAS,WACLC,IAAE,aAAaU,UACfV,IAAE,UAAUE,IAAI,QAGpB,kBAAC,IAAD,MACA,2CAKZ,yBAAKxE,UAAU,0BACX,0BACIA,UAAU,QACVC,SAAU,SAACC,GACPA,EAAMC,iBACNmE,IAAE,WAAWU,UACbV,IAAE,UAAUE,IAAI,MAChB0E,EAAWY,EAAeI,GAC1BH,EAAiB,MAGrB,2CACA,yBAAK/J,UAAU,mBACX,2BACII,KAAK,OACLJ,UAAU,kBACVK,KAAK,aACLC,SAAU,YAA4B,IAAfC,EAAc,EAAxBC,OAAUD,MACnB4J,EAAY5J,IAEhBI,aAAa,MACbC,UAAU,IAEd,yBAAKZ,UAAU,SAASa,QAAQ,gBAAgBC,oBAAoB,QAChE,0BACId,UAAU,aACVe,EAAE,0EACFC,UAAU,0BAEd,0BACIhB,UAAU,aACVe,EAAE,wFACFC,UAAU,4BAKtB,4BAAQhB,UAAU,gBAAgBI,KAAK,UACnC,kBAAC,IAAD,MACA,uCAEJ,4BACIJ,UAAU,kBACVI,KAAK,SACLiE,QAAS,WACLC,IAAE,WAAWU,UACbV,IAAE,UAAUE,IAAI,QAGpB,kBAAC,IAAD,MACA,2CAKZ,yBAAKxE,UAAU,2BACX,yBAAKA,UAAU,SACX,kBAAC,IAAD,CAAUmL,SAAS,OAAOnL,UAAU,QACpC,0EACA,sEAEA,4BACIA,UAAU,kBACVI,KAAK,SACLiE,QAAS,WACLC,IAAE,WAAWU,YAGjB,kBAAC,IAAD,MACA,yCAEJ,4BACIhF,UAAU,eACVI,KAAK,SACLiE,QAAS,WACLC,IAAE,WAAWU,UACbmE,EAAWW,GACXH,GAAQ,KAGZ,kBAAC,IAAD,MACA,uCAKZ,yBAAK3J,UAAU,mCACX,yBAAKA,UAAU,SACX,kBAAC,IAAD,CAAemL,SAAS,OAAOnL,UAAU,QACzC,8EACA,6FACA,4BACIA,UAAU,kBACVqE,QAAS,WACLC,IAAE,mBAAmBU,YAGzB,kBAAC,IAAD,MACA,yCAEJ,4BACIhF,UAAU,eACVqE,QAAS,WACLC,IAAE,mBAAmBU,UACrBqE,IACAM,GAAQ,KAGZ,kBAAC,IAAD,MACA,qDAKZ,yBAAK3J,UAAU,yBAAyB8D,MAAO,CAAEiB,QAAS,OAAQqG,WAAY,SAC1E,yBAAKpL,UAAU,SACX,kBAAC,IAAD,CACIA,UAAW,kBACXkB,KAAK,SACLmD,QAAS,WACLC,IAAE,wBAAwBE,IAAI,MAC9BF,IAAE,iBAAiBU,UACnBV,IAAE,wBAAwBgG,YAAY,OACtCb,EAAc,WAItB,0BACIzJ,UAAU,UACVC,SAAU,SAACC,GACPA,EAAMC,iBACNoJ,EAASrJ,GACTuJ,EAAc,aAGlB,0CACA,yBAAKzJ,UAAU,mBACX,2BACII,KAAK,OACLJ,UAAU,QACVK,KAAK,YACLM,aAAa,MACbC,UAAU,IAEd,yBACIZ,UAAU,SACVa,QAAQ,gBACRC,oBAAoB,QAEpB,0BACId,UAAU,aACVe,EAAE,0EACFC,UAAU,0BAEd,0BACIhB,UAAU,aACVe,EAAE,wFACFC,UAAU,2BAGlB,4CAEJ,yBAAKhB,UAAU,mBACX,2BACII,KAAK,QACLJ,UAAU,cACVK,KAAK,aACLM,aAAa,MACbC,UAAU,IAEd,yBACIZ,UAAU,SACVa,QAAQ,gBACRC,oBAAoB,QAEpB,0BACId,UAAU,aACVe,EAAE,0EACFC,UAAU,0BAEd,0BACIhB,UAAU,aACVe,EAAE,wFACFC,UAAU,2BAGlB,wCAEJ,yBAAKhB,UAAU,2BACX,8BAAUA,UAAU,QAAQK,KAAK,UAAUO,UAAU,IACrD,yBACIZ,UAAU,kBACVa,QAAQ,cACRC,oBAAoB,QAEpB,0BACId,UAAU,aACVe,EAAE,gEAEN,0BACIf,UAAU,aACVe,EAAE,oEAGV,0CAEJ,4BAAQf,UAAS,2BAAsBgL,EAAQhL,WAAaI,KAAK,UAC5D4K,EAAQC,KACT,8BAAOD,EAAQE,QAGvB,yBAAKlL,UAAU,UACX,uBAAGqL,KAAK,8CAA8CrL,UAAU,YAC5D,kBAAC,IAAD,OAEJ,uBAAGqL,KAAK,0CAA0CrL,UAAU,aACxD,kBAAC,IAAD,OAEJ,uBAAGqL,KAAK,yBAAyBrL,UAAU,aACvC,kBAAC,IAAD,OAEJ,uBACIqL,KAAK,2EACLrL,UAAU,YAEV,kBAAC,IAAD,OAEJ,uBACIqL,KAAK,0DACLrL,UAAU,UAEV,kBAAC,IAAD,UAMhB,yBAAKA,UAAU,wBAAwB8D,MAAO,CAAEiB,QAAS,OAAQqG,WAAY,SACzE,yBAAKpL,UAAU,SACX,kBAAC,IAAD,CACIA,UAAW,kBACXkB,KAAK,SACLmD,QAAS,WACLC,IAAE,gBAAgBU,UAClBiF,GAAQ,MAIhB,sCACA,yBAAKjK,UAAU,cACX,0CACA,wSAMA,+UAOA,+LAMJ,yBAAKA,UAAU,cACX,wCACA,yQAQJ,gDACA,iDACqB,6BADrB,mBAEoB,0BAAMqB,GAAG,OAAT,cAFpB,IAEqD,6BAFrD,mCAGoC,8BAEpC,4BACIrB,UAAS,gCAA2BgK,EAAO,OAAS,QACpD3F,QAAS,WACL,IAAIiH,EAAOhH,IAAE,WACbA,IAAE,uBAAuBiH,OAAOD,GAChCA,EAAK9G,IAAIF,IAAE,QAAQ4G,QAAQzG,SAC3B+G,SAASC,YAAY,QACrBH,EAAKzC,SACLoB,GAAQ,GAhc5BhF,QAAMC,gBAAgB,CAClBwG,MAAO,UACPvG,QAAS,4CACT/E,KAAM,UACNgF,UAAW,aACXE,YAAa,CAAC,WAAY,gBAC1BC,aAAc,CAAC,WAAY,aAC3BC,QAAS,CACLC,SAAU,IACVC,UAAU,EACVC,UAAU,EACVC,OAAO,EACPC,OAAO,OAwbEmE,EACG,oCACI,kBAAC,IAAD,MACA,yCAGJ,oCACI,kBAAC,IAAD,MACA,2D,yBCxfjB2B,MAnHf,WACI,IA2EIC,EA3EEjJ,EAAKkJ,aADC,EAEUxM,oBAAS,WAC3B,OAAkC,OAA3BsD,EAAGmJ,QAAQ,YAAuB,GAAKhJ,KAAKV,MAAMO,EAAGmJ,QAAQ,gBAH5D,mBAELrE,EAFK,KAEAsE,EAFA,OAK0B1M,oBAAS,WAC3C,OAA+B,OAAxBsD,EAAGmJ,QAAQ,SAAoB,EAAIE,OAAOC,SAAStJ,EAAGmJ,QAAQ,aAN7D,mBAKL1C,EALK,KAKQH,EALR,OAQsB5J,oBAAS,WACvC,OAA8B,OAAvBsD,EAAGmJ,QAAQ,SAA0BhJ,KAAKV,MAAMO,EAAGmJ,QAAQ,QAAQI,kBATlE,mBAQLxF,EARK,KAQM4C,EARN,OAWwBjK,mBAAS,QAXjC,mBAWLmK,EAXK,KAWOC,EAXP,iDA6DZ,WAAwB0C,GAAxB,eAAAC,EAAA,+EAEwBC,IAAQ9C,SACpB+C,cACAA,mBACAH,EAAK3L,OACL8L,8BANZ,UAQ2B,KANfC,EAFZ,QAQgB9F,QAA6B,OAAb8F,EAAIrB,KARpC,gBAQmDzB,EAAc,QARjE,4BASmB8C,EATnB,yDAWQ,MAAS9C,EAAc,SAX/B,2DA7DY,sBA6FZ,OAhFA7J,qBAAU,WACNiM,aAAaW,QAAQ,WAAY1J,KAAK2J,UAAUhF,MACjD,CAACA,IAEJ7H,qBAAU,WACN+C,EAAG6J,QAAQ,QAAS1J,KAAK2J,UAAUrD,IACnC9E,IAAE,cAAc4D,IAAI,CAAEnD,QAAS,SAC/BT,IAAE,uBAAD,OAAwBmD,EAAI2B,GAAe3B,EAAI2B,GAAa/H,GAAK,GAAjE,OAAyE6G,IAAI,CAC1EnD,QAAS,YAGd,CAACqE,EAAa3B,IAEjB7H,qBAAU,WACNiM,aAAaW,QAAQ,OAAQ9F,KAC9B,CAACA,IAkDGkF,EADPnE,EAAItB,QAAU,EAEJ,yBAAKnG,UAAU,UACX,6BACI,wCACA,oCACU,kBAAC,IAAD,CAAUkB,KAAK,SAAS4C,MAAO,CAAEgB,OAAQ,WADnD,qBAOD2C,EAAIxD,KAAI,SAACwD,EAAKiF,GACrB,OAAO,kBAAClF,EAAD,CAAKrD,IAAKuI,EAAOtN,MAAO,CAAEqI,YAIvC,yBAAKzH,UAAS,eAAU0G,EAAY,GAAK,UACrC,kBAAC,EAAD,CACItH,MAAO,CACHqI,MACAuB,QApEhB,SAAiB2D,GACb,IAAIC,EAAe,CACfvL,GAAIsH,IAAKC,KACTvI,KAAMsM,GAEV1D,EAAexB,EAAItB,QACnB4F,GAAO,SAACrH,GACJ,MAAM,GAAN,mBAAWA,GAAX,CAAiBkI,QA8DT3D,iBACAC,WA3DhB,SAAoB7H,EAAIhB,GACpB0L,EACItE,EAAIxD,KAAI,SAACwD,GAEL,OADIA,EAAIpG,KAAOA,IAAIoG,EAAIpH,KAAOA,GACvBoH,OAwDH0B,WAnDhB,SAAoB9H,GAChBsB,EAAGkK,WAAWxL,GACd,IAAIyL,EAAerF,EAAIW,QAAO,SAACX,GAAD,OAASA,EAAIpG,KAAOA,KAClD4H,EAAe6D,EAAa3G,OAAS,GACrC4F,EAAOe,IAgDK1D,cACAC,UA/ChB,WACI0C,EAAO,IACPpJ,EAAGoK,SA8CSzD,eACA5C,YACA6C,SA1GJ,4CA2GIC,aACAC,mBAGPmC,IC5GPoB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCnFjEC,IAASC,OACL,oCACI,kBAAC,IAAD,CAAmB3O,UAAU,UAC7B,kBAAC,EAAD,OAEJwL,SAASoD,eAAe,SDIrB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIvC,kBAAwBY,OAAOC,SAAS9B,MACpDyD,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMjB,kBAAN,sBAEPU,IAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BrB,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASD,QAAQrM,IAAI,gBAEnB,MAApBsM,EAASzI,QACO,MAAf0I,IAA8D,IAAvCA,EAAYC,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BV,OAAOC,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAmB,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC9B/BE,K","file":"static/js/main.c0ec2bd1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { MdAdd } from \"react-icons/md\";\r\n\r\nconst examples = [\r\n    \"Cook Dinner\",\r\n    \"Wash clothes\",\r\n    \"See a Friend\",\r\n    \"Wash the Car\",\r\n    \"Read a Book\",\r\n    \"Hit the Gym\",\r\n    \"Pay Electricity Bill\",\r\n    \"Drink Plenty of water\",\r\n];\r\n\r\nexport default function Input({ props: { sendProps } }) {\r\n    const [focus, setFocus] = useState(false);\r\n    const [line, setLine] = useState(\"\");\r\n    const [input, setInput] = useState(\"\");\r\n    useEffect(() => {\r\n        focus\r\n            ? setLine(\"What Do you want Todo?...\")\r\n            : setLine(\"eg. \" + examples[Math.floor(Math.random() * 8)]);\r\n    }, [focus]);\r\n    return (\r\n        <form\r\n            className=\"inputBlock\"\r\n            onSubmit={(event) => {\r\n                event.preventDefault();\r\n                sendProps(input);\r\n            }}\r\n        >\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"Input\"\r\n                    name=\"inputBlock\"\r\n                    onChange={({ target: { value } }) => {\r\n                        setInput(value);\r\n                    }}\r\n                    onFocus={() => {\r\n                        setFocus(true);\r\n                    }}\r\n                    onBlur={() => {\r\n                        setFocus(false);\r\n                    }}\r\n                    autoComplete=\"off\"\r\n                    required=\"required\"\r\n                />\r\n                <svg className=\"border\" viewBox=\"0 0 275.05 40\" preserveAspectRatio=\"none\">\r\n                    <path\r\n                        className=\"cls-1 path\"\r\n                        d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                        transform=\"translate(-1.3 -0.77)\"\r\n                    />\r\n                    <path\r\n                        className=\"cls-2 path\"\r\n                        d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                        transform=\"translate(-1.3 -0.77)\"\r\n                    />\r\n                </svg>\r\n                {<span>{line}</span>}\r\n            </div>\r\n            <button className=\"plus\" type=\"submit\">\r\n                <MdAdd fill=\"#222\" className=\"icon\" size=\"1.2rem\" />\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useInterval } from \"react-interval-hook\";\r\nimport { MdCheck, MdClear, MdDelete, MdSettings } from \"react-icons/md\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\nimport $ from \"jquery\";\r\nimport Push from \"push.js\";\r\nimport { store } from \"react-notifications-component\";\r\nimport ls from \"local-storage\";\r\nimport { useTransition, animated } from \"react-spring\";\r\nfunction EachTodo({\r\n    props: {\r\n        eachTodo: {\r\n            id,\r\n            completed,\r\n            Todo,\r\n            DateOptions: { futureDate = null, reminder = false } = {},\r\n        },\r\n        updateTodo,\r\n        removeTodo,\r\n        AddUpdate,\r\n        removeReminder,\r\n    },\r\n}) {\r\n    const [TodoOp, setTodoOp] = useState({\r\n        name: \"\",\r\n        date: \"\",\r\n        reminder: false,\r\n    });\r\n    const [TodoStatus, setTodoStatus] = useState(() => {\r\n        if (Date.now() >= Date.parse(futureDate)) return \"passed\";\r\n        else if (Date.now() >= Date.parse(futureDate) - 1800000) return \"close\";\r\n        else if (reminder) return \"normal\";\r\n        else return \"\";\r\n    });\r\n    const [toggle, setToggle] = useState(\"edit\");\r\n\r\n    useInterval(\r\n        () => {\r\n            var rem = ls.get(`Rem_${id}`);\r\n            rem === undefined || rem === null ? (rem = false) : (rem = JSON.parse(rem));\r\n            if (rem) return;\r\n            if (reminder && !completed && Date.now() >= Date.parse(futureDate) && !rem) {\r\n                Push.create(`Reminder: ${Todo}`, {\r\n                    requireInteraction: false,\r\n                    vibrate: [500, 200, 500],\r\n                });\r\n                setTodoStatus(\"passed\");\r\n                ls.set(`Rem_${id}`, true);\r\n            } else if (\r\n                reminder &&\r\n                completed === false &&\r\n                Date.now() >= Date.parse(futureDate) - 1800000 &&\r\n                !rem\r\n            ) {\r\n                setTodoStatus(\"close\");\r\n            } else if (reminder && completed === false) {\r\n                setTodoStatus(\"normal\");\r\n            }\r\n        },\r\n        1000,\r\n        {\r\n            autoStart: true,\r\n            selfCorrecting: true,\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (reminder && !completed) {\r\n            setToggle(\"reminder\");\r\n        } else if (completed) {\r\n            setToggle(\"completed\");\r\n        } else setToggle(\"edit\");\r\n    }, [reminder, completed]);\r\n\r\n    var Done = {\r\n        opacity: 0.4,\r\n        textDecoration: \"line-through\",\r\n    };\r\n\r\n    const transition = useTransition(toggle, null, {\r\n        from: { transform: \"scale(0)\" },\r\n        enter: { transform: \"scale(1)\" },\r\n        leave: { transform: \"scale(0)\" },\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <div className=\"label\" data-id={`${id}`}>\r\n                <label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        data-id={`${id}`}\r\n                        checked={completed}\r\n                        onChange={() => {\r\n                            updateTodo(id);\r\n                            if (!completed) {\r\n                                removeReminder(id);\r\n                            }\r\n                        }}\r\n                    />\r\n                    <div className=\"Todo\">\r\n                        <div className=\"checkbox-container\">\r\n                            <svg viewBox=\"0 0 100 100\" className=\"checkbox\">\r\n                                <path\r\n                                    className=\"st0\"\r\n                                    d=\"M85,92H15c-3.9,0-7-3.1-7-7V15c0-3.9,3.1-7,7-7h70c3.9,0,7,3.1,7,7v70C92,88.9,88.9,92,85,92z\"\r\n                                />\r\n                                <polyline\r\n                                    className=\"check\"\r\n                                    points=\"22.5,47.5 42.5,67.5 78.5,31.5 \"\r\n                                />\r\n                            </svg>\r\n                        </div>\r\n                        <span style={completed ? Done : null}>{Todo}</span>\r\n                    </div>\r\n                </label>\r\n                <div className=\"op-cont\">\r\n                    {transition.map(({ item, props, key }) => {\r\n                        switch (item) {\r\n                            case \"completed\":\r\n                                return (\r\n                                    <animated.div style={props} key={key} className=\"op\">\r\n                                        <MdDelete\r\n                                            className={\"bin icon\"}\r\n                                            size=\"1.5rem\"\r\n                                            onClick={() => {\r\n                                                removeTodo(id);\r\n                                            }}\r\n                                            data-id={id}\r\n                                        />\r\n                                    </animated.div>\r\n                                );\r\n                            case \"reminder\":\r\n                                return (\r\n                                    <animated.div style={props} key={key} className=\"op\">\r\n                                        <MdSettings\r\n                                            className=\"icon settings\"\r\n                                            id={TodoStatus}\r\n                                            size=\"1.5rem\"\r\n                                            data-id={id}\r\n                                            onClick={() => {\r\n                                                $(`.TodoEdit[data-id=${id}]`).fadeIn();\r\n                                                $(\".TodoEdit .Input[type='text']\")\r\n                                                    .val(Todo)\r\n                                                    .select();\r\n                                            }}\r\n                                        />\r\n                                    </animated.div>\r\n                                );\r\n                            default:\r\n                                return (\r\n                                    <animated.div style={props} key={key} className=\"op\">\r\n                                        <FiEdit\r\n                                            size=\"1.5rem\"\r\n                                            data-id={id}\r\n                                            onClick={() => {\r\n                                                $(`.TodoEdit[data-id=${id}]`).fadeIn();\r\n                                                $(\".TodoEdit .Input[type='text']\")\r\n                                                    .val(Todo)\r\n                                                    .select();\r\n                                            }}\r\n                                        />\r\n                                    </animated.div>\r\n                                );\r\n                        }\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className=\"modalCont TodoEdit right\" data-id={id}>\r\n                <div className=\"modal\">\r\n                    <h3>More Options</h3>\r\n                    <h4>Edit task</h4>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"Input\"\r\n                            autoComplete=\"off\"\r\n                            onChange={({ target: { value } }) => {\r\n                                setTodoOp((prev) => ({ ...prev, name: value }));\r\n                            }}\r\n                        />\r\n                        <svg className=\"border\" viewBox=\"0 0 275.05 40\" preserveAspectRatio=\"none\">\r\n                            <path\r\n                                className=\"cls-1 path\"\r\n                                d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                transdiv=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                            <path\r\n                                className=\"cls-2 path\"\r\n                                d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                        </svg>\r\n                        <span>Edit Task</span>\r\n                    </div>\r\n                    <h4>Set Reminder for</h4>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            className=\"Input\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue={TodoOp.date}\r\n                            onChange={({ target: { value } }) => {\r\n                                setTodoOp((prev) => ({ ...prev, date: value }));\r\n                            }}\r\n                        />\r\n                        <svg className=\"border\" viewBox=\"0 0 275.05 40\" preserveAspectRatio=\"none\">\r\n                            <path\r\n                                className=\"cls-1 path\"\r\n                                d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                transdiv=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                            <path\r\n                                className=\"cls-2 path\"\r\n                                d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    {reminder ? (\r\n                        <button\r\n                            className=\"modalBtn del\"\r\n                            style={{ float: \"none\", margin: \"0 0 20px 0\", display: \"grid\" }}\r\n                            onClick={() => {\r\n                                removeReminder(id);\r\n                                $(\".TodoEdit\").fadeOut();\r\n                            }}\r\n                        >\r\n                            <MdClear />\r\n                            <span> Remove Current Reminder?</span>\r\n                        </button>\r\n                    ) : null}\r\n                    <button\r\n                        className=\"modalBtn save\"\r\n                        onClick={() => {\r\n                            if (Date.parse(TodoOp.date) <= Date.now()) {\r\n                                store.addNotification({\r\n                                    message: \"Setting Date in the Past will not trigger Reminder!\",\r\n                                    type: \"warning\",\r\n                                    container: \"top-center\",\r\n                                    insert: \"top\",\r\n                                    animationIn: [\"animated\", \"bounceIn\"],\r\n                                    animationOut: [\"animated\", \"fadeOut\"],\r\n                                    dismiss: {\r\n                                        duration: 3000,\r\n                                        onScreen: true,\r\n                                        showIcon: true,\r\n                                        touch: true,\r\n                                        click: true,\r\n                                    },\r\n                                });\r\n                                return;\r\n                            }\r\n                            AddUpdate(id, TodoOp);\r\n                            ls.set(`Rem_${id}`, false);\r\n                            $(\".TodoEdit\").fadeOut();\r\n                        }}\r\n                    >\r\n                        <MdCheck />\r\n                        <span>Save</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn cancel\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            $(\".TodoEdit\").fadeOut();\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EachTodo;\r\n","import React from \"react\";\r\nimport EachTodo from \"./EachTodo\";\r\n\r\nexport default function List({\r\n    props: { removeTodo, updateTodo, TodoListArray, filtered, AddUpdate, removeReminder },\r\n}) {\r\n    var TodoBlocks = filtered.map((eachTodo, index) => {\r\n        return (\r\n            <EachTodo\r\n                key={index}\r\n                props={{\r\n                    eachTodo,\r\n                    updateTodo,\r\n                    removeTodo,\r\n                    AddUpdate,\r\n                    removeReminder,\r\n                }}\r\n            />\r\n        );\r\n    });\r\n\r\n    return <div className=\"listContainer\">{TodoListArray.length === 0 ? \"\" : TodoBlocks}</div>;\r\n}\r\n","import React from \"react\";\r\nexport default function Control({\r\n    props: { id, progress, TodoListArray, clearDone, done, statusHandler, status, whichMode },\r\n}) {\r\n    return (\r\n        <div className=\"control\">\r\n            <div className=\"box\">\r\n                <div className=\"percent\">\r\n                    <svg>\r\n                        <linearGradient id={`grad_${id}`} x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"100%\">\r\n                            <stop offset=\"0%\" stopColor=\"#ff0612\"></stop>\r\n                            <stop offset=\"100%\" stopColor=\"#6544ff\"></stop>\r\n                        </linearGradient>\r\n                        <circle cx=\"50%\" cy=\"50%\" r=\"40\" className=\"dark circle\"></circle>\r\n\r\n                        <circle\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            r=\"40\"\r\n                            className=\"grad circle\"\r\n                            style={{\r\n                                strokeDashoffset:\r\n                                    250.92137145996094 - (250.92137145996094 * progress) / 100,\r\n                                strokeWidth: progress === 0 ? \"0px\" : \"10px\",\r\n                                stroke: `url(\"#grad_${id}\")`,\r\n                            }}\r\n                        ></circle>\r\n                    </svg>\r\n                    <div className={`number ${whichMode ? \"darkMode\" : \"LightMode\"}`}>\r\n                        {progress !== 0 || TodoListArray.length !== 0 ? (\r\n                            <>\r\n                                <h2>\r\n                                    {progress}\r\n                                    <span className=\"perc\">%</span>\r\n                                </h2>\r\n                                <span className=\"comp\">completed</span>\r\n                            </>\r\n                        ) : (\r\n                            <h2 className=\"empty\">No Task</h2>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <button\r\n                    onClick={clearDone}\r\n                    disabled={done === 0 ? true : false}\r\n                    className={done === 0 ? \"disable\" : \"clear\"}\r\n                >\r\n                    &#10005; Clear Done\r\n                </button>\r\n                <select name=\"filter\" id=\"filter\" onChange={statusHandler} value={status}>\r\n                    <option value=\"All\">All</option>\r\n                    <option value=\"Completed\">Completed</option>\r\n                    <option value=\"Uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport uuid from \"uuid\";\r\nimport Input from \"./Inner Component/Input\";\r\nimport List from \"./Inner Component/List\";\r\nimport Control from \"./Inner Component/Control\";\r\nimport $ from \"jquery\";\r\nimport ls from \"local-storage\";\r\n\r\nexport default function App({ props: { app } }) {\r\n    const [id] = useState(app.id);\r\n    const [Todo, setTodo] = useState({});\r\n    const [TodoListArray, setTodoListArray] = useState(() => {\r\n        return ls.get(id) === null ? [] : ls.get(id);\r\n    });\r\n    const [done, setDone] = useState(0);\r\n    const [progress, setProgress] = useState(\"\");\r\n    const [filtered, setFiltered] = useState([]);\r\n    const [status, setStatus] = useState(\"All\");\r\n\r\n    useEffect(() => {\r\n        ls.set(id, TodoListArray);\r\n    }, [TodoListArray, id]);\r\n\r\n    useEffect(() => {\r\n        const DoneTodos = TodoListArray.filter((arr) => arr.completed === true);\r\n        var progress = Math.floor((DoneTodos.length / TodoListArray.length) * 100);\r\n        if (isNaN(progress)) progress = 0;\r\n        setProgress(progress);\r\n        setDone(DoneTodos.length);\r\n    }, [TodoListArray]);\r\n\r\n    useEffect(() => {\r\n        switch (status) {\r\n            case \"Completed\":\r\n                setFiltered(TodoListArray.filter((arr) => arr.completed === true));\r\n                break;\r\n            case \"Uncompleted\":\r\n                setFiltered(TodoListArray.filter((arr) => arr.completed === false));\r\n                break;\r\n            default:\r\n                setFiltered(TodoListArray);\r\n        }\r\n    }, [TodoListArray, status]);\r\n\r\n    useEffect(() => {\r\n        Trans(false);\r\n    }, [status]);\r\n\r\n    function Trans(x) {\r\n        if (x) {\r\n            $(\".checkbox path\").css(\"transition\", \".4s\");\r\n            $(\".check\").css(\"transition\", \".4s\");\r\n        } else {\r\n            $(\".checkbox path\").css(\"transition\", \"none\");\r\n            $(\".check\").css(\"transition\", \"none\");\r\n        }\r\n    }\r\n\r\n    function sendProps(todo) {\r\n        var inputBox = $(\".Input\");\r\n        if (todo.trim() === \"\" || todo.trim() === undefined) {\r\n            inputBox.val(null).focus();\r\n            return alert(\"Please write a Task\");\r\n        }\r\n        Todo.Todo = todo;\r\n        Todo.id = uuid.v4();\r\n        Todo.completed = false;\r\n        Todo.DateOptions = {\r\n            futureDate: null,\r\n            reminder: false,\r\n        };\r\n        setTodoListArray((prev) => [...prev, Todo]);\r\n        inputBox.val(null).focus();\r\n        setTodo({});\r\n        setStatus(\"All\");\r\n    }\r\n\r\n    function updateTodo(id) {\r\n        Trans(true);\r\n        setTodoListArray(\r\n            TodoListArray.map((arr) => {\r\n                if (arr.id === id) arr.completed = !arr.completed;\r\n                return arr;\r\n            })\r\n        );\r\n    }\r\n\r\n    function AddUpdate(id, { name, date }) {\r\n        if (name) {\r\n            setTodoListArray(\r\n                TodoListArray.map((arr) => {\r\n                    if (arr.id === id) arr.Todo = name;\r\n                    return arr;\r\n                })\r\n            );\r\n        }\r\n        if (date) {\r\n            setDate(id, date);\r\n        }\r\n\r\n        function setDate(id, date) {\r\n            setTodoListArray(\r\n                TodoListArray.map((arr) => {\r\n                    if (arr.id === id) {\r\n                        arr.DateOptions = {\r\n                            futureDate: date,\r\n                            reminder: true,\r\n                        };\r\n                    }\r\n                    return arr;\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    function removeReminder(id) {\r\n        setTodoListArray(\r\n            TodoListArray.map((arr) => {\r\n                if (arr.id === id) {\r\n                    arr.DateOptions.reminder = false;\r\n                    arr.DateOptions.futureDate = null;\r\n                }\r\n                return arr;\r\n            })\r\n        );\r\n        ls.remove(`Rem_${id}`);\r\n    }\r\n\r\n    function removeTodo(id) {\r\n        Trans(false);\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.id !== id));\r\n        ls.remove(`Rem_${id}`);\r\n    }\r\n\r\n    function clearDone() {\r\n        Trans(false);\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.completed === false));\r\n    }\r\n\r\n    function statusHandler({ target: { value } }) {\r\n        setStatus(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" data-id={id}>\r\n            <h1 className=\"ListName\">{app.name}</h1>\r\n            <Control\r\n                props={{\r\n                    id,\r\n                    progress,\r\n                    TodoListArray,\r\n                    clearDone,\r\n                    done,\r\n                    status,\r\n                    statusHandler,\r\n                }}\r\n            />\r\n            <Input\r\n                props={{\r\n                    sendProps,\r\n                }}\r\n            />\r\n            <List\r\n                props={{\r\n                    removeTodo,\r\n                    updateTodo,\r\n                    TodoListArray,\r\n                    filtered,\r\n                    AddUpdate,\r\n                    removeReminder,\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    MdDehaze,\r\n    MdClear,\r\n    MdAdd,\r\n    MdDelete,\r\n    MdList,\r\n    MdDeleteSweep,\r\n    MdCheck,\r\n    MdError,\r\n    MdSend,\r\n} from \"react-icons/md\";\r\nimport { FiHeart, FiMoon, FiSun, FiPhone, FiLoader, FiCopy } from \"react-icons/fi\";\r\nimport {\r\n    FaFacebookF,\r\n    FaInstagram,\r\n    FaWhatsapp,\r\n    FaFacebookMessenger,\r\n    FaGithub,\r\n} from \"react-icons/fa\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\nimport $ from \"jquery\";\r\n\r\nimport { store } from \"react-notifications-component\";\r\nfunction OuterControl({\r\n    props: {\r\n        app,\r\n        addList,\r\n        setCurrentList,\r\n        updateList,\r\n        deleteList,\r\n        currentList,\r\n        clearList,\r\n        whichMode,\r\n        setwhichMode,\r\n        sendForm,\r\n        formStatus,\r\n        setFormStatus,\r\n    },\r\n}) {\r\n    const [side, setSide] = useState(false);\r\n    const [list, setList] = useState([]);\r\n    const [currentListId, setCurrentListId] = useState(\"\");\r\n    const [copy, setCopy] = useState(false);\r\n    const [ListName, setListName] = useState(\"\");\r\n    // creates Lists of TodoList Categories\r\n    useEffect(() => {\r\n        var list = app.map((app, index) => {\r\n            return (\r\n                <IconContext.Provider\r\n                    value={{\r\n                        size: \"1.5rem\",\r\n                        className: `ListSetIcon ${whichMode ? \"\" : \"light\"}`,\r\n                        style: { fill: whichMode ? \"white\" : \"#333\" },\r\n                    }}\r\n                    key={index}\r\n                >\r\n                    <li\r\n                        className={`listSet ${whichMode ? \"dark\" : \"light\"}`}\r\n                        onClick={(event) => {\r\n                            event.persist();\r\n                            if (event.target.tagName === \"svg\" || event.target.tagName === \"path\") {\r\n                                return;\r\n                            }\r\n                            setCurrentList(index);\r\n                            setSide(false);\r\n                            $(\".listSet\").removeClass(\"active\");\r\n                            $(`.listSet[data-id=\"${app.id}\"]`).addClass(\"active\");\r\n                        }}\r\n                    >\r\n                        <MdList className=\"icon\" />\r\n                        <h3>{app.name}</h3>\r\n                        <FiEdit\r\n                            style={{ stroke: whichMode ? \"white\" : \"#333\", fill: \"none\" }}\r\n                            className=\"icon edit\"\r\n                            onClick={() => {\r\n                                $(\".rename\").fadeIn();\r\n                                $(\".renamebox\").val(app.name).select();\r\n                                setCurrentListId(app.id);\r\n                            }}\r\n                        />\r\n                        <MdDelete\r\n                            className=\"icon bin\"\r\n                            onClick={() => {\r\n                                $(\".delete\").fadeIn();\r\n                                setCurrentListId(app.id);\r\n                            }}\r\n                        />\r\n                    </li>\r\n                </IconContext.Provider>\r\n            );\r\n        });\r\n        setList(list);\r\n    }, [app, setCurrentList, whichMode]);\r\n\r\n    $(`.listSet`).removeClass(\"active\");\r\n    $(`.listSet:eq(${currentList})`).addClass(\"active\");\r\n\r\n    if (side) {\r\n        $(\".sideBarUnderLay\")\r\n            .fadeIn()\r\n            .click(() => {\r\n                setSide(false);\r\n            });\r\n    } else {\r\n        $(\".sideBarUnderLay\").fadeOut();\r\n    }\r\n\r\n    function checkEmail(event, x) {\r\n        var val = event.target.value.trim();\r\n        if (!/@/.test(val) || val === \"\") {\r\n            x.addClass(\"err\");\r\n        } else {\r\n            x.removeClass(\"err\");\r\n        }\r\n    }\r\n\r\n    $(\".contactModal .Input.email\").on({\r\n        keyup: function (event) {\r\n            checkEmail(event, $(this));\r\n        },\r\n        blur: function (event) {\r\n            checkEmail(event, $(this));\r\n        },\r\n    });\r\n    function check(input) {\r\n        if (input.val().trim() === \"\") {\r\n            input.addClass(\"err\");\r\n        } else {\r\n            input.removeClass(\"err\");\r\n        }\r\n    }\r\n    $(\".contactModal .Input:not(.email)\").on({\r\n        blur: function () {\r\n            check($(this));\r\n        },\r\n\r\n        keyup: function () {\r\n            check($(this));\r\n        },\r\n    });\r\n\r\n    var sendBtn = {\r\n        className: \"\",\r\n        icon: \"\",\r\n        text: \"\",\r\n    };\r\n    switch (formStatus) {\r\n        case \"sending\":\r\n            sendBtn.className = sendBtn.text = \"Sending\";\r\n            sendBtn.icon = <FiLoader className=\"loading\" />;\r\n            break;\r\n        case \"sent\":\r\n            sendBtn.className = sendBtn.text = \"Sent\";\r\n            sendBtn.icon = <MdCheck />;\r\n            break;\r\n        case \"error\":\r\n            sendBtn.className = \"Error\";\r\n            sendBtn.text = \"An Error Occured!\";\r\n            sendBtn.icon = <MdError />;\r\n            break;\r\n        default:\r\n            sendBtn.className = sendBtn.text = \"Send\";\r\n            sendBtn.icon = <MdSend />;\r\n    }\r\n\r\n    function copyComp() {\r\n        store.addNotification({\r\n            title: \"Copied!\",\r\n            message: \"Account Number Copied, Thank You so Much!\",\r\n            type: \"success\",\r\n            container: \"top-center\",\r\n            animationIn: [\"animated\", \"jackInTheBox\"],\r\n            animationOut: [\"animated\", \"bounceOut\"],\r\n            dismiss: {\r\n                duration: 3000,\r\n                onScreen: true,\r\n                showIcon: true,\r\n                touch: true,\r\n                click: true,\r\n            },\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"ham\">\r\n                <MdDehaze\r\n                    size=\"1.5rem\"\r\n                    className=\"icon\"\r\n                    onClick={() => {\r\n                        setSide(true);\r\n                    }}\r\n                />\r\n            </div>\r\n            <div className=\"sideBarUnderLay\"></div>\r\n            <div className={`sideBar ${side ? \"openBar\" : \"\"} ${whichMode ? \"\" : \"lightMode\"}`}>\r\n                <h2>\r\n                    Your List Set\r\n                    <MdClear\r\n                        size=\"1.5rem\"\r\n                        className=\"icon\"\r\n                        onClick={() => {\r\n                            setSide(false);\r\n                        }}\r\n                    />\r\n                </h2>\r\n                <ul>\r\n                    {list}\r\n                    <hr />\r\n                    <IconContext.Provider\r\n                        value={{ size: \"1.5rem\", style: { fill: whichMode ? \"white\" : \"#333\" } }}\r\n                    >\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".newModal\").fadeIn();\r\n                            }}\r\n                        >\r\n                            <MdAdd />\r\n                            <h3>Add New List</h3>\r\n                        </li>\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".clearListModal\").fadeIn();\r\n                            }}\r\n                        >\r\n                            <MdDeleteSweep />\r\n                            <h3>Clear All Lists</h3>\r\n                        </li>\r\n\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                setSide(false);\r\n                                setwhichMode(!whichMode);\r\n                            }}\r\n                        >\r\n                            {whichMode ? <FiSun fill=\"white\" /> : <FiMoon stroke=\"transparent\" />}\r\n                            <h3>Turn on {whichMode ? \"Light\" : \"Dark\"} Mode</h3>\r\n                        </li>\r\n                        <hr />\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".contactModal\").fadeIn();\r\n                            }}\r\n                        >\r\n                            <FiPhone style={{ strokeWidth: 0 }} />\r\n                            <h3>Contact Me</h3>\r\n                        </li>\r\n                        <li\r\n                            className=\"subList\"\r\n                            onClick={() => {\r\n                                $(\".donateModal\").fadeIn();\r\n                            }}\r\n                        >\r\n                            <FiHeart style={{ strokeWidth: 0 }} />\r\n                            <h3>Donate</h3>\r\n                        </li>\r\n                    </IconContext.Provider>\r\n                    <hr />\r\n                </ul>\r\n            </div>\r\n            {/* Sets name of New List */}\r\n            <div className=\"modalCont newModal right\">\r\n                <form\r\n                    className=\"modal\"\r\n                    onSubmit={(event) => {\r\n                        event.preventDefault();\r\n                        $(\".newModal\").fadeOut();\r\n                        $(\".Input\").val(null);\r\n                        addList(ListName);\r\n                        setSide(false);\r\n                    }}\r\n                >\r\n                    <h3>list Name</h3>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"Input\"\r\n                            name=\"inputBlock\"\r\n                            onChange={({ target: { value } }) => {\r\n                                setListName(value);\r\n                            }}\r\n                            autoComplete=\"off\"\r\n                            required={true}\r\n                        />\r\n                        <svg className=\"border\" viewBox=\"0 0 275.05 40\" preserveAspectRatio=\"none\">\r\n                            <path\r\n                                className=\"cls-1 path\"\r\n                                d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                            <path\r\n                                className=\"cls-2 path\"\r\n                                d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                        </svg>\r\n                        <span>List Name...</span>\r\n                    </div>\r\n                    <button className=\"modalBtn save\" type=\"submit\">\r\n                        <MdCheck />\r\n                        <span>Save</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn cancel\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            $(\".newModal\").fadeOut();\r\n                            $(\".Input\").val(null);\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n            {/* Renames a list */}\r\n            <div className=\"modalCont rename right\">\r\n                <form\r\n                    className=\"modal\"\r\n                    onSubmit={(event) => {\r\n                        event.preventDefault();\r\n                        $(\".rename\").fadeOut();\r\n                        $(\".Input\").val(null);\r\n                        updateList(currentListId, ListName);\r\n                        setCurrentListId(\"\");\r\n                    }}\r\n                >\r\n                    <h3>Rename Todo</h3>\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"Input renamebox\"\r\n                            name=\"inputBlock\"\r\n                            onChange={({ target: { value } }) => {\r\n                                setListName(value);\r\n                            }}\r\n                            autoComplete=\"off\"\r\n                            required={true}\r\n                        />\r\n                        <svg className=\"border\" viewBox=\"0 0 275.05 40\" preserveAspectRatio=\"none\">\r\n                            <path\r\n                                className=\"cls-1 path\"\r\n                                d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                            <path\r\n                                className=\"cls-2 path\"\r\n                                d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                transform=\"translate(-1.3 -0.77)\"\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <button className=\"modalBtn save\" type=\"submit\">\r\n                        <MdCheck />\r\n                        <span>Save</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn cancel\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            $(\".rename\").fadeOut();\r\n                            $(\".Input\").val(null);\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n            {/* delets a list */}\r\n            <div className=\"modalCont delete center\">\r\n                <div className=\"modal\">\r\n                    <MdDelete fontSize=\"3rem\" className=\"bin\" />\r\n                    <h3>Are you sure You want to Delete this List?</h3>\r\n                    <p>Entire List will be removed permanently</p>\r\n\r\n                    <button\r\n                        className=\"modalBtn cancel\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            $(\".delete\").fadeOut();\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn del\"\r\n                        type=\"submit\"\r\n                        onClick={() => {\r\n                            $(\".delete\").fadeOut();\r\n                            deleteList(currentListId);\r\n                            setSide(false);\r\n                        }}\r\n                    >\r\n                        <MdCheck />\r\n                        <span>OK</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {/* Clears all Lists */}\r\n            <div className=\"modalCont clearListModal center\">\r\n                <div className=\"modal\">\r\n                    <MdDeleteSweep fontSize=\"3rem\" className=\"bin\" />\r\n                    <h3>Are you sure You want to Clear All Your Lists?</h3>\r\n                    <p>All Lists will be removed permanently and Cannot be recovered!</p>\r\n                    <button\r\n                        className=\"modalBtn cancel\"\r\n                        onClick={() => {\r\n                            $(\".clearListModal\").fadeOut();\r\n                        }}\r\n                    >\r\n                        <MdClear />\r\n                        <span>Cancel</span>\r\n                    </button>\r\n                    <button\r\n                        className=\"modalBtn del\"\r\n                        onClick={() => {\r\n                            $(\".clearListModal\").fadeOut();\r\n                            clearList();\r\n                            setSide(false);\r\n                        }}\r\n                    >\r\n                        <MdDeleteSweep />\r\n                        <span> Clear all Lists</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {/* Contact Me Section */}\r\n            <div className=\"modalCont contactModal\" style={{ display: \"none\", userSelect: \"text\" }}>\r\n                <div className=\"modal\">\r\n                    <MdClear\r\n                        className={\"icon closeModal\"}\r\n                        size=\"1.5rem\"\r\n                        onClick={() => {\r\n                            $(\".contactModal .Input\").val(null);\r\n                            $(\".contactModal\").fadeOut();\r\n                            $(\".contactModal .Input\").removeClass(\"err\");\r\n                            setFormStatus(\"send\");\r\n                        }}\r\n                    />\r\n\r\n                    <form\r\n                        className=\"contact\"\r\n                        onSubmit={(event) => {\r\n                            event.preventDefault();\r\n                            sendForm(event);\r\n                            setFormStatus(\"sending\");\r\n                        }}\r\n                    >\r\n                        <h3>Contact Me</h3>\r\n                        <div className=\"input-container\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"Input\"\r\n                                name=\"from_name\"\r\n                                autoComplete=\"off\"\r\n                                required={true}\r\n                            />\r\n                            <svg\r\n                                className=\"border\"\r\n                                viewBox=\"0 0 275.05 40\"\r\n                                preserveAspectRatio=\"none\"\r\n                            >\r\n                                <path\r\n                                    className=\"cls-1 path\"\r\n                                    d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                                <path\r\n                                    className=\"cls-2 path\"\r\n                                    d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                            </svg>\r\n                            <span>Full Name</span>\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <input\r\n                                type=\"email\"\r\n                                className=\"Input email\"\r\n                                name=\"from_email\"\r\n                                autoComplete=\"off\"\r\n                                required={true}\r\n                            />\r\n                            <svg\r\n                                className=\"border\"\r\n                                viewBox=\"0 0 275.05 40\"\r\n                                preserveAspectRatio=\"none\"\r\n                            >\r\n                                <path\r\n                                    className=\"cls-1 path\"\r\n                                    d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                                <path\r\n                                    className=\"cls-2 path\"\r\n                                    d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                                    transform=\"translate(-1.3 -0.77)\"\r\n                                />\r\n                            </svg>\r\n                            <span>email</span>\r\n                        </div>\r\n                        <div className=\"input-container message\">\r\n                            <textarea className=\"Input\" name=\"message\" required={true}></textarea>\r\n                            <svg\r\n                                className=\"border textarea\"\r\n                                viewBox=\"0 0 309 277\"\r\n                                preserveAspectRatio=\"none\"\r\n                            >\r\n                                <path\r\n                                    className=\"cls-1 path\"\r\n                                    d=\"M154.5,1.5h138a15,15,0,0,1,15,15v244a15,15,0,0,1-15,15h-138\"\r\n                                />\r\n                                <path\r\n                                    className=\"cls-2 path\"\r\n                                    d=\"M154.5,275.5H16.5a15,15,0,0,1-15-15V16.5a15,15,0,0,1,15-15h138\"\r\n                                />\r\n                            </svg>\r\n                            <span>Message</span>\r\n                        </div>\r\n                        <button className={`modalBtn sendBtn ${sendBtn.className}`} type=\"submit\">\r\n                            {sendBtn.icon}\r\n                            <span>{sendBtn.text}</span>\r\n                        </button>\r\n                    </form>\r\n                    <div className=\"social\">\r\n                        <a href=\"https://www.facebook.com/crimson.oluwatowo/\" className=\"facebook\">\r\n                            <FaFacebookF />\r\n                        </a>\r\n                        <a href=\"https://www.instagram.com/crimson_corp/\" className=\"instagram\">\r\n                            <FaInstagram />\r\n                        </a>\r\n                        <a href=\"m.me/oluwatowo_rosanwo\" className=\"messenger\">\r\n                            <FaFacebookMessenger />\r\n                        </a>\r\n                        <a\r\n                            href=\"https://api.whatsapp.com/send?phone=+2348024537884&text=Hi20%Crimson%20%\"\r\n                            className=\"whatsapp\"\r\n                        >\r\n                            <FaWhatsapp />\r\n                        </a>\r\n                        <a\r\n                            href=\"https://https://github.com/CRIMSON-CORP/React-Todo-App/\"\r\n                            className=\"github\"\r\n                        >\r\n                            <FaGithub />\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* Donate Section */}\r\n            <div className=\"modalCont donateModal\" style={{ display: \"none\", userSelect: \"text\" }}>\r\n                <div className=\"modal\">\r\n                    <MdClear\r\n                        className={\"icon closeModal\"}\r\n                        size=\"1.5rem\"\r\n                        onClick={() => {\r\n                            $(\".donateModal\").fadeOut();\r\n                            setCopy(false);\r\n                        }}\r\n                    />\r\n\r\n                    <h3>Donate</h3>\r\n                    <div className=\"info-block\">\r\n                        <h4>- About Me</h4>\r\n                        <p>\r\n                            My Name is Oluwatowo Rosanwo Mayowa, I'm a 200L Student of The\r\n                            University Of Ibadan studying Food Technology, I started Web Development\r\n                            in 2018 and Now I'm a Self Taught Intermediate Full Stack Web Developer\r\n                            and Aspiring UI/UX Deisgner, Im also a Logo/Video Editor.\r\n                        </p>\r\n                        <p>\r\n                            I've had intense Self training on basics of Web Development which\r\n                            include HTML,CSS and Vanilla JAVASCRIPT, I Studied jQuery and React\r\n                            (This PWA was build With React), as well as back-end Frameworks Like\r\n                            NodeJS Express, and Database Query Language MySQL and Ive Built Projects\r\n                            With all These Technologies.\r\n                        </p>\r\n                        <p>\r\n                            I'm really good at solving problems and really bad at giving up on a\r\n                            project, I aspire to be hired as an Intern and Then gradute to Being a\r\n                            Frelance Developer.\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"info-block\">\r\n                        <h4>- Donate</h4>\r\n                        <p>\r\n                            Please if You really Like my Work and have a some money to spare, Kindly\r\n                            make a Donation To me as This will enhance my Progress and Productivity\r\n                            and also make me work harder and Develop more Apps that you will\r\n                            Definately find usefull\r\n                        </p>\r\n                    </div>\r\n\r\n                    <h4>Account Details:</h4>\r\n                    <pre>\r\n                        Bank: First Bank <br />\r\n                        Account Number: <span id=\"acc\">3123872415</span> <br />\r\n                        Account Name: Oluwatowo Rosanwo <br />\r\n                    </pre>\r\n                    <button\r\n                        className={`copy modalBtn sendBtn ${copy ? \"sent\" : \"send\"}`}\r\n                        onClick={() => {\r\n                            var temp = $(\"<input>\");\r\n                            $(\".donateModal .modal\").append(temp);\r\n                            temp.val($(\"#acc\").text()).select();\r\n                            document.execCommand(\"copy\");\r\n                            temp.remove();\r\n                            setCopy(true);\r\n                            copyComp();\r\n                        }}\r\n                    >\r\n                        {copy ? (\r\n                            <>\r\n                                <MdCheck />\r\n                                <span>Copied</span>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <FiCopy />\r\n                                <span>Copy Account Number</span>\r\n                            </>\r\n                        )}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default OuterControl;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport App from \"./App\";\r\nimport uuid from \"uuid\";\r\nimport OuterControl from \"./OuterControl\";\r\nimport { MdDehaze } from \"react-icons/md\";\r\nimport \"animate.css\";\r\nimport emailjs from \"emailjs-com\";\r\nimport $ from \"jquery\";\r\n\r\nfunction Main() {\r\n    const ls = localStorage;\r\n    const [app, setApp] = useState(() => {\r\n        return ls.getItem(\"AppLocal\") === null ? [] : JSON.parse(ls.getItem(\"AppLocal\"));\r\n    });\r\n    const [currentList, setCurrentList] = useState(() => {\r\n        return ls.getItem(\"Index\") === null ? 0 : Number.parseInt(ls.getItem(\"Index\"));\r\n    });\r\n    const [whichMode, setwhichMode] = useState(() => {\r\n        return ls.getItem(\"mode\") === null ? true : JSON.parse(ls.getItem(\"mode\").toLowerCase());\r\n    });\r\n    const [formStatus, setFormStatus] = useState(\"send\");\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"AppLocal\", JSON.stringify(app));\r\n    }, [app]);\r\n\r\n    useEffect(() => {\r\n        ls.setItem(\"Index\", JSON.stringify(currentList));\r\n        $(`.container`).css({ display: \"none\" });\r\n        $(`.container[data-id=\"${app[currentList] ? app[currentList].id : \"\"}\"]`).css({\r\n            display: \"block\",\r\n        });\r\n        // eslint-disable-next-line\r\n    }, [currentList, app]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"mode\", whichMode);\r\n    }, [whichMode]);\r\n\r\n    function addList(newListName) {\r\n        let NewListProps = {\r\n            id: uuid.v4(),\r\n            name: newListName,\r\n        };\r\n        setCurrentList(app.length);\r\n        setApp((prev) => {\r\n            return [...prev, NewListProps];\r\n        });\r\n    }\r\n\r\n    function updateList(id, name) {\r\n        setApp(\r\n            app.map((app) => {\r\n                if (app.id === id) app.name = name;\r\n                return app;\r\n            })\r\n        );\r\n    }\r\n\r\n    function deleteList(id) {\r\n        ls.removeItem(id);\r\n        var filteredList = app.filter((app) => app.id !== id);\r\n        setCurrentList(filteredList.length - 1);\r\n        setApp(filteredList);\r\n    }\r\n    function clearList() {\r\n        setApp([]);\r\n        ls.clear();\r\n    }\r\n\r\n    async function sendForm(form) {\r\n        try {\r\n            var res = await emailjs.sendForm(\r\n                process.env.REACT_APP_Service_id,\r\n                process.env.REACT_APP_template_id,\r\n                form.target,\r\n                process.env.REACT_APP_User_ID\r\n            );\r\n            if (res.status === 1 || res.text === \"OK\") setFormStatus(\"sent\");\r\n            else throw res;\r\n        } catch (err) {\r\n            if (err) setFormStatus(\"error\");\r\n        }\r\n    }\r\n\r\n    var content;\r\n    app.length <= 0\r\n        ? (content = (\r\n              <div className=\"noList\">\r\n                  <div>\r\n                      <h1>No Lists</h1>\r\n                      <p>\r\n                          Click <MdDehaze size=\"1.2rem\" style={{ margin: \"0 5px\" }} /> to make a\r\n                          List\r\n                      </p>\r\n                  </div>\r\n              </div>\r\n          ))\r\n        : (content = app.map((app, Index) => {\r\n              return <App key={Index} props={{ app }} />;\r\n          }));\r\n\r\n    return (\r\n        <div className={`main ${whichMode ? \"\" : \"light\"}`}>\r\n            <OuterControl\r\n                props={{\r\n                    app,\r\n                    addList,\r\n                    setCurrentList,\r\n                    updateList,\r\n                    deleteList,\r\n                    currentList,\r\n                    clearList,\r\n                    setwhichMode,\r\n                    whichMode,\r\n                    sendForm,\r\n                    formStatus,\r\n                    setFormStatus,\r\n                }}\r\n            />\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.css\";\r\nimport \"react-notifications-component/dist/theme.css\";\r\nimport \"animate.css/animate.compat.css\";\r\nimport Main from \"./Components/Main\";\r\n// import Test from \"./Test\";\r\nimport ReactNotification from \"react-notifications-component\";\r\nimport \"react-notifications-component/dist/theme.css\";\r\nimport \"animate.css/animate.compat.css\";\r\n\r\n// import Test from \"./Test\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nReactDOM.render(\r\n    <>\r\n        <ReactNotification className=\"notif\" />\r\n        <Main />\r\n    </>,\r\n    document.getElementById(\"root\")\r\n);\r\nserviceWorker.register();\r\n"],"sourceRoot":""}