{"version":3,"sources":["Components/Inner Component/Input.js","Components/Inner Component/EachTodo.js","Components/Inner Component/List.js","Components/Inner Component/Control.js","Components/App.js","serviceWorker.js","index.js"],"names":["Input","props","sendProps","setInput","className","onSubmit","id","type","name","placeholder","onChange","autoComplete","required","aria-label","role","EachTodo","completed","Todo","updateTodo","removeTodo","comp","data-id","checked","viewBox","d","points","style","opacity","textDecoration","transform","fontWeight","onClick","List","TodoListArray","TodoBlocks","filtered","map","eachTodo","index","key","length","Control","progress","clearDone","done","statusHandler","status","x1","y1","x2","y2","offset","stopColor","cx","cy","r","strokeDashoffset","strokeWidth","disabled","value","App","useState","setTodo","setTodoListArray","setDone","setProgress","setFiltered","setStatus","useEffect","DoneTodos","filter","arr","Math","floor","isNaN","FilterLogic","path","document","querySelectorAll","check","i","transition","localStorage","getItem","setItem","JSON","stringify","TodoLocal","parse","target","event","preventDefault","inputBox","getElementById","todo","trim","undefined","alert","uuid","v4","prev","focus","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1837257b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Input({ props: { sendProps, setInput } }) {\r\n    return (\r\n        <form className=\"inputBlock\" onSubmit={sendProps}>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    id=\"inputBox\"\r\n                    type=\"text\"\r\n                    name=\"inputBlock\"\r\n                    placeholder=\"What Do you want Todo?...\"\r\n                    onChange={setInput}\r\n                    autoComplete=\"off\"\r\n                    required=\"required\"\r\n                />\r\n                <div className=\"input\"></div>\r\n            </div>\r\n            <button className=\"plus\" type=\"submit\">\r\n                <span aria-label=\"addTodo\" role=\"img\">\r\n                    &#10133;\r\n                </span>\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction EachTodo({\r\n    props: {\r\n        EachTodo: { id, completed, Todo },\r\n        updateTodo,\r\n        removeTodo,\r\n    },\r\n}) {\r\n    var comp = completed;\r\n    var Done = {\r\n        opacity: 0.4,\r\n        textDecoration: \"line-through\",\r\n    };\r\n\r\n    return (\r\n        <div className=\"label\" data-id={`${id}`}>\r\n            <label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    data-id={`${id}`}\r\n                    checked={comp}\r\n                    onChange={() => {\r\n                        updateTodo(id);\r\n                    }}\r\n                />\r\n                <div className=\"Todo\">\r\n                    <div className=\"checkbox-container\">\r\n                        <svg viewBox=\"0 0 100 100\" className=\"checkbox\">\r\n                            <path\r\n                                className=\"st0\"\r\n                                d=\"M85,92H15c-3.9,0-7-3.1-7-7V15c0-3.9,3.1-7,7-7h70c3.9,0,7,3.1,7,7v70C92,88.9,88.9,92,85,92z\"\r\n                            />\r\n                            <polyline className=\"check\" points=\"22.5,47.5 42.5,67.5 78.5,31.5 \" />\r\n                        </svg>\r\n                    </div>\r\n                    <span style={comp ? Done : null}>\r\n                        {Todo} <span className=\"cross\"></span>\r\n                    </span>\r\n                </div>\r\n            </label>\r\n            <div\r\n                className={\"close\"}\r\n                style={{\r\n                    transform: comp ? \"scale(1)\" : \"scale(0)\",\r\n                    fontWeight: \"bolder\",\r\n                }}\r\n                onClick={() => {\r\n                    removeTodo(id);\r\n                }}\r\n                data-id={id}\r\n            >\r\n                &#10005;\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EachTodo;\r\n","import React from \"react\";\r\nimport EachTodo from \"./EachTodo\";\r\n\r\nexport default function List({ props: { removeTodo, updateTodo, TodoListArray, filtered } }) {\r\n    var TodoBlocks = filtered.map((eachTodo, index) => {\r\n        return (\r\n            <EachTodo\r\n                key={index}\r\n                props={{\r\n                    EachTodo: eachTodo,\r\n                    updateTodo: updateTodo,\r\n                    removeTodo: removeTodo,\r\n                }}\r\n            />\r\n        );\r\n    });\r\n\r\n    return <div className=\"listContainer\">{TodoListArray.length === 0 ? \"\" : TodoBlocks}</div>;\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Control({\r\n    props: { progress, TodoListArray, clearDone, done, statusHandler, status },\r\n}) {\r\n    return (\r\n        <div className=\"control\">\r\n            <div className=\"box\">\r\n                <div className=\"percent\">\r\n                    <svg>\r\n                        <linearGradient id=\"grad\" x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"100%\">\r\n                            <stop offset=\"0%\" stopColor=\"#ff0612\"></stop>\r\n                            <stop offset=\"100%\" stopColor=\"#6544ff\"></stop>\r\n                        </linearGradient>\r\n                        <circle cx=\"50%\" cy=\"50%\" r=\"40\" className=\"dark circle\"></circle>\r\n\r\n                        <circle\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            r=\"40\"\r\n                            className=\"grad circle\"\r\n                            style={{\r\n                                strokeDashoffset:\r\n                                    250.92137145996094 - (250.92137145996094 * progress) / 100,\r\n                                strokeWidth: progress === 0 ? \"0px\" : \"10px\",\r\n                            }}\r\n                        ></circle>\r\n                    </svg>\r\n                    <div className=\"number\">\r\n                        {progress !== 0 || TodoListArray.length !== 0 ? (\r\n                            <>\r\n                                <h2>\r\n                                    {progress}\r\n                                    <span className=\"perc\">%</span>\r\n                                </h2>\r\n                                <span className=\"comp\">completed</span>\r\n                            </>\r\n                        ) : (\r\n                            <h2 className=\"empty\">No Task</h2>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <button\r\n                    onClick={clearDone}\r\n                    disabled={done === 0 ? true : false}\r\n                    className={done === 0 ? \"disable\" : \"clear\"}\r\n                >\r\n                    &#10005; Clear Done\r\n                </button>\r\n                <select name=\"filter\" id=\"filter\" onChange={statusHandler} value={status}>\r\n                    <option value=\"All\">All</option>\r\n                    <option value=\"Completed\">Completed</option>\r\n                    <option value=\"Uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport uuid from \"uuid\";\r\nimport Input from \"./Inner Component/Input\";\r\nimport List from \"./Inner Component/List\";\r\nimport Control from \"./Inner Component/Control\";\r\n\r\nexport default function App() {\r\n    const [Todo, setTodo] = useState({});\r\n    const [TodoListArray, setTodoListArray] = useState([]);\r\n    const [done, setDone] = useState(0);\r\n    const [progress, setProgress] = useState(\"\");\r\n    const [filtered, setFiltered] = useState([]);\r\n    const [status, setStatus] = useState(\"All\");\r\n\r\n    useEffect(() => {\r\n        const DoneTodos = TodoListArray.filter((arr) => arr.completed === true);\r\n        var progress = Math.floor((DoneTodos.length / TodoListArray.length) * 100);\r\n        if (isNaN(progress)) progress = 0;\r\n        setProgress(progress);\r\n        setDone(DoneTodos.length);\r\n    }, [progress, TodoListArray]);\r\n\r\n    useEffect(() => {\r\n        function FilterLogic() {\r\n            switch (status) {\r\n                case \"Completed\":\r\n                    setFiltered(TodoListArray.filter((arr) => arr.completed === true));\r\n                    break;\r\n                case \"Uncompleted\":\r\n                    setFiltered(TodoListArray.filter((arr) => arr.completed === false));\r\n                    break;\r\n                default:\r\n                    setFiltered(TodoListArray);\r\n            }\r\n        }\r\n        FilterLogic();\r\n    }, [TodoListArray, status]);\r\n\r\n    useEffect(() => {\r\n        var path = document.querySelectorAll(\".checkbox path\");\r\n        var check = document.querySelectorAll(\".check\");\r\n\r\n        if (path !== null && check !== null) {\r\n            for (let i = 0; i < path.length; i++) {\r\n                path[i].style.transition = check[i].style.transition = \"none\";\r\n            }\r\n        }\r\n    }, [status]);\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"todoLocal\") === null)\r\n            localStorage.setItem(\"todoLocal\", JSON.stringify([]));\r\n        else var TodoLocal = localStorage.getItem(\"todoLocal\");\r\n        setTodoListArray(JSON.parse(TodoLocal));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"todoLocal\", JSON.stringify(TodoListArray));\r\n    }, [TodoListArray]);\r\n\r\n    function sendProps(event) {\r\n        event.preventDefault();\r\n        var inputBox = document.getElementById(\"inputBox\");\r\n        let { Todo: todo } = Todo;\r\n        if (todo.trim() === \"\" || todo.trim() === undefined) {\r\n            inputBox.value = null;\r\n            return alert(\"Please write a Task\");\r\n        }\r\n        Todo.id = uuid.v4();\r\n        Todo.completed = false;\r\n        setTodoListArray((prev) => [...prev, Todo]);\r\n        inputBox.value = null;\r\n        inputBox.focus();\r\n        setTodo({});\r\n        setStatus(\"All\");\r\n    }\r\n\r\n    function setInput({ target: { value } }) {\r\n        setTodo({ Todo: value });\r\n    }\r\n\r\n    function updateTodo(id) {\r\n        var path = document.querySelectorAll(\".checkbox path\");\r\n        var check = document.querySelectorAll(\".check\");\r\n\r\n        if (path !== null && check !== null) {\r\n            for (let i = 0; i < path.length; i++) {\r\n                path[i].style.transition = check[i].style.transition = \".4s\";\r\n            }\r\n        }\r\n\r\n        setTodoListArray(\r\n            TodoListArray.map((arr) => {\r\n                if (arr.id === id) arr.completed = !arr.completed;\r\n                return arr;\r\n            })\r\n        );\r\n    }\r\n\r\n    function removeTodo(id) {\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.id !== id));\r\n    }\r\n\r\n    function clearDone() {\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.completed === false));\r\n    }\r\n\r\n    function statusHandler({ target: { value } }) {\r\n        setStatus(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Control\r\n                props={{\r\n                    progress: progress,\r\n                    TodoListArray: TodoListArray,\r\n                    clearDone: clearDone,\r\n                    done: done,\r\n                    status: status,\r\n                    statusHandler: statusHandler,\r\n                }}\r\n            />\r\n            <Input\r\n                props={{\r\n                    sendProps: sendProps,\r\n                    setInput: setInput,\r\n                }}\r\n            />\r\n            <List\r\n                props={{\r\n                    removeTodo: removeTodo,\r\n                    updateTodo: updateTodo,\r\n                    TodoListArray: TodoListArray,\r\n                    filtered: filtered,\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.css\";\r\nimport App from \"./Components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nserviceWorker.register();\r\n"],"sourceRoot":""}