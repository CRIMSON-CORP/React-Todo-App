{"version":3,"sources":["Components/help-vids/Create Task.mp4","Components/help-vids/Newlist.mp4","Components/help-vids/Editing_Reminder.mp4","Components/help-vids/RenameList.mp4","Components/help-vids/new.PNG","Components/help-vids/near.PNG","Components/help-vids/passed.PNG","Components/help-vids/lock.png","Components/help-vids/opt.png","Components/Inner Component/Input.js","Components/Border.js","Components/Inner Component/EachTodo.js","Components/Inner Component/List.js","Components/Inner Component/Control.js","Components/App.js","Components/OuterControl.js","Components/Main.js","serviceWorker.js","index.js"],"names":["module","exports","examples","Input","sendProps","props","useState","focus","setFocus","line","setLine","input","setInput","useEffect","Math","floor","random","className","onSubmit","event","preventDefault","document","querySelector","value","type","name","onChange","target","onFocus","onBlur","autoComplete","required","viewBox","preserveAspectRatio","d","transform","fill","size","Border","transdiv","EachTodo","eachTodo","id","completed","Todo","DateOptions","futureDate","reminder","updateTodo","removeTodo","AddUpdate","removeReminder","trans","date","TodoOp","setTodoOp","Date","now","parse","TodoStatus","setTodoStatus","toggle","setToggle","modal","setModal","useInterval","rem","ls","get","JSON","Push","create","requireInteraction","vibrate","stop","set","autoStart","start","setTimeout","$","val","select","transition","useTransition","from","enter","leave","checked","style","points","opacity","textDecoration","map","item","key","div","onClick","component","appear","translateY","prev","defaultValue","float","margin","display","fadeOut","store","addNotification","message","container","insert","animationIn","animationOut","dismiss","duration","onScreen","showIcon","touch","click","List","TodoListArray","filtered","TodoBlocks","index","length","Control","progress","clearDone","done","statusHandler","status","whichMode","x1","y1","x2","y2","offset","stopColor","cx","cy","r","strokeDashoffset","strokeWidth","stroke","disabled","App","app","clID","setTodo","setTodoListArray","setDone","setProgress","setFiltered","setStatus","show","setShow","setTrans","DoneTodos","filter","arr","isNaN","data-id","todo","trim","undefined","alert","uuid","v4","remove","setDate","OuterControl","addList","setCurrentList","updateList","deleteList","currentList","clearList","setwhichMode","sendForm","formStatus","setFormStatus","side","setSide","list","setList","currentListId","setCurrentListId","copy","setCopy","ListName","setListName","newListModal","setNewListModal","renameListModal","setRenameListModal","deleteListModal","setDeleteListModal","clearListModal","setClearListModal","contactModal","setContactModal","donateModal","setDonateModal","helpModal","setHelpModal","nameErr","setNameErr","emailErr","setEmailErr","messageErr","setMessageErr","checkEmail","test","check","Provider","persist","tagName","sendBtn","icon","text","translateX","fontSize","userSelect","onKeyUp","href","temp","createElement","appendChild","innerHTML","execCommand","title","autoPlay","loop","src","newList","edit_rem","renameList","blue","alt","yell","pass","lock","opt","Main","content","localStorage","getItem","setApp","Number","parseInt","toLowerCase","mainCurrentListId","setMainCurrentListId","form","a","emailjs","process","res","setItem","stringify","Index","newListName","NewListProps","removeItem","filteredList","clear","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a1caca91.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Create Task.bdcc0fe6.mp4\";","module.exports = __webpack_public_path__ + \"static/media/Newlist.0c664a84.mp4\";","module.exports = __webpack_public_path__ + \"static/media/Editing_Reminder.30c75d32.mp4\";","module.exports = __webpack_public_path__ + \"static/media/RenameList.f9b62236.mp4\";","module.exports = __webpack_public_path__ + \"static/media/new.dd029f19.PNG\";","module.exports = __webpack_public_path__ + \"static/media/near.5714c663.PNG\";","module.exports = __webpack_public_path__ + \"static/media/passed.eed007e1.PNG\";","module.exports = __webpack_public_path__ + \"static/media/lock.11b02c8a.png\";","module.exports = __webpack_public_path__ + \"static/media/opt.8d0d4dc3.png\";","import React, { useState, useEffect } from \"react\";\r\nimport { MdAdd } from \"react-icons/md\";\r\n\r\nconst examples = [\r\n    \"Cook Dinner\",\r\n    \"Wash clothes\",\r\n    \"See a Friend\",\r\n    \"Wash the Car\",\r\n    \"Read a Book\",\r\n    \"Hit the Gym\",\r\n    \"Pay Electricity Bill\",\r\n    \"Drink Plenty of water\",\r\n];\r\n\r\nexport default function Input({ props: { sendProps } }) {\r\n    const [focus, setFocus] = useState(false);\r\n    const [line, setLine] = useState(\"\");\r\n    const [input, setInput] = useState(\"\");\r\n    useEffect(() => {\r\n        focus\r\n            ? setLine(\"What Do you want Todo?...\")\r\n            : setLine(\"eg. \" + examples[Math.floor(Math.random() * 8)]);\r\n    }, [focus]);\r\n    return (\r\n        <form\r\n            className=\"inputBlock\"\r\n            onSubmit={function (event) {\r\n                event.preventDefault();\r\n                sendProps(input);\r\n                setInput(null);\r\n                document.querySelector(\".inputBlock input\").value = null;\r\n                document.querySelector(\".inputBlock input\").focus();\r\n            }}\r\n        >\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"Input\"\r\n                    name=\"inputBlock\"\r\n                    onChange={({ target: { value } }) => {\r\n                        setInput(value);\r\n                    }}\r\n                    onFocus={() => {\r\n                        setFocus(true);\r\n                    }}\r\n                    onBlur={({ target: { value } }) => {\r\n                        if (value) return;\r\n                        setFocus(false);\r\n                    }}\r\n                    autoComplete=\"off\"\r\n                    required=\"required\"\r\n                />\r\n                <svg className=\"border\" viewBox=\"0 0 275.05 40\" preserveAspectRatio=\"none\">\r\n                    <path\r\n                        className=\"cls-1 path\"\r\n                        d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                        transform=\"translate(-1.3 -0.77)\"\r\n                    />\r\n                    <path\r\n                        className=\"cls-2 path\"\r\n                        d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                        transform=\"translate(-1.3 -0.77)\"\r\n                    />\r\n                </svg>\r\n                {<span>{line}</span>}\r\n            </div>\r\n            <button className=\"plus\" type=\"submit\">\r\n                <MdAdd fill=\"#222\" className=\"icon\" size=\"1.2rem\" />\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Border() {\r\n    return (\r\n        <svg className=\"border\" viewBox=\"0 0 275.05 40\" preserveAspectRatio=\"none\">\r\n            <path\r\n                className=\"cls-1 path\"\r\n                d=\"M139,39H268.22c4,0,7.3-2.78,7.3-6.21V8.21c0-3.43-3.27-6.21-7.3-6.21H139\"\r\n                transdiv=\"translate(-1.3 -0.77)\"\r\n            />\r\n            <path\r\n                className=\"cls-2 path\"\r\n                d=\"M164,2H11.24C6.43,2,2.52,4.78,2.52,8.21V32.79c0,3.43,3.91,6.21,8.72,6.21H160.32v0H164\"\r\n                transform=\"translate(-1.3 -0.77)\"\r\n            />\r\n        </svg>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useInterval } from \"react-interval-hook\";\r\nimport { MdCheck, MdClear, MdDelete, MdSettings } from \"react-icons/md\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\nimport $ from \"jquery\";\r\nimport Push from \"push.js\";\r\nimport { store } from \"react-notifications-component\";\r\nimport ls from \"local-storage\";\r\nimport { useTransition, animated } from \"react-spring\";\r\nimport Border from \"../Border\";\r\nimport Transition from \"react-motion-ui-pack/lib/Transition\";\r\nfunction EachTodo({\r\n    props: {\r\n        eachTodo: {\r\n            id,\r\n            completed,\r\n            Todo,\r\n            DateOptions: { futureDate = null, reminder = false } = {},\r\n        },\r\n        updateTodo,\r\n        removeTodo,\r\n        AddUpdate,\r\n        removeReminder,\r\n        trans,\r\n    },\r\n}) {\r\n    const [TodoOp, setTodoOp] = useState({\r\n        name: \"\",\r\n        date: \"\",\r\n        reminder: false,\r\n    });\r\n    const [TodoStatus, setTodoStatus] = useState(() => {\r\n        if (Date.now() >= Date.parse(futureDate)) return \"passed\";\r\n        else if (Date.now() >= Date.parse(futureDate) - 1800000) return \"close\";\r\n        else if (reminder) return \"normal\";\r\n        else return \"\";\r\n    });\r\n    const [toggle, setToggle] = useState(\"edit\");\r\n    const [modal, setModal] = useState(false);\r\n    const { start, stop } = useInterval(\r\n        () => {\r\n            var rem = ls.get(`Rem_${id}`);\r\n            rem === null ? (rem = false) : (rem = JSON.parse(rem));\r\n            if (rem) return;\r\n            if (reminder && completed === false && Date.now() >= Date.parse(futureDate) && !rem) {\r\n                Push.create(`Reminder: ${Todo}`, {\r\n                    requireInteraction: true,\r\n                    vibrate: [500, 200, 500],\r\n                });\r\n                setTodoStatus(\"passed\");\r\n                stop();\r\n                ls.set(`Rem_${id}`, true);\r\n\r\n                if (Date.now() >= Date.parse(futureDate) - 1800000) {\r\n                    setTodoStatus(\"close\");\r\n                }\r\n            } else if (reminder && completed === false) {\r\n                setTodoStatus(\"normal\");\r\n            }\r\n        },\r\n        1000,\r\n        { autoStart: false }\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (reminder && !completed) {\r\n            setToggle(\"reminder\");\r\n        } else if (completed) {\r\n            setToggle(\"completed\");\r\n        } else setToggle(\"edit\");\r\n    }, [reminder, completed]);\r\n\r\n    useEffect(() => {\r\n        if (modal) {\r\n            setTimeout(() => $(\".TodoEdit .Input[type='text']\").val(Todo).select());\r\n        }\r\n    }, [modal, Todo]);\r\n    var Done = {\r\n        opacity: 0.4,\r\n        textDecoration: \"line-through\",\r\n    };\r\n\r\n    const transition = useTransition(toggle, null, {\r\n        from: { transform: \"scale(0)\" },\r\n        enter: { transform: \"scale(1)\" },\r\n        leave: { transform: \"scale(0)\" },\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <div className=\"label\">\r\n                <label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={completed}\r\n                        onChange={() => {\r\n                            updateTodo(id);\r\n                            if (!completed) {\r\n                                removeReminder(id);\r\n                                stop();\r\n                            }\r\n                        }}\r\n                    />\r\n                    <div className=\"Todo\">\r\n                        <div className=\"checkbox-container\">\r\n                            <svg viewBox=\"0 0 100 100\" className=\"checkbox\">\r\n                                <path\r\n                                    className=\"st0\"\r\n                                    style={{ transition: trans ? \".4s\" : \"none\" }}\r\n                                    d=\"M85,92H15c-3.9,0-7-3.1-7-7V15c0-3.9,3.1-7,7-7h70c3.9,0,7,3.1,7,7v70C92,88.9,88.9,92,85,92z\"\r\n                                />\r\n                                <polyline\r\n                                    className=\"check\"\r\n                                    style={{ transition: trans ? \".4s\" : \"none\" }}\r\n                                    points=\"22.5,47.5 42.5,67.5 78.5,31.5 \"\r\n                                />\r\n                            </svg>\r\n                        </div>\r\n                        <span style={completed ? Done : null}>{Todo}</span>\r\n                    </div>\r\n                </label>\r\n                <div className=\"op-cont\">\r\n                    {transition.map(({ item, props, key }) => {\r\n                        switch (item) {\r\n                            case \"completed\":\r\n                                return (\r\n                                    <animated.div style={props} key={key} className=\"op\">\r\n                                        <MdDelete\r\n                                            className={\"bin icon\"}\r\n                                            size=\"1.5rem\"\r\n                                            onClick={() => {\r\n                                                removeTodo(id);\r\n                                            }}\r\n                                        />\r\n                                    </animated.div>\r\n                                );\r\n                            case \"reminder\":\r\n                                return (\r\n                                    <animated.div style={props} key={key} className=\"op\">\r\n                                        <MdSettings\r\n                                            className=\"icon settings\"\r\n                                            id={TodoStatus}\r\n                                            size=\"1.5rem\"\r\n                                            onClick={() => {\r\n                                                setModal(true);\r\n                                                $(\".TodoEdit .Input[type='text']\")\r\n                                                    .val(Todo)\r\n                                                    .select();\r\n                                            }}\r\n                                        />\r\n                                    </animated.div>\r\n                                );\r\n                            default:\r\n                                return (\r\n                                    <animated.div style={props} key={key} className=\"op\">\r\n                                        <FiEdit\r\n                                            size=\"1.5rem\"\r\n                                            onClick={() => {\r\n                                                setModal(true);\r\n                                            }}\r\n                                        />\r\n                                    </animated.div>\r\n                                );\r\n                        }\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            <Transition\r\n                component={false}\r\n                appear={{ translateY: 50, opacity: 0 }}\r\n                enter={{ opacity: 1, translateY: 0 }}\r\n                leave={{ translateY: -50, opacity: 0 }}\r\n            >\r\n                {modal && (\r\n                    <div className=\"modalCont TodoEdit right\" key=\"modal\">\r\n                        <div className=\"modal\">\r\n                            <h3>More Options</h3>\r\n                            <h4>Edit task</h4>\r\n                            <div className=\"input-container\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"Input\"\r\n                                    autoComplete=\"off\"\r\n                                    onChange={({ target: { value } }) => {\r\n                                        setTodoOp((prev) => ({ ...prev, name: value }));\r\n                                    }}\r\n                                />\r\n                                <Border />\r\n                                <span>Edit Task</span>\r\n                            </div>\r\n                            <h4>Set Reminder for</h4>\r\n                            <div className=\"input-container\">\r\n                                <input\r\n                                    className=\"Input\"\r\n                                    type=\"datetime-local\"\r\n                                    defaultValue={TodoOp.date}\r\n                                    onChange={({ target: { value } }) => {\r\n                                        setTodoOp((prev) => ({ ...prev, date: value }));\r\n                                    }}\r\n                                />\r\n                                <Border />\r\n                            </div>\r\n\r\n                            {reminder ? (\r\n                                <button\r\n                                    className=\"modalBtn del\"\r\n                                    style={{ float: \"none\", margin: \"0 0 20px 0\", display: \"grid\" }}\r\n                                    onClick={() => {\r\n                                        removeReminder(id);\r\n                                        stop();\r\n                                        $(\".TodoEdit\").fadeOut();\r\n                                    }}\r\n                                >\r\n                                    <MdClear />\r\n                                    <span> Remove Current Reminder?</span>\r\n                                </button>\r\n                            ) : null}\r\n                            <button\r\n                                className=\"modalBtn save\"\r\n                                onClick={() => {\r\n                                    if (Date.parse(TodoOp.date) <= Date.now()) {\r\n                                        store.addNotification({\r\n                                            message:\r\n                                                \"Setting Date in the Past will not trigger Reminder!\",\r\n                                            type: \"warning\",\r\n                                            container: \"top-center\",\r\n                                            insert: \"top\",\r\n                                            animationIn: [\"animated\", \"bounceIn\"],\r\n                                            animationOut: [\"animated\", \"fadeOut\"],\r\n                                            dismiss: {\r\n                                                duration: 3000,\r\n                                                onScreen: true,\r\n                                                showIcon: true,\r\n                                                touch: true,\r\n                                                click: true,\r\n                                            },\r\n                                        });\r\n                                        return;\r\n                                    }\r\n                                    AddUpdate(id, TodoOp);\r\n                                    start();\r\n                                    ls.set(`Rem_${id}`, false);\r\n                                    setModal(false);\r\n                                }}\r\n                            >\r\n                                <MdCheck />\r\n                                <span>Save</span>\r\n                            </button>\r\n                            <button\r\n                                className=\"modalBtn cancel\"\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                    setModal(false);\r\n                                }}\r\n                            >\r\n                                <MdClear />\r\n                                <span>Cancel</span>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Transition>\r\n            <Transition component={false} enter={{ opacity: 1 }} leave={{ opacity: 0 }}>\r\n                {modal && (\r\n                    <div\r\n                        key=\"underlay\"\r\n                        className=\"ModalUnderLay\"\r\n                        onClick={() => {\r\n                            setModal(false);\r\n                        }}\r\n                    ></div>\r\n                )}\r\n            </Transition>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EachTodo;\r\n","import React from \"react\";\r\nimport EachTodo from \"./EachTodo\";\r\n\r\nexport default function List({\r\n    props: { removeTodo, updateTodo, TodoListArray, filtered, AddUpdate, removeReminder, trans },\r\n}) {\r\n    var TodoBlocks = filtered.map((eachTodo, index) => {\r\n        return (\r\n            <EachTodo\r\n                key={index}\r\n                props={{\r\n                    eachTodo,\r\n                    updateTodo,\r\n                    removeTodo,\r\n                    AddUpdate,\r\n                    removeReminder,\r\n                    trans,\r\n                }}\r\n            />\r\n        );\r\n    });\r\n\r\n    return <div className=\"listContainer\">{TodoListArray.length === 0 ? \"\" : TodoBlocks}</div>;\r\n}\r\n","import React from \"react\";\r\nexport default function Control({\r\n    props: { id, progress, TodoListArray, clearDone, done, statusHandler, status, whichMode },\r\n}) {\r\n    return (\r\n        <div className=\"control\">\r\n            <div className=\"box\">\r\n                <div className=\"percent\">\r\n                    <svg>\r\n                        <linearGradient id={`grad_${id}`} x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"100%\">\r\n                            <stop offset=\"0%\" stopColor=\"#ff0612\"></stop>\r\n                            <stop offset=\"100%\" stopColor=\"#6544ff\"></stop>\r\n                        </linearGradient>\r\n                        <circle cx=\"50%\" cy=\"50%\" r=\"40\" className=\"dark circle\"></circle>\r\n\r\n                        <circle\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            r=\"40\"\r\n                            className=\"grad circle\"\r\n                            style={{\r\n                                strokeDashoffset:\r\n                                    250.92137145996094 - (250.92137145996094 * progress) / 100,\r\n                                strokeWidth: progress === 0 ? \"0px\" : \"10px\",\r\n                                stroke: `url(\"#grad_${id}\")`,\r\n                            }}\r\n                        ></circle>\r\n                    </svg>\r\n                    <div className={`number ${whichMode ? \"darkMode\" : \"LightMode\"}`}>\r\n                        {progress !== 0 || TodoListArray.length !== 0 ? (\r\n                            <>\r\n                                <h2>\r\n                                    {progress}\r\n                                    <span className=\"perc\">%</span>\r\n                                </h2>\r\n                                <span className=\"comp\">completed</span>\r\n                            </>\r\n                        ) : (\r\n                            <h2 className=\"empty\">No Task</h2>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <button\r\n                    onClick={clearDone}\r\n                    disabled={done === 0 ? true : false}\r\n                    className={done === 0 ? \"disable\" : \"clear\"}\r\n                >\r\n                    &#10005; Clear Done\r\n                </button>\r\n                <select name=\"filter\" id=\"filter\" onChange={statusHandler} value={status}>\r\n                    <option value=\"All\">All</option>\r\n                    <option value=\"Completed\">Completed</option>\r\n                    <option value=\"Uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport uuid from \"uuid\";\r\nimport Input from \"./Inner Component/Input\";\r\nimport List from \"./Inner Component/List\";\r\nimport Control from \"./Inner Component/Control\";\r\nimport ls from \"local-storage\";\r\n\r\nexport default function App({ props: { app, clID } }) {\r\n    const [id] = useState(app.id);\r\n    const [Todo, setTodo] = useState({});\r\n    const [TodoListArray, setTodoListArray] = useState(() => {\r\n        return ls.get(id) === null ? [] : ls.get(id);\r\n    });\r\n    const [done, setDone] = useState(0);\r\n    const [progress, setProgress] = useState(\"\");\r\n    const [filtered, setFiltered] = useState([]);\r\n    const [status, setStatus] = useState(\"All\");\r\n    const [show, setShow] = useState(false);\r\n    const [trans, setTrans] = useState(true);\r\n\r\n    useEffect(() => {\r\n        ls.set(id, TodoListArray);\r\n    }, [TodoListArray, id]);\r\n\r\n    useEffect(() => {\r\n        clID === app.id ? setShow(true) : setShow(false);\r\n    }, [clID, app.id]);\r\n\r\n    useEffect(() => {\r\n        const DoneTodos = TodoListArray.filter((arr) => arr.completed === true);\r\n        var progress = Math.floor((DoneTodos.length / TodoListArray.length) * 100);\r\n        if (isNaN(progress)) progress = 0;\r\n        setProgress(progress);\r\n        setDone(DoneTodos.length);\r\n    }, [TodoListArray]);\r\n\r\n    useEffect(() => {\r\n        switch (status) {\r\n            case \"Completed\":\r\n                setFiltered(TodoListArray.filter((arr) => arr.completed === true));\r\n                break;\r\n            case \"Uncompleted\":\r\n                setFiltered(TodoListArray.filter((arr) => arr.completed === false));\r\n                break;\r\n            default:\r\n                setFiltered(TodoListArray);\r\n        }\r\n    }, [TodoListArray, status]);\r\n\r\n    function sendProps(todo) {\r\n        if (todo.trim() === \"\" || todo.trim() === undefined) {\r\n            return alert(\"Please write a Task\");\r\n        }\r\n        Todo.Todo = todo;\r\n        Todo.id = uuid.v4();\r\n        Todo.completed = false;\r\n        Todo.DateOptions = {\r\n            futureDate: null,\r\n            reminder: false,\r\n        };\r\n        setTodoListArray((prev) => [...prev, Todo]);\r\n        setTodo({});\r\n        setStatus(\"All\");\r\n    }\r\n\r\n    function updateTodo(id) {\r\n        setTrans(true);\r\n        setTodoListArray(\r\n            TodoListArray.map((arr) => {\r\n                if (arr.id === id) arr.completed = !arr.completed;\r\n                return arr;\r\n            })\r\n        );\r\n    }\r\n\r\n    function AddUpdate(id, { name, date }) {\r\n        if (name) {\r\n            setTodoListArray(\r\n                TodoListArray.map((arr) => {\r\n                    if (arr.id === id) arr.Todo = name;\r\n                    return arr;\r\n                })\r\n            );\r\n        }\r\n        if (date) {\r\n            setDate(id, date);\r\n        }\r\n\r\n        function setDate(id, date) {\r\n            setTodoListArray(\r\n                TodoListArray.map((arr) => {\r\n                    if (arr.id === id) {\r\n                        arr.DateOptions = {\r\n                            futureDate: date,\r\n                            reminder: true,\r\n                        };\r\n                    }\r\n                    return arr;\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    function removeReminder(id) {\r\n        setTodoListArray(\r\n            TodoListArray.map((arr) => {\r\n                if (arr.id === id) {\r\n                    arr.DateOptions.reminder = false;\r\n                    arr.DateOptions.futureDate = null;\r\n                }\r\n                return arr;\r\n            })\r\n        );\r\n        ls.remove(`Rem_${id}`);\r\n    }\r\n\r\n    function removeTodo(id) {\r\n        setTrans(false);\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.id !== id));\r\n        ls.remove(`Rem_${id}`);\r\n    }\r\n\r\n    function clearDone() {\r\n        setTrans(false);\r\n        setTodoListArray(TodoListArray.filter((arr) => arr.completed === false));\r\n    }\r\n\r\n    function statusHandler({ target: { value } }) {\r\n        setStatus(value);\r\n        setTrans(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" data-id={id} style={{ display: show ? \"block\" : \"none\" }}>\r\n            <h1 className=\"ListName\">{app.name}</h1>\r\n            <Control\r\n                props={{\r\n                    id,\r\n                    progress,\r\n                    TodoListArray,\r\n                    clearDone,\r\n                    done,\r\n                    status,\r\n                    statusHandler,\r\n                }}\r\n            />\r\n            <Input\r\n                props={{\r\n                    sendProps,\r\n                }}\r\n            />\r\n            <List\r\n                props={{\r\n                    removeTodo,\r\n                    updateTodo,\r\n                    TodoListArray,\r\n                    filtered,\r\n                    AddUpdate,\r\n                    removeReminder,\r\n                    trans,\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    MdDehaze,\r\n    MdClear,\r\n    MdAdd,\r\n    MdDelete,\r\n    MdList,\r\n    MdDeleteSweep,\r\n    MdCheck,\r\n    MdError,\r\n    MdSend,\r\n} from \"react-icons/md\";\r\nimport { FiHeart, FiMoon, FiSun, FiPhone, FiLoader, FiCopy, FiHelpCircle } from \"react-icons/fi\";\r\nimport {\r\n    FaFacebookF,\r\n    FaInstagram,\r\n    FaWhatsapp,\r\n    FaFacebookMessenger,\r\n    FaGithub,\r\n} from \"react-icons/fa\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\nimport $ from \"jquery\";\r\nimport create from \"./help-vids/Create Task.mp4\";\r\nimport newList from \"./help-vids/Newlist.mp4\";\r\nimport edit_rem from \"./help-vids/Editing_Reminder.mp4\";\r\nimport renameList from \"./help-vids/RenameList.mp4\";\r\nimport blue from \"./help-vids/new.PNG\";\r\nimport yell from \"./help-vids/near.PNG\";\r\nimport pass from \"./help-vids/passed.PNG\";\r\nimport lock from \"./help-vids/lock.png\";\r\nimport opt from \"./help-vids/opt.png\";\r\nimport Transition from \"react-motion-ui-pack/lib/Transition\";\r\n\r\nimport { store } from \"react-notifications-component\";\r\nimport Border from \"./Border\";\r\nfunction OuterControl({\r\n    props: {\r\n        app,\r\n        addList,\r\n        setCurrentList,\r\n        updateList,\r\n        deleteList,\r\n        currentList,\r\n        clearList,\r\n        whichMode,\r\n        setwhichMode,\r\n        sendForm,\r\n        formStatus,\r\n        setFormStatus,\r\n    },\r\n}) {\r\n    const [side, setSide] = useState(false);\r\n    const [list, setList] = useState([]);\r\n    const [currentListId, setCurrentListId] = useState(\"\");\r\n    const [copy, setCopy] = useState(false);\r\n    const [ListName, setListName] = useState(\"\");\r\n\r\n    // Modals\r\n    const [newListModal, setNewListModal] = useState(false);\r\n    const [renameListModal, setRenameListModal] = useState(false);\r\n    const [deleteListModal, setDeleteListModal] = useState(false);\r\n    const [clearListModal, setClearListModal] = useState(false);\r\n    const [contactModal, setContactModal] = useState(false);\r\n    const [donateModal, setDonateModal] = useState(false);\r\n    const [helpModal, setHelpModal] = useState(false);\r\n    const [nameErr, setNameErr] = useState(false);\r\n    const [emailErr, setEmailErr] = useState(false);\r\n    const [messageErr, setMessageErr] = useState(false);\r\n\r\n    // creates Lists of TodoList Categories\r\n    useEffect(() => {\r\n        var list = app.map((App, index) => {\r\n            return (\r\n                <IconContext.Provider\r\n                    value={{\r\n                        size: \"1.5rem\",\r\n                        className: `ListSetIcon ${whichMode ? \"\" : \"light\"}`,\r\n                        style: { fill: whichMode ? \"white\" : \"#333\" },\r\n                    }}\r\n                    key={index}\r\n                >\r\n                    <li\r\n                        className={`listSet ${whichMode ? \"dark\" : \"light\"} ${\r\n                            app[currentList].id === App.id ? \"active\" : \"\"\r\n                        }`}\r\n                        onClick={(event) => {\r\n                            event.persist();\r\n                            if (event.target.tagName === \"svg\" || event.target.tagName === \"path\") {\r\n                                return;\r\n                            }\r\n                            setCurrentList(index);\r\n                            setSide(false);\r\n                        }}\r\n                    >\r\n                        <MdList className=\"icon\" />\r\n                        <h3>{App.name}</h3>\r\n                        <FiEdit\r\n                            style={{ stroke: whichMode ? \"white\" : \"#333\", fill: \"none\" }}\r\n                            className=\"icon edit\"\r\n                            onClick={() => {\r\n                                setCurrentListId(App.id);\r\n                                setRenameListModal(true);\r\n                                setTimeout(() => $(\".renamebox\").val(App.name).select());\r\n                            }}\r\n                        />\r\n                        <MdDelete\r\n                            className=\"icon bin\"\r\n                            onClick={() => {\r\n                                setDeleteListModal(true);\r\n                                setCurrentListId(App.id);\r\n                            }}\r\n                        />\r\n                    </li>\r\n                </IconContext.Provider>\r\n            );\r\n        });\r\n        setList(list);\r\n    }, [app, setCurrentList, whichMode, currentList]);\r\n\r\n    function checkEmail(event) {\r\n        var val = event.target.value.trim();\r\n        if (!/@/.test(val) || val === \"\") {\r\n            setEmailErr(true);\r\n        } else {\r\n            setEmailErr(false);\r\n        }\r\n    }\r\n\r\n    function check({ target: { value } }) {\r\n        if (value.trim() === \"\") {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function closeContactModal() {\r\n        setNameErr(false);\r\n        setEmailErr(false);\r\n        setMessageErr(false);\r\n    }\r\n\r\n    var sendBtn = {\r\n        className: \"\",\r\n        icon: \"\",\r\n        text: \"\",\r\n    };\r\n    switch (formStatus) {\r\n        case \"sending\":\r\n            sendBtn.className = sendBtn.text = \"Sending\";\r\n            sendBtn.icon = <FiLoader className=\"loading\" />;\r\n            break;\r\n        case \"sent\":\r\n            sendBtn.className = sendBtn.text = \"Sent\";\r\n            sendBtn.icon = <MdCheck />;\r\n            break;\r\n        case \"error\":\r\n            sendBtn.className = \"Error\";\r\n            sendBtn.text = \"An Error Occured!\";\r\n            sendBtn.icon = <MdError />;\r\n            break;\r\n        default:\r\n            sendBtn.className = sendBtn.text = \"Send\";\r\n            sendBtn.icon = <MdSend />;\r\n    }\r\n\r\n    function copyComp() {\r\n        store.addNotification({\r\n            title: \"Copied!\",\r\n            message: \"Account Number Copied, Thank You so Much!\",\r\n            type: \"success\",\r\n            container: \"top-center\",\r\n            animationIn: [\"animated\", \"jackInTheBox\"],\r\n            animationOut: [\"animated\", \"bounceOut\"],\r\n            dismiss: {\r\n                duration: 3000,\r\n                onScreen: true,\r\n                showIcon: true,\r\n                touch: true,\r\n                click: true,\r\n            },\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"ham\">\r\n                <MdDehaze\r\n                    size=\"1.5rem\"\r\n                    className=\"icon\"\r\n                    onClick={() => {\r\n                        setSide(true);\r\n                    }}\r\n                />\r\n            </div>\r\n            <Transition component={false} enter={{ opacity: 1 }} leave={{ opacity: 0 }}>\r\n                {(side || newListModal) && (\r\n                    <div\r\n                        key=\"underlay\"\r\n                        className=\"sideBarUnderLay\"\r\n                        onClick={() => {\r\n                            setSide(false);\r\n                        }}\r\n                    ></div>\r\n                )}\r\n            </Transition>\r\n            <Transition\r\n                component={false}\r\n                enter={{ translateX: 0, opacity: 1 }}\r\n                leave={{ translateX: -500, opacity: 0 }}\r\n            >\r\n                {side && (\r\n                    <div key=\"sideBar\" className={`sideBar`}>\r\n                        <h2>\r\n                            Your List Set\r\n                            <MdClear\r\n                                size=\"1.5rem\"\r\n                                className=\"icon\"\r\n                                onClick={() => {\r\n                                    setSide(false);\r\n                                }}\r\n                            />\r\n                        </h2>\r\n                        <ul>\r\n                            {list}\r\n                            <hr />\r\n                            <IconContext.Provider\r\n                                value={{\r\n                                    size: \"1.5rem\",\r\n                                    style: { fill: whichMode ? \"white\" : \"#333\" },\r\n                                }}\r\n                            >\r\n                                <li\r\n                                    className=\"subList\"\r\n                                    onClick={() => {\r\n                                        setNewListModal(true);\r\n                                    }}\r\n                                >\r\n                                    <MdAdd />\r\n                                    <h3>Add New List</h3>\r\n                                </li>\r\n                                <li\r\n                                    className=\"subList\"\r\n                                    onClick={() => {\r\n                                        setClearListModal(true);\r\n                                    }}\r\n                                >\r\n                                    <MdDeleteSweep />\r\n                                    <h3>Clear All Lists</h3>\r\n                                </li>\r\n\r\n                                <li\r\n                                    className=\"subList\"\r\n                                    onClick={() => {\r\n                                        setSide(false);\r\n                                        setwhichMode(!whichMode);\r\n                                    }}\r\n                                >\r\n                                    {whichMode ? (\r\n                                        <FiSun fill=\"white\" />\r\n                                    ) : (\r\n                                        <FiMoon stroke=\"transparent\" />\r\n                                    )}\r\n                                    <h3>Turn on {whichMode ? \"Light\" : \"Dark\"} Mode</h3>\r\n                                </li>\r\n                                <hr />\r\n                                <li\r\n                                    className=\"subList\"\r\n                                    onClick={() => {\r\n                                        setHelpModal(true);\r\n                                    }}\r\n                                >\r\n                                    <FiHelpCircle style={{ fill: whichMode ? \"none\" : \"#333\" }} />\r\n                                    <h3>How to use</h3>\r\n                                </li>\r\n                                <li\r\n                                    className=\"subList\"\r\n                                    onClick={() => {\r\n                                        setContactModal(true);\r\n                                    }}\r\n                                >\r\n                                    <FiPhone style={{ strokeWidth: 0 }} />\r\n                                    <h3>Contact Me</h3>\r\n                                </li>\r\n                                <li\r\n                                    className=\"subList\"\r\n                                    onClick={() => {\r\n                                        setDonateModal(true);\r\n                                    }}\r\n                                >\r\n                                    <FiHeart style={{ strokeWidth: 0 }} />\r\n                                    <h3>Donate</h3>\r\n                                </li>\r\n                            </IconContext.Provider>\r\n                            <hr />\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n            </Transition>\r\n            {/* Sets name of New List */}\r\n            <Transition\r\n                component={false}\r\n                appear={{ translateY: 50, opacity: 0 }}\r\n                enter={{ opacity: 1, translateY: 0 }}\r\n                leave={{ translateY: -50, opacity: 0 }}\r\n            >\r\n                {newListModal && (\r\n                    <div className=\"modalCont newModal right\" key=\"newListModal\">\r\n                        <form\r\n                            className=\"modal\"\r\n                            onSubmit={(event) => {\r\n                                event.preventDefault();\r\n                                setNewListModal(false);\r\n                                addList(ListName);\r\n                                setSide(false);\r\n                                setListName(\"\");\r\n                            }}\r\n                        >\r\n                            <h3>list Name</h3>\r\n                            <div className=\"input-container\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"Input\"\r\n                                    name=\"inputBlock\"\r\n                                    value={ListName}\r\n                                    onChange={({ target: { value } }) => {\r\n                                        setListName(value);\r\n                                    }}\r\n                                    autoComplete=\"off\"\r\n                                    required={true}\r\n                                />\r\n                                <Border />\r\n                                <span>List Name...</span>\r\n                            </div>\r\n                            <button className=\"modalBtn save\" type=\"submit\">\r\n                                <MdCheck />\r\n                                <span>Save</span>\r\n                            </button>\r\n                            <button\r\n                                className=\"modalBtn cancel\"\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                    setNewListModal(false);\r\n                                    setListName(\"\");\r\n                                }}\r\n                            >\r\n                                <MdClear />\r\n                                <span>Cancel</span>\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                )}\r\n            </Transition>\r\n            {/* Renames a list */}\r\n            <Transition\r\n                component={false}\r\n                appear={{ translateY: 50, opacity: 0 }}\r\n                enter={{ opacity: 1, translateY: 0 }}\r\n                leave={{ translateY: -50, opacity: 0 }}\r\n            >\r\n                {renameListModal && (\r\n                    <div className=\"modalCont rename right\" key=\"renameList\">\r\n                        <form\r\n                            className=\"modal\"\r\n                            onSubmit={(event) => {\r\n                                event.preventDefault();\r\n                                setRenameListModal(false);\r\n                                updateList(currentListId, ListName);\r\n                                setCurrentListId(\"\");\r\n                            }}\r\n                        >\r\n                            <h3>Rename Todo</h3>\r\n                            <div className=\"input-container\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"Input renamebox\"\r\n                                    name=\"inputBlock\"\r\n                                    onChange={({ target: { value } }) => {\r\n                                        setListName(value);\r\n                                    }}\r\n                                    autoComplete=\"off\"\r\n                                    required={true}\r\n                                />\r\n                                <Border />\r\n                            </div>\r\n\r\n                            <button className=\"modalBtn save\" type=\"submit\">\r\n                                <MdCheck />\r\n                                <span>Save</span>\r\n                            </button>\r\n                            <button\r\n                                className=\"modalBtn cancel\"\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                    setRenameListModal(false);\r\n                                }}\r\n                            >\r\n                                <MdClear />\r\n                                <span>Cancel</span>\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                )}\r\n            </Transition>\r\n            {/* delets a list */}\r\n            <Transition\r\n                component={false}\r\n                appear={{ translateY: 50, opacity: 0 }}\r\n                enter={{ opacity: 1, translateY: 0 }}\r\n                leave={{ translateY: -50, opacity: 0 }}\r\n            >\r\n                {deleteListModal && (\r\n                    <div className=\"modalCont delete center\" key=\"delete\">\r\n                        <div className=\"modal\">\r\n                            <MdDelete fontSize=\"3rem\" className=\"bin\" />\r\n                            <h3>Are you sure You want to Delete this List?</h3>\r\n                            <p>Entire List will be removed permanently</p>\r\n\r\n                            <button\r\n                                className=\"modalBtn cancel\"\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                    setDeleteListModal(false);\r\n                                }}\r\n                            >\r\n                                <MdClear />\r\n                                <span>Cancel</span>\r\n                            </button>\r\n                            <button\r\n                                className=\"modalBtn del\"\r\n                                type=\"submit\"\r\n                                onClick={() => {\r\n                                    setDeleteListModal(false);\r\n                                    deleteList(currentListId);\r\n                                    setSide(false);\r\n                                }}\r\n                            >\r\n                                <MdCheck />\r\n                                <span>OK</span>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Transition>\r\n            {/* Clears all Lists */}\r\n            <Transition\r\n                component={false}\r\n                appear={{ translateY: 50, opacity: 0 }}\r\n                enter={{ opacity: 1, translateY: 0 }}\r\n                leave={{ translateY: -50, opacity: 0 }}\r\n            >\r\n                {clearListModal && (\r\n                    <div className=\"modalCont clearListModal center\" key=\"clear\">\r\n                        <div className=\"modal\">\r\n                            <MdDeleteSweep fontSize=\"3rem\" className=\"bin\" />\r\n                            <h3>Are you sure You want to Clear All Your Lists?</h3>\r\n                            <p>All Lists will be removed permanently and Cannot be recovered!</p>\r\n                            <button\r\n                                className=\"modalBtn cancel\"\r\n                                onClick={() => {\r\n                                    setClearListModal(false);\r\n                                }}\r\n                            >\r\n                                <MdClear />\r\n                                <span>Cancel</span>\r\n                            </button>\r\n                            <button\r\n                                className=\"modalBtn del\"\r\n                                onClick={() => {\r\n                                    setClearListModal(false);\r\n                                    clearList();\r\n                                    setSide(false);\r\n                                }}\r\n                            >\r\n                                <MdDeleteSweep />\r\n                                <span> Clear all Lists</span>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Transition>\r\n            {/* Contact Me Section */}\r\n            <Transition\r\n                component={false}\r\n                appear={{ translateY: 50, opacity: 0 }}\r\n                enter={{ opacity: 1, translateY: 0 }}\r\n                leave={{ translateY: -50, opacity: 0 }}\r\n            >\r\n                {contactModal && (\r\n                    <div\r\n                        key=\"contact\"\r\n                        className=\"modalCont contactModal\"\r\n                        style={{ userSelect: \"text\" }}\r\n                    >\r\n                        <div className=\"modal\">\r\n                            <MdClear\r\n                                className={\"icon closeModal\"}\r\n                                size=\"1.5rem\"\r\n                                onClick={() => {\r\n                                    setContactModal(false);\r\n                                    setFormStatus(\"send\");\r\n                                    closeContactModal();\r\n                                }}\r\n                            />\r\n\r\n                            <form\r\n                                className=\"contact\"\r\n                                onSubmit={(event) => {\r\n                                    event.preventDefault();\r\n                                    sendForm(event);\r\n                                    setFormStatus(\"sending\");\r\n                                }}\r\n                            >\r\n                                <h3>Contact Me</h3>\r\n                                <div className={`input-container `}>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={`Input ${nameErr ? \"err\" : \"\"}`}\r\n                                        name=\"from_name\"\r\n                                        autoComplete=\"off\"\r\n                                        required={true}\r\n                                        onKeyUp={(event) => {\r\n                                            setNameErr(check(event));\r\n                                        }}\r\n                                        onBlur={(event) => {\r\n                                            setNameErr(check(event));\r\n                                        }}\r\n                                    />\r\n                                    <Border />\r\n                                    <span>Full Name</span>\r\n                                </div>\r\n                                <div className=\"input-container\">\r\n                                    <input\r\n                                        type=\"email\"\r\n                                        className={`Input email ${emailErr ? \"err\" : \"\"}`}\r\n                                        name=\"from_email\"\r\n                                        autoComplete=\"off\"\r\n                                        required={true}\r\n                                        onKeyUp={checkEmail}\r\n                                        onBlur={checkEmail}\r\n                                    />\r\n                                    <Border />\r\n                                    <span>email</span>\r\n                                </div>\r\n                                <div className=\"input-container message\">\r\n                                    <textarea\r\n                                        className={`Input ${messageErr ? \"err\" : \"\"}`}\r\n                                        name=\"message\"\r\n                                        required={true}\r\n                                        onKeyUp={(event) => {\r\n                                            setMessageErr(check(event));\r\n                                        }}\r\n                                        onBlur={(event) => {\r\n                                            setMessageErr(check(event));\r\n                                        }}\r\n                                    ></textarea>\r\n                                    <svg\r\n                                        className=\"border textarea\"\r\n                                        viewBox=\"0 0 309 277\"\r\n                                        preserveAspectRatio=\"none\"\r\n                                    >\r\n                                        <path\r\n                                            className=\"cls-1 path\"\r\n                                            d=\"M154.5,1.5h138a15,15,0,0,1,15,15v244a15,15,0,0,1-15,15h-138\"\r\n                                        />\r\n                                        <path\r\n                                            className=\"cls-2 path\"\r\n                                            d=\"M154.5,275.5H16.5a15,15,0,0,1-15-15V16.5a15,15,0,0,1,15-15h138\"\r\n                                        />\r\n                                    </svg>\r\n                                    <span>Message</span>\r\n                                </div>\r\n                                <button\r\n                                    className={`modalBtn sendBtn ${sendBtn.className}`}\r\n                                    type=\"submit\"\r\n                                >\r\n                                    {sendBtn.icon}\r\n                                    <span>{sendBtn.text}</span>\r\n                                </button>\r\n                            </form>\r\n                            <div className=\"social\">\r\n                                <a\r\n                                    href=\"https://www.facebook.com/crimson.oluwatowo/\"\r\n                                    className=\"facebook\"\r\n                                >\r\n                                    <FaFacebookF />\r\n                                </a>\r\n                                <a\r\n                                    href=\"https://www.instagram.com/crimson_corp/\"\r\n                                    className=\"instagram\"\r\n                                >\r\n                                    <FaInstagram />\r\n                                </a>\r\n                                <a href=\"m.me/oluwatowo_rosanwo\" className=\"messenger\">\r\n                                    <FaFacebookMessenger />\r\n                                </a>\r\n                                <a\r\n                                    href=\"https://api.whatsapp.com/send?phone=+2348024537884&text=Hi20%Crimson%20%\"\r\n                                    className=\"whatsapp\"\r\n                                >\r\n                                    <FaWhatsapp />\r\n                                </a>\r\n                                <a href=\"https://github.com/CRIMSON-CORP\" className=\"github\">\r\n                                    <FaGithub />\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Transition>\r\n            {/* Donate Section */}\r\n            <Transition\r\n                component={false}\r\n                appear={{ translateY: 50, opacity: 0 }}\r\n                enter={{ opacity: 1, translateY: 0 }}\r\n                leave={{ translateY: -50, opacity: 0 }}\r\n            >\r\n                {donateModal && (\r\n                    <div\r\n                        key=\"donate\"\r\n                        className=\"modalCont donateModal\"\r\n                        style={{ userSelect: \"text\" }}\r\n                    >\r\n                        <div className=\"modal\">\r\n                            <MdClear\r\n                                className={\"icon closeModal\"}\r\n                                size=\"1.5rem\"\r\n                                onClick={() => {\r\n                                    setDonateModal(false);\r\n                                    setCopy(false);\r\n                                }}\r\n                            />\r\n\r\n                            <h3>Donate</h3>\r\n                            <div className=\"info-block\">\r\n                                <h4>- About Me</h4>\r\n                                <p>\r\n                                    My Name is Oluwatowo Rosanwo Mayowa, I'm a 200L Student of The\r\n                                    University Of Ibadan studying Food Technology, I started Web\r\n                                    Development in 2018 and Now I'm a Self Taught Intermediate Full\r\n                                    Stack Web Developer and Aspiring UI/UX Deisgner, Im also a\r\n                                    Logo/Video Editor.\r\n                                </p>\r\n                                <p>\r\n                                    I've had intense Self training on basics of Web Development\r\n                                    which include HTML,CSS and Vanilla JAVASCRIPT, I Studied jQuery\r\n                                    and React (This PWA was build With React), as well as back-end\r\n                                    Frameworks Like NodeJS Express, and Database Query Language\r\n                                    MySQL and Ive Built Projects With all These Technologies.\r\n                                </p>\r\n                                <p>\r\n                                    I'm really good at solving problems and really bad at giving up\r\n                                    on a project, I aspire to be hired as an Intern and Then gradute\r\n                                    to Being a Frelance Developer.\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"info-block\">\r\n                                <h4>- Donate</h4>\r\n                                <p>\r\n                                    Please if You really Like my Work and have a some money to\r\n                                    spare, Kindly make a Donation To me as This will enhance my\r\n                                    Progress and Productivity and also make me work harder and\r\n                                    Develop more Apps that you will Definately find usefull\r\n                                </p>\r\n                            </div>\r\n\r\n                            <h4>Account Details:</h4>\r\n                            <pre>\r\n                                Bank: First Bank <br />\r\n                                Account Number: <span id=\"acc\">3123872415</span> <br />\r\n                                Account Name: Oluwatowo Rosanwo <br />\r\n                            </pre>\r\n                            <button\r\n                                className={`copy modalBtn sendBtn ${copy ? \"Sent\" : \"Send\"}`}\r\n                                onClick={() => {\r\n                                    var temp = document.createElement(\"input\");\r\n                                    document.querySelector(\".donateModal .modal\").appendChild(temp);\r\n                                    temp.value = document.querySelector(\"#acc\").innerHTML;\r\n                                    temp.select();\r\n                                    document.execCommand(\"copy\");\r\n                                    temp.remove();\r\n                                    setCopy(true);\r\n                                    copyComp();\r\n                                }}\r\n                            >\r\n                                {copy ? (\r\n                                    <>\r\n                                        <MdCheck />\r\n                                        <span>Copied</span>\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        <FiCopy />\r\n                                        <span>Copy Account Number</span>\r\n                                    </>\r\n                                )}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Transition>\r\n            {/* How to use section */}\r\n            <Transition\r\n                component={false}\r\n                appear={{ translateY: 50, opacity: 0 }}\r\n                enter={{ opacity: 1, translateY: 0 }}\r\n                leave={{ translateY: -50, opacity: 0 }}\r\n            >\r\n                {helpModal && (\r\n                    <div key=\"help\" className=\"modalCont helpModal\">\r\n                        <div className=\"modal\">\r\n                            <MdClear\r\n                                className={\"icon closeModal\"}\r\n                                size=\"1.5rem\"\r\n                                onClick={() => {\r\n                                    setHelpModal(false);\r\n                                }}\r\n                            />\r\n\r\n                            <h3>\r\n                                <u>How To Use</u>\r\n                            </h3>\r\n                            <div className=\"info-block\">\r\n                                <h4>What the App is used for</h4>\r\n                                <p>\r\n                                    Todo App is a Web Application Designed By Crimson Corp, it is\r\n                                    designed specifically for creating Todo Lists.\r\n                                </p>\r\n                                <p>\r\n                                    Now, one of the most important reasons for keeping a Todo list\r\n                                    is the organization, Organizing your tasks with a list can make\r\n                                    everything much more managable and make you feel grounded.\r\n                                    Seeing a clear outline of your completed and uncompleted tasks\r\n                                    will help you feel organized and mentally focused\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"info-block\">\r\n                                <h4>Note!</h4>\r\n                                <p>\r\n                                    Video Illustrations are made with Desktop interface so you can\r\n                                    see what exactly is beign clicked\r\n                                </p>\r\n                                <p>if Video Illustration dosen't play, Kindly refresh the page </p>\r\n                            </div>\r\n                            <div className=\"info-block\">\r\n                                <h4>Creating a List</h4>\r\n                                <p>\r\n                                    To Create a List, Click the three line icon at Top left corner\r\n                                    and click \"Add New List\", then Write the name of the list and\r\n                                    Click Save\r\n                                </p>\r\n                                <video autoPlay={true} loop={true}>\r\n                                    <source src={newList} type=\"video/mp4\" />\r\n                                </video>\r\n                            </div>\r\n                            <div className=\"info-block\">\r\n                                <h4>Creating a Task</h4>\r\n                                <p>\r\n                                    To Create a task, wimply write it in the Input Field and press\r\n                                    the Plus Button to add it to the List\r\n                                </p>\r\n                                <video autoPlay={true} loop={true}>\r\n                                    <source src={create} type=\"video/mp4\" />\r\n                                </video>\r\n                            </div>\r\n                            <div className=\"info-block\">\r\n                                <h4>Editing a Task and Setting Reminder</h4>\r\n                                <p>\r\n                                    To Edit a Task Simply Click the pen on paper icon at the right\r\n                                    of every task, you can decide to change the task name if you\r\n                                    wish, to set Reminder Simply add the Date you want to set\r\n                                    reminder for and Click Save\r\n                                </p>\r\n                                <video autoPlay={true} loop={true}>\r\n                                    <source src={edit_rem} type=\"video/mp4\" />\r\n                                </video>\r\n                            </div>\r\n                            <div className=\"info-block\">\r\n                                <h4>Rename a List</h4>\r\n                                <p>\r\n                                    To Rename a List Simply Click the pen on paper icon at the right\r\n                                    of every List, write the New name of the List and Click Save\r\n                                </p>\r\n                                <video autoPlay={true} loop={true}>\r\n                                    <source src={renameList} type=\"video/mp4\" />\r\n                                </video>\r\n                            </div>\r\n                            <div className=\"info-block\">\r\n                                <h3>Icon wheel Description</h3>\r\n                                <div className=\"icon_descript\">\r\n                                    <img src={blue} alt=\"Blue wheel\" />\r\n                                    <p>Blue wheel means that your task Reminder is Running</p>\r\n                                </div>\r\n                                <div className=\"icon_descript\">\r\n                                    <img src={yell} alt=\"Yellow wheel\" />\r\n                                    <p>\r\n                                        Yellow wheel means that your task Reminder has Thirty\r\n                                        minutes Left to Due Time!\r\n                                    </p>\r\n                                </div>\r\n                                <div className=\"icon_descript\">\r\n                                    <img src={pass} alt=\"Red wheel\" />\r\n                                    <p>\r\n                                        Red wheel means that your task Reminder has passed Due Time!\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <h3>\r\n                                <u>Performance Improvement Tips</u>\r\n                            </h3>\r\n                            <div className=\"info-block\">\r\n                                <p>\r\n                                    For better user Experience, its best that the app continues to\r\n                                    fuction even when not beign used so as to give Reminders at\r\n                                    Appropriate times, to achieved this, Ive highlighted two Easy\r\n                                    ways to achieve this feat, although there are more complex ways\r\n                                    that Garuatee\r\n                                </p>\r\n                                <h4>Locking the App from Closing</h4>\r\n                                <p>\r\n                                    This is very easy to accomplish, you just need to minimize the\r\n                                    App and the click the icon that looks like a Lock, You will have\r\n                                    to lock Google Chrome or any Browser used to Install this App is\r\n                                    a extension of the Browser, if your Browser shuts down, the app\r\n                                    shuts down with it\r\n                                </p>\r\n                                <img src={lock} alt=\"lock\"></img>\r\n                                <h4>Removig the App from Optiization List</h4>\r\n                                <p>\r\n                                    There are a lot of Inbuilt system Apps that constantly optimize\r\n                                    our device for us, This sounds Good but it removes the Apps that\r\n                                    we need to function even when were not using it, a way around\r\n                                    this is to remove the App from any optimization List as much as\r\n                                    possible for it to continue running and Reminding you in future\r\n                                </p>\r\n                                <img src={opt} alt=\"optimize\"></img>\r\n                                <p>\r\n                                    Although these tips do not assure Maximum effectivenes of the\r\n                                    App, but they have been proven to improve it\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Transition>\r\n            <Transition component={false} enter={{ opacity: 1 }} leave={{ opacity: 0 }}>\r\n                {(newListModal ||\r\n                    renameListModal ||\r\n                    deleteListModal ||\r\n                    donateModal ||\r\n                    helpModal ||\r\n                    clearListModal ||\r\n                    contactModal) && (\r\n                    <div\r\n                        key=\"underlay\"\r\n                        className=\"ModalUnderLay\"\r\n                        onClick={() => {\r\n                            setNewListModal(false);\r\n                            setRenameListModal(false);\r\n                            setDeleteListModal(false);\r\n                            setDonateModal(false);\r\n                            setHelpModal(false);\r\n                            setContactModal(false);\r\n                            setContactModal(false);\r\n                        }}\r\n                    ></div>\r\n                )}\r\n            </Transition>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default OuterControl;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport App from \"./App\";\r\nimport uuid from \"uuid\";\r\nimport OuterControl from \"./OuterControl\";\r\nimport { MdDehaze } from \"react-icons/md\";\r\nimport \"animate.css\";\r\nimport emailjs from \"emailjs-com\";\r\n\r\nfunction Main() {\r\n    const ls = localStorage;\r\n    const [app, setApp] = useState(() => {\r\n        return ls.getItem(\"AppLocal\") === null ? [] : JSON.parse(ls.getItem(\"AppLocal\"));\r\n    });\r\n    const [currentList, setCurrentList] = useState(() => {\r\n        return ls.getItem(\"Index\") === null ? 0 : Number.parseInt(ls.getItem(\"Index\"));\r\n    });\r\n    const [whichMode, setwhichMode] = useState(() => {\r\n        return ls.getItem(\"mode\") === null ? true : JSON.parse(ls.getItem(\"mode\").toLowerCase());\r\n    });\r\n    const [formStatus, setFormStatus] = useState(\"send\");\r\n    const [mainCurrentListId, setMainCurrentListId] = useState(() => {\r\n        return ls.getItem(\"Index\") === null ? 0 : app[Number.parseInt(ls.getItem(\"Index\"))].id;\r\n    });\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"AppLocal\", JSON.stringify(app));\r\n    }, [app]);\r\n\r\n    useEffect(() => {\r\n        ls.setItem(\"Index\", JSON.stringify(currentList));\r\n        ls.setItem(\"IndexID\", JSON.stringify(app[currentList].id));\r\n        setMainCurrentListId(app[currentList].id);\r\n        // eslint-disable-next-line\r\n    }, [currentList, app]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"mode\", whichMode);\r\n    }, [whichMode]);\r\n\r\n    function addList(newListName) {\r\n        let NewListProps = {\r\n            id: uuid.v4(),\r\n            name: newListName,\r\n        };\r\n        setCurrentList(app.length);\r\n        setApp((prev) => {\r\n            return [...prev, NewListProps];\r\n        });\r\n    }\r\n\r\n    function updateList(id, name) {\r\n        setApp(\r\n            app.map((app) => {\r\n                if (app.id === id) app.name = name;\r\n                return app;\r\n            })\r\n        );\r\n    }\r\n\r\n    function deleteList(id) {\r\n        ls.removeItem(id);\r\n        var filteredList = app.filter((app) => app.id !== id);\r\n        setCurrentList(filteredList.length - 1);\r\n        setApp(filteredList);\r\n    }\r\n    function clearList() {\r\n        setApp([]);\r\n        ls.clear();\r\n    }\r\n\r\n    async function sendForm(form) {\r\n        try {\r\n            var res = await emailjs.sendForm(\r\n                process.env.REACT_APP_Service_id,\r\n                process.env.REACT_APP_template_id,\r\n                form.target,\r\n                process.env.REACT_APP_User_ID\r\n            );\r\n            if (res.status === 1 || res.text === \"OK\") setFormStatus(\"sent\");\r\n            else throw res;\r\n        } catch (err) {\r\n            if (err) setFormStatus(\"error\");\r\n        }\r\n    }\r\n\r\n    var content;\r\n    app.length <= 0\r\n        ? (content = (\r\n              <div className=\"noList\">\r\n                  <div>\r\n                      <h1>No Lists</h1>\r\n                      <p>\r\n                          Click <MdDehaze size=\"1.2rem\" style={{ margin: \"0 5px\" }} /> to make a\r\n                          List\r\n                      </p>\r\n                  </div>\r\n              </div>\r\n          ))\r\n        : (content = app.map((app, Index) => {\r\n              return <App key={Index} props={{ app, clID: mainCurrentListId }} />;\r\n          }));\r\n\r\n    return (\r\n        <div className={`main ${whichMode ? \"\" : \"light\"}`}>\r\n            <OuterControl\r\n                props={{\r\n                    app,\r\n                    addList,\r\n                    setCurrentList,\r\n                    updateList,\r\n                    deleteList,\r\n                    currentList,\r\n                    clearList,\r\n                    setwhichMode,\r\n                    whichMode,\r\n                    sendForm,\r\n                    formStatus,\r\n                    setFormStatus,\r\n                }}\r\n            />\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.css\";\r\nimport Main from \"./Components/Main\";\r\n// import Test from \"./Test\";\r\nimport ReactNotification from \"react-notifications-component\";\r\nimport \"react-notifications-component/dist/theme.css\";\r\nimport \"animate.css/animate.compat.css\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nReactDOM.render(\r\n    <>\r\n        <ReactNotification className=\"notif\" />\r\n        <Main />\r\n    </>,\r\n    document.getElementById(\"root\")\r\n);\r\nserviceWorker.register();\r\n"],"sourceRoot":""}